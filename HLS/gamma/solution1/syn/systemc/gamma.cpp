// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "gamma.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic gamma::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic gamma::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> gamma::ap_ST_fsm_state1 = "1";
const sc_lv<9> gamma::ap_ST_fsm_state2 = "10";
const sc_lv<9> gamma::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<9> gamma::ap_ST_fsm_pp0_stage1 = "1000";
const sc_lv<9> gamma::ap_ST_fsm_state15 = "10000";
const sc_lv<9> gamma::ap_ST_fsm_state16 = "100000";
const sc_lv<9> gamma::ap_ST_fsm_state17 = "1000000";
const sc_lv<9> gamma::ap_ST_fsm_state18 = "10000000";
const sc_lv<9> gamma::ap_ST_fsm_state19 = "100000000";
const sc_lv<32> gamma::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool gamma::ap_const_boolean_1 = true;
const sc_lv<32> gamma::ap_const_lv32_1 = "1";
const sc_lv<32> gamma::ap_const_lv32_3 = "11";
const bool gamma::ap_const_boolean_0 = false;
const sc_lv<1> gamma::ap_const_lv1_0 = "0";
const sc_lv<32> gamma::ap_const_lv32_8 = "1000";
const sc_lv<32> gamma::ap_const_lv32_2 = "10";
const int gamma::C_S_AXI_DATA_WIDTH = "100000";
const int gamma::C_M_AXI_GMEM_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int gamma::C_M_AXI_GMEM_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int gamma::C_M_AXI_GMEM_CACHE_VALUE = "11";
const int gamma::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<1> gamma::ap_const_lv1_1 = "1";
const sc_lv<8> gamma::ap_const_lv8_0 = "00000000";
const sc_lv<3> gamma::ap_const_lv3_0 = "000";
const sc_lv<2> gamma::ap_const_lv2_0 = "00";
const sc_lv<4> gamma::ap_const_lv4_0 = "0000";
const sc_lv<2> gamma::ap_const_lv2_3 = "11";
const sc_lv<32> gamma::ap_const_lv32_1F = "11111";
const sc_lv<8> gamma::ap_const_lv8_1 = "1";
const sc_lv<32> gamma::ap_const_lv32_17 = "10111";

gamma::gamma(sc_module_name name) : sc_module(name), mVcdFile(0) {
    gamma_AXILiteS_s_axi_U = new gamma_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("gamma_AXILiteS_s_axi_U");
    gamma_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    gamma_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    gamma_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    gamma_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    gamma_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    gamma_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    gamma_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    gamma_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    gamma_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    gamma_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    gamma_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    gamma_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    gamma_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    gamma_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    gamma_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    gamma_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    gamma_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    gamma_AXILiteS_s_axi_U->ACLK(ap_clk);
    gamma_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    gamma_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    gamma_AXILiteS_s_axi_U->ap_start(ap_start);
    gamma_AXILiteS_s_axi_U->interrupt(interrupt);
    gamma_AXILiteS_s_axi_U->ap_ready(ap_ready);
    gamma_AXILiteS_s_axi_U->ap_done(ap_done);
    gamma_AXILiteS_s_axi_U->ap_idle(ap_idle);
    gamma_AXILiteS_s_axi_U->dim_V(dim_V);
    gamma_AXILiteS_s_axi_U->gamma_V(gamma_V);
    gamma_AXILiteS_s_axi_U->mlp_output_V(mlp_output_V);
    gamma_AXILiteS_s_axi_U->output_V(output_V);
    gamma_gmem_m_axi_U = new gamma_gmem_m_axi<0,16,32,5,16,16,16,16,C_M_AXI_GMEM_ID_WIDTH,C_M_AXI_GMEM_ADDR_WIDTH,C_M_AXI_GMEM_DATA_WIDTH,C_M_AXI_GMEM_AWUSER_WIDTH,C_M_AXI_GMEM_ARUSER_WIDTH,C_M_AXI_GMEM_WUSER_WIDTH,C_M_AXI_GMEM_RUSER_WIDTH,C_M_AXI_GMEM_BUSER_WIDTH,C_M_AXI_GMEM_USER_VALUE,C_M_AXI_GMEM_PROT_VALUE,C_M_AXI_GMEM_CACHE_VALUE>("gamma_gmem_m_axi_U");
    gamma_gmem_m_axi_U->AWVALID(m_axi_gmem_AWVALID);
    gamma_gmem_m_axi_U->AWREADY(m_axi_gmem_AWREADY);
    gamma_gmem_m_axi_U->AWADDR(m_axi_gmem_AWADDR);
    gamma_gmem_m_axi_U->AWID(m_axi_gmem_AWID);
    gamma_gmem_m_axi_U->AWLEN(m_axi_gmem_AWLEN);
    gamma_gmem_m_axi_U->AWSIZE(m_axi_gmem_AWSIZE);
    gamma_gmem_m_axi_U->AWBURST(m_axi_gmem_AWBURST);
    gamma_gmem_m_axi_U->AWLOCK(m_axi_gmem_AWLOCK);
    gamma_gmem_m_axi_U->AWCACHE(m_axi_gmem_AWCACHE);
    gamma_gmem_m_axi_U->AWPROT(m_axi_gmem_AWPROT);
    gamma_gmem_m_axi_U->AWQOS(m_axi_gmem_AWQOS);
    gamma_gmem_m_axi_U->AWREGION(m_axi_gmem_AWREGION);
    gamma_gmem_m_axi_U->AWUSER(m_axi_gmem_AWUSER);
    gamma_gmem_m_axi_U->WVALID(m_axi_gmem_WVALID);
    gamma_gmem_m_axi_U->WREADY(m_axi_gmem_WREADY);
    gamma_gmem_m_axi_U->WDATA(m_axi_gmem_WDATA);
    gamma_gmem_m_axi_U->WSTRB(m_axi_gmem_WSTRB);
    gamma_gmem_m_axi_U->WLAST(m_axi_gmem_WLAST);
    gamma_gmem_m_axi_U->WID(m_axi_gmem_WID);
    gamma_gmem_m_axi_U->WUSER(m_axi_gmem_WUSER);
    gamma_gmem_m_axi_U->ARVALID(m_axi_gmem_ARVALID);
    gamma_gmem_m_axi_U->ARREADY(m_axi_gmem_ARREADY);
    gamma_gmem_m_axi_U->ARADDR(m_axi_gmem_ARADDR);
    gamma_gmem_m_axi_U->ARID(m_axi_gmem_ARID);
    gamma_gmem_m_axi_U->ARLEN(m_axi_gmem_ARLEN);
    gamma_gmem_m_axi_U->ARSIZE(m_axi_gmem_ARSIZE);
    gamma_gmem_m_axi_U->ARBURST(m_axi_gmem_ARBURST);
    gamma_gmem_m_axi_U->ARLOCK(m_axi_gmem_ARLOCK);
    gamma_gmem_m_axi_U->ARCACHE(m_axi_gmem_ARCACHE);
    gamma_gmem_m_axi_U->ARPROT(m_axi_gmem_ARPROT);
    gamma_gmem_m_axi_U->ARQOS(m_axi_gmem_ARQOS);
    gamma_gmem_m_axi_U->ARREGION(m_axi_gmem_ARREGION);
    gamma_gmem_m_axi_U->ARUSER(m_axi_gmem_ARUSER);
    gamma_gmem_m_axi_U->RVALID(m_axi_gmem_RVALID);
    gamma_gmem_m_axi_U->RREADY(m_axi_gmem_RREADY);
    gamma_gmem_m_axi_U->RDATA(m_axi_gmem_RDATA);
    gamma_gmem_m_axi_U->RLAST(m_axi_gmem_RLAST);
    gamma_gmem_m_axi_U->RID(m_axi_gmem_RID);
    gamma_gmem_m_axi_U->RUSER(m_axi_gmem_RUSER);
    gamma_gmem_m_axi_U->RRESP(m_axi_gmem_RRESP);
    gamma_gmem_m_axi_U->BVALID(m_axi_gmem_BVALID);
    gamma_gmem_m_axi_U->BREADY(m_axi_gmem_BREADY);
    gamma_gmem_m_axi_U->BRESP(m_axi_gmem_BRESP);
    gamma_gmem_m_axi_U->BID(m_axi_gmem_BID);
    gamma_gmem_m_axi_U->BUSER(m_axi_gmem_BUSER);
    gamma_gmem_m_axi_U->ACLK(ap_clk);
    gamma_gmem_m_axi_U->ARESET(ap_rst_n_inv);
    gamma_gmem_m_axi_U->ACLK_EN(ap_var_for_const0);
    gamma_gmem_m_axi_U->I_ARVALID(gmem_ARVALID);
    gamma_gmem_m_axi_U->I_ARREADY(gmem_ARREADY);
    gamma_gmem_m_axi_U->I_ARADDR(gmem_ARADDR);
    gamma_gmem_m_axi_U->I_ARID(ap_var_for_const1);
    gamma_gmem_m_axi_U->I_ARLEN(ap_var_for_const2);
    gamma_gmem_m_axi_U->I_ARSIZE(ap_var_for_const3);
    gamma_gmem_m_axi_U->I_ARLOCK(ap_var_for_const4);
    gamma_gmem_m_axi_U->I_ARCACHE(ap_var_for_const5);
    gamma_gmem_m_axi_U->I_ARQOS(ap_var_for_const5);
    gamma_gmem_m_axi_U->I_ARPROT(ap_var_for_const3);
    gamma_gmem_m_axi_U->I_ARUSER(ap_var_for_const1);
    gamma_gmem_m_axi_U->I_ARBURST(ap_var_for_const4);
    gamma_gmem_m_axi_U->I_ARREGION(ap_var_for_const5);
    gamma_gmem_m_axi_U->I_RVALID(gmem_RVALID);
    gamma_gmem_m_axi_U->I_RREADY(gmem_RREADY);
    gamma_gmem_m_axi_U->I_RDATA(gmem_RDATA);
    gamma_gmem_m_axi_U->I_RID(gmem_RID);
    gamma_gmem_m_axi_U->I_RUSER(gmem_RUSER);
    gamma_gmem_m_axi_U->I_RRESP(gmem_RRESP);
    gamma_gmem_m_axi_U->I_RLAST(gmem_RLAST);
    gamma_gmem_m_axi_U->I_AWVALID(gmem_AWVALID);
    gamma_gmem_m_axi_U->I_AWREADY(gmem_AWREADY);
    gamma_gmem_m_axi_U->I_AWADDR(gmem_addr_reg_291);
    gamma_gmem_m_axi_U->I_AWID(ap_var_for_const1);
    gamma_gmem_m_axi_U->I_AWLEN(gmem_AWLEN);
    gamma_gmem_m_axi_U->I_AWSIZE(ap_var_for_const3);
    gamma_gmem_m_axi_U->I_AWLOCK(ap_var_for_const4);
    gamma_gmem_m_axi_U->I_AWCACHE(ap_var_for_const5);
    gamma_gmem_m_axi_U->I_AWQOS(ap_var_for_const5);
    gamma_gmem_m_axi_U->I_AWPROT(ap_var_for_const3);
    gamma_gmem_m_axi_U->I_AWUSER(ap_var_for_const1);
    gamma_gmem_m_axi_U->I_AWBURST(ap_var_for_const4);
    gamma_gmem_m_axi_U->I_AWREGION(ap_var_for_const5);
    gamma_gmem_m_axi_U->I_WVALID(gmem_WVALID);
    gamma_gmem_m_axi_U->I_WREADY(gmem_WREADY);
    gamma_gmem_m_axi_U->I_WDATA(tmp_5_reg_348);
    gamma_gmem_m_axi_U->I_WID(ap_var_for_const1);
    gamma_gmem_m_axi_U->I_WUSER(ap_var_for_const1);
    gamma_gmem_m_axi_U->I_WLAST(ap_var_for_const6);
    gamma_gmem_m_axi_U->I_WSTRB(ap_var_for_const7);
    gamma_gmem_m_axi_U->I_BVALID(gmem_BVALID);
    gamma_gmem_m_axi_U->I_BREADY(gmem_BREADY);
    gamma_gmem_m_axi_U->I_BRESP(gmem_BRESP);
    gamma_gmem_m_axi_U->I_BID(gmem_BID);
    gamma_gmem_m_axi_U->I_BUSER(gmem_BUSER);
    gamma_mul_mul_16sbkb_U1 = new gamma_mul_mul_16sbkb<1,1,16,16,24>("gamma_mul_mul_16sbkb_U1");
    gamma_mul_mul_16sbkb_U1->din0(gmem_addr_2_read_reg_343);
    gamma_mul_mul_16sbkb_U1->din1(gmem_addr_1_read_reg_338);
    gamma_mul_mul_16sbkb_U1->dout(r_V_fu_278_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( exitcond_reg_317_pp0_iter3_reg );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( exitcond_reg_317_pp0_iter3_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( gmem_RVALID );
    sensitive << ( ap_block_state5_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( exitcond_reg_317_pp0_iter3_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( gmem_RVALID );
    sensitive << ( ap_block_state5_io );

    SC_METHOD(thread_ap_block_pp0_stage1);

    SC_METHOD(thread_ap_block_pp0_stage1_01001);
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( exitcond_reg_317_pp0_iter4_reg );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_pp0_stage1_11001);
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( exitcond_reg_317_pp0_iter4_reg );
    sensitive << ( gmem_RVALID );
    sensitive << ( ap_block_state4_io );
    sensitive << ( ap_block_state14_io );

    SC_METHOD(thread_ap_block_pp0_stage1_subdone);
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( exitcond_reg_317_pp0_iter4_reg );
    sensitive << ( gmem_RVALID );
    sensitive << ( ap_block_state4_io );
    sensitive << ( ap_block_state14_io );

    SC_METHOD(thread_ap_block_state10_pp0_stage1_iter3);

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter4);
    sensitive << ( exitcond_reg_317_pp0_iter3_reg );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_state12_pp0_stage1_iter4);
    sensitive << ( exitcond_reg_317_pp0_iter4_reg );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_state13_pp0_stage0_iter5);

    SC_METHOD(thread_ap_block_state14_io);
    sensitive << ( exitcond_reg_317_pp0_iter5_reg );
    sensitive << ( ap_sig_ioackin_gmem_WREADY );

    SC_METHOD(thread_ap_block_state14_pp0_stage1_iter5);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state4_io);
    sensitive << ( exitcond_reg_317 );
    sensitive << ( ap_sig_ioackin_gmem_ARREADY );

    SC_METHOD(thread_ap_block_state4_pp0_stage1_iter0);

    SC_METHOD(thread_ap_block_state5_io);
    sensitive << ( exitcond_reg_317 );
    sensitive << ( ap_sig_ioackin_gmem_ARREADY );

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state6_pp0_stage1_iter1);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state8_pp0_stage1_iter2);

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter3);

    SC_METHOD(thread_ap_condition_403);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1_01001 );

    SC_METHOD(thread_ap_condition_414);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_ap_condition_569);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( exitcond_reg_317_pp0_iter5_reg );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state3);
    sensitive << ( exitcond_fu_218_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( gmem_BVALID );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_METHOD(thread_ap_phi_mux_i_op_assign_phi_fu_161_p4);
    sensitive << ( exitcond_reg_317 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( i_op_assign_reg_157 );
    sensitive << ( i_reg_321 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( gmem_BVALID );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_gmem_ARREADY);
    sensitive << ( gmem_ARREADY );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_gmem_AWREADY);
    sensitive << ( gmem_AWREADY );
    sensitive << ( ap_reg_ioackin_gmem_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_gmem_WREADY);
    sensitive << ( gmem_WREADY );
    sensitive << ( ap_reg_ioackin_gmem_WREADY );

    SC_METHOD(thread_exitcond_fu_218_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( dim_V_read_reg_285 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_phi_mux_i_op_assign_phi_fu_161_p4 );

    SC_METHOD(thread_gamma_V2_sum_cast_fu_238_p1);
    sensitive << ( gamma_V2_sum_fu_233_p2 );

    SC_METHOD(thread_gamma_V2_sum_fu_233_p2);
    sensitive << ( tmp_4_cast_reg_312 );
    sensitive << ( tmp_2_cast_fu_229_p1 );

    SC_METHOD(thread_gmem_ARADDR);
    sensitive << ( exitcond_reg_317 );
    sensitive << ( gmem_addr_1_reg_326 );
    sensitive << ( gmem_addr_2_reg_332 );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );
    sensitive << ( ap_condition_403 );
    sensitive << ( ap_condition_414 );

    SC_METHOD(thread_gmem_ARVALID);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( exitcond_reg_317 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );
    sensitive << ( ap_block_pp0_stage1_01001 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_gmem_AWLEN);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( dim_V_read_reg_285 );
    sensitive << ( ap_reg_ioackin_gmem_AWREADY );

    SC_METHOD(thread_gmem_AWVALID);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_reg_ioackin_gmem_AWREADY );

    SC_METHOD(thread_gmem_BREADY);
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( gmem_BVALID );

    SC_METHOD(thread_gmem_RREADY);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( exitcond_reg_317_pp0_iter3_reg );
    sensitive << ( exitcond_reg_317_pp0_iter4_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_gmem_WVALID);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( exitcond_reg_317_pp0_iter5_reg );
    sensitive << ( ap_block_pp0_stage1_01001 );
    sensitive << ( ap_reg_ioackin_gmem_WREADY );

    SC_METHOD(thread_gmem_blk_n_AR);
    sensitive << ( m_axi_gmem_ARREADY );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( exitcond_reg_317 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_gmem_blk_n_AW);
    sensitive << ( m_axi_gmem_AWREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_gmem_blk_n_B);
    sensitive << ( m_axi_gmem_BVALID );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_gmem_blk_n_R);
    sensitive << ( m_axi_gmem_RVALID );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_reg_317_pp0_iter3_reg );
    sensitive << ( exitcond_reg_317_pp0_iter4_reg );

    SC_METHOD(thread_gmem_blk_n_W);
    sensitive << ( m_axi_gmem_WREADY );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( exitcond_reg_317_pp0_iter5_reg );

    SC_METHOD(thread_i_fu_223_p2);
    sensitive << ( ap_phi_mux_i_op_assign_phi_fu_161_p4 );

    SC_METHOD(thread_mlp_output_V4_sum_ca_fu_253_p1);
    sensitive << ( mlp_output_V4_sum_fu_248_p2 );

    SC_METHOD(thread_mlp_output_V4_sum_fu_248_p2);
    sensitive << ( tmp_3_cast7_reg_307 );
    sensitive << ( tmp_2_cast_fu_229_p1 );

    SC_METHOD(thread_output_V5_fu_168_p4);
    sensitive << ( output_V );

    SC_METHOD(thread_tmp_2_cast_fu_229_p1);
    sensitive << ( ap_phi_mux_i_op_assign_phi_fu_161_p4 );

    SC_METHOD(thread_tmp_3_cast7_fu_208_p1);
    sensitive << ( tmp_2_reg_297 );

    SC_METHOD(thread_tmp_4_cast_fu_211_p1);
    sensitive << ( tmp_3_reg_302 );

    SC_METHOD(thread_tmp_fu_178_p1);
    sensitive << ( output_V5_fu_168_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( gmem_BVALID );
    sensitive << ( ap_sig_ioackin_gmem_AWREADY );
    sensitive << ( exitcond_fu_218_p2 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp0_stage1_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const7);

    ap_CS_fsm = "000000001";
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_reg_ioackin_gmem_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_gmem_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_gmem_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "gamma_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_gmem_AWVALID, "(port)m_axi_gmem_AWVALID");
    sc_trace(mVcdFile, m_axi_gmem_AWREADY, "(port)m_axi_gmem_AWREADY");
    sc_trace(mVcdFile, m_axi_gmem_AWADDR, "(port)m_axi_gmem_AWADDR");
    sc_trace(mVcdFile, m_axi_gmem_AWID, "(port)m_axi_gmem_AWID");
    sc_trace(mVcdFile, m_axi_gmem_AWLEN, "(port)m_axi_gmem_AWLEN");
    sc_trace(mVcdFile, m_axi_gmem_AWSIZE, "(port)m_axi_gmem_AWSIZE");
    sc_trace(mVcdFile, m_axi_gmem_AWBURST, "(port)m_axi_gmem_AWBURST");
    sc_trace(mVcdFile, m_axi_gmem_AWLOCK, "(port)m_axi_gmem_AWLOCK");
    sc_trace(mVcdFile, m_axi_gmem_AWCACHE, "(port)m_axi_gmem_AWCACHE");
    sc_trace(mVcdFile, m_axi_gmem_AWPROT, "(port)m_axi_gmem_AWPROT");
    sc_trace(mVcdFile, m_axi_gmem_AWQOS, "(port)m_axi_gmem_AWQOS");
    sc_trace(mVcdFile, m_axi_gmem_AWREGION, "(port)m_axi_gmem_AWREGION");
    sc_trace(mVcdFile, m_axi_gmem_AWUSER, "(port)m_axi_gmem_AWUSER");
    sc_trace(mVcdFile, m_axi_gmem_WVALID, "(port)m_axi_gmem_WVALID");
    sc_trace(mVcdFile, m_axi_gmem_WREADY, "(port)m_axi_gmem_WREADY");
    sc_trace(mVcdFile, m_axi_gmem_WDATA, "(port)m_axi_gmem_WDATA");
    sc_trace(mVcdFile, m_axi_gmem_WSTRB, "(port)m_axi_gmem_WSTRB");
    sc_trace(mVcdFile, m_axi_gmem_WLAST, "(port)m_axi_gmem_WLAST");
    sc_trace(mVcdFile, m_axi_gmem_WID, "(port)m_axi_gmem_WID");
    sc_trace(mVcdFile, m_axi_gmem_WUSER, "(port)m_axi_gmem_WUSER");
    sc_trace(mVcdFile, m_axi_gmem_ARVALID, "(port)m_axi_gmem_ARVALID");
    sc_trace(mVcdFile, m_axi_gmem_ARREADY, "(port)m_axi_gmem_ARREADY");
    sc_trace(mVcdFile, m_axi_gmem_ARADDR, "(port)m_axi_gmem_ARADDR");
    sc_trace(mVcdFile, m_axi_gmem_ARID, "(port)m_axi_gmem_ARID");
    sc_trace(mVcdFile, m_axi_gmem_ARLEN, "(port)m_axi_gmem_ARLEN");
    sc_trace(mVcdFile, m_axi_gmem_ARSIZE, "(port)m_axi_gmem_ARSIZE");
    sc_trace(mVcdFile, m_axi_gmem_ARBURST, "(port)m_axi_gmem_ARBURST");
    sc_trace(mVcdFile, m_axi_gmem_ARLOCK, "(port)m_axi_gmem_ARLOCK");
    sc_trace(mVcdFile, m_axi_gmem_ARCACHE, "(port)m_axi_gmem_ARCACHE");
    sc_trace(mVcdFile, m_axi_gmem_ARPROT, "(port)m_axi_gmem_ARPROT");
    sc_trace(mVcdFile, m_axi_gmem_ARQOS, "(port)m_axi_gmem_ARQOS");
    sc_trace(mVcdFile, m_axi_gmem_ARREGION, "(port)m_axi_gmem_ARREGION");
    sc_trace(mVcdFile, m_axi_gmem_ARUSER, "(port)m_axi_gmem_ARUSER");
    sc_trace(mVcdFile, m_axi_gmem_RVALID, "(port)m_axi_gmem_RVALID");
    sc_trace(mVcdFile, m_axi_gmem_RREADY, "(port)m_axi_gmem_RREADY");
    sc_trace(mVcdFile, m_axi_gmem_RDATA, "(port)m_axi_gmem_RDATA");
    sc_trace(mVcdFile, m_axi_gmem_RLAST, "(port)m_axi_gmem_RLAST");
    sc_trace(mVcdFile, m_axi_gmem_RID, "(port)m_axi_gmem_RID");
    sc_trace(mVcdFile, m_axi_gmem_RUSER, "(port)m_axi_gmem_RUSER");
    sc_trace(mVcdFile, m_axi_gmem_RRESP, "(port)m_axi_gmem_RRESP");
    sc_trace(mVcdFile, m_axi_gmem_BVALID, "(port)m_axi_gmem_BVALID");
    sc_trace(mVcdFile, m_axi_gmem_BREADY, "(port)m_axi_gmem_BREADY");
    sc_trace(mVcdFile, m_axi_gmem_BRESP, "(port)m_axi_gmem_BRESP");
    sc_trace(mVcdFile, m_axi_gmem_BID, "(port)m_axi_gmem_BID");
    sc_trace(mVcdFile, m_axi_gmem_BUSER, "(port)m_axi_gmem_BUSER");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, dim_V, "dim_V");
    sc_trace(mVcdFile, gamma_V, "gamma_V");
    sc_trace(mVcdFile, mlp_output_V, "mlp_output_V");
    sc_trace(mVcdFile, output_V, "output_V");
    sc_trace(mVcdFile, gmem_blk_n_AW, "gmem_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, gmem_blk_n_W, "gmem_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, ap_block_pp0_stage1, "ap_block_pp0_stage1");
    sc_trace(mVcdFile, exitcond_reg_317, "exitcond_reg_317");
    sc_trace(mVcdFile, exitcond_reg_317_pp0_iter5_reg, "exitcond_reg_317_pp0_iter5_reg");
    sc_trace(mVcdFile, gmem_blk_n_B, "gmem_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, gmem_blk_n_AR, "gmem_blk_n_AR");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, gmem_blk_n_R, "gmem_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond_reg_317_pp0_iter3_reg, "exitcond_reg_317_pp0_iter3_reg");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, exitcond_reg_317_pp0_iter4_reg, "exitcond_reg_317_pp0_iter4_reg");
    sc_trace(mVcdFile, gmem_AWVALID, "gmem_AWVALID");
    sc_trace(mVcdFile, gmem_AWREADY, "gmem_AWREADY");
    sc_trace(mVcdFile, gmem_AWLEN, "gmem_AWLEN");
    sc_trace(mVcdFile, gmem_WVALID, "gmem_WVALID");
    sc_trace(mVcdFile, gmem_WREADY, "gmem_WREADY");
    sc_trace(mVcdFile, gmem_ARVALID, "gmem_ARVALID");
    sc_trace(mVcdFile, gmem_ARREADY, "gmem_ARREADY");
    sc_trace(mVcdFile, gmem_ARADDR, "gmem_ARADDR");
    sc_trace(mVcdFile, gmem_RVALID, "gmem_RVALID");
    sc_trace(mVcdFile, gmem_RREADY, "gmem_RREADY");
    sc_trace(mVcdFile, gmem_RDATA, "gmem_RDATA");
    sc_trace(mVcdFile, gmem_RLAST, "gmem_RLAST");
    sc_trace(mVcdFile, gmem_RID, "gmem_RID");
    sc_trace(mVcdFile, gmem_RUSER, "gmem_RUSER");
    sc_trace(mVcdFile, gmem_RRESP, "gmem_RRESP");
    sc_trace(mVcdFile, gmem_BVALID, "gmem_BVALID");
    sc_trace(mVcdFile, gmem_BREADY, "gmem_BREADY");
    sc_trace(mVcdFile, gmem_BRESP, "gmem_BRESP");
    sc_trace(mVcdFile, gmem_BID, "gmem_BID");
    sc_trace(mVcdFile, gmem_BUSER, "gmem_BUSER");
    sc_trace(mVcdFile, i_op_assign_reg_157, "i_op_assign_reg_157");
    sc_trace(mVcdFile, dim_V_read_reg_285, "dim_V_read_reg_285");
    sc_trace(mVcdFile, gmem_addr_reg_291, "gmem_addr_reg_291");
    sc_trace(mVcdFile, tmp_2_reg_297, "tmp_2_reg_297");
    sc_trace(mVcdFile, tmp_3_reg_302, "tmp_3_reg_302");
    sc_trace(mVcdFile, tmp_3_cast7_fu_208_p1, "tmp_3_cast7_fu_208_p1");
    sc_trace(mVcdFile, tmp_3_cast7_reg_307, "tmp_3_cast7_reg_307");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_AWREADY, "ap_sig_ioackin_gmem_AWREADY");
    sc_trace(mVcdFile, tmp_4_cast_fu_211_p1, "tmp_4_cast_fu_211_p1");
    sc_trace(mVcdFile, tmp_4_cast_reg_312, "tmp_4_cast_reg_312");
    sc_trace(mVcdFile, exitcond_fu_218_p2, "exitcond_fu_218_p2");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter0, "ap_block_state3_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter1, "ap_block_state5_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_ARREADY, "ap_sig_ioackin_gmem_ARREADY");
    sc_trace(mVcdFile, ap_block_state5_io, "ap_block_state5_io");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter2, "ap_block_state7_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter3, "ap_block_state9_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter4, "ap_block_state11_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_state13_pp0_stage0_iter5, "ap_block_state13_pp0_stage0_iter5");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, exitcond_reg_317_pp0_iter1_reg, "exitcond_reg_317_pp0_iter1_reg");
    sc_trace(mVcdFile, exitcond_reg_317_pp0_iter2_reg, "exitcond_reg_317_pp0_iter2_reg");
    sc_trace(mVcdFile, i_fu_223_p2, "i_fu_223_p2");
    sc_trace(mVcdFile, i_reg_321, "i_reg_321");
    sc_trace(mVcdFile, gmem_addr_1_reg_326, "gmem_addr_1_reg_326");
    sc_trace(mVcdFile, gmem_addr_2_reg_332, "gmem_addr_2_reg_332");
    sc_trace(mVcdFile, gmem_addr_1_read_reg_338, "gmem_addr_1_read_reg_338");
    sc_trace(mVcdFile, gmem_addr_2_read_reg_343, "gmem_addr_2_read_reg_343");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage1_iter0, "ap_block_state4_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_state4_io, "ap_block_state4_io");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage1_iter1, "ap_block_state6_pp0_stage1_iter1");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage1_iter2, "ap_block_state8_pp0_stage1_iter2");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage1_iter3, "ap_block_state10_pp0_stage1_iter3");
    sc_trace(mVcdFile, ap_block_state12_pp0_stage1_iter4, "ap_block_state12_pp0_stage1_iter4");
    sc_trace(mVcdFile, ap_block_state14_pp0_stage1_iter5, "ap_block_state14_pp0_stage1_iter5");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_WREADY, "ap_sig_ioackin_gmem_WREADY");
    sc_trace(mVcdFile, ap_block_state14_io, "ap_block_state14_io");
    sc_trace(mVcdFile, ap_block_pp0_stage1_11001, "ap_block_pp0_stage1_11001");
    sc_trace(mVcdFile, tmp_5_reg_348, "tmp_5_reg_348");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state3, "ap_condition_pp0_exit_iter0_state3");
    sc_trace(mVcdFile, ap_block_pp0_stage1_subdone, "ap_block_pp0_stage1_subdone");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_phi_mux_i_op_assign_phi_fu_161_p4, "ap_phi_mux_i_op_assign_phi_fu_161_p4");
    sc_trace(mVcdFile, tmp_fu_178_p1, "tmp_fu_178_p1");
    sc_trace(mVcdFile, gamma_V2_sum_cast_fu_238_p1, "gamma_V2_sum_cast_fu_238_p1");
    sc_trace(mVcdFile, mlp_output_V4_sum_ca_fu_253_p1, "mlp_output_V4_sum_ca_fu_253_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_AWREADY, "ap_reg_ioackin_gmem_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_ARREADY, "ap_reg_ioackin_gmem_ARREADY");
    sc_trace(mVcdFile, ap_block_pp0_stage1_01001, "ap_block_pp0_stage1_01001");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_WREADY, "ap_reg_ioackin_gmem_WREADY");
    sc_trace(mVcdFile, output_V5_fu_168_p4, "output_V5_fu_168_p4");
    sc_trace(mVcdFile, tmp_2_cast_fu_229_p1, "tmp_2_cast_fu_229_p1");
    sc_trace(mVcdFile, gamma_V2_sum_fu_233_p2, "gamma_V2_sum_fu_233_p2");
    sc_trace(mVcdFile, mlp_output_V4_sum_fu_248_p2, "mlp_output_V4_sum_fu_248_p2");
    sc_trace(mVcdFile, r_V_fu_278_p2, "r_V_fu_278_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_569, "ap_condition_569");
    sc_trace(mVcdFile, ap_condition_403, "ap_condition_403");
    sc_trace(mVcdFile, ap_condition_414, "ap_condition_414");
#endif

    }
    mHdltvinHandle.open("gamma.hdltvin.dat");
    mHdltvoutHandle.open("gamma.hdltvout.dat");
}

gamma::~gamma() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete gamma_AXILiteS_s_axi_U;
    delete gamma_gmem_m_axi_U;
    delete gamma_mul_mul_16sbkb_U1;
}

void gamma::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void gamma::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_logic_0;
}

void gamma::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_1;
}

void gamma::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void gamma::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv3_0;
}

void gamma::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv2_0;
}

void gamma::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv4_0;
}

void gamma::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv2_3;
}

void gamma::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_sig_ioackin_gmem_AWREADY.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_sig_ioackin_gmem_AWREADY.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter5 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(exitcond_reg_317.read(), ap_const_lv1_0) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
              esl_seteq<1,1,1>(exitcond_reg_317.read(), ap_const_lv1_0) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)))) {
            ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                     esl_seteq<1,1,1>(exitcond_reg_317.read(), ap_const_lv1_0) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, gmem_ARREADY.read()) && 
                     esl_seteq<1,1,1>(ap_block_pp0_stage1_01001.read(), ap_const_boolean_0)) || 
                    (esl_seteq<1,1,1>(exitcond_reg_317.read(), ap_const_lv1_0) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, gmem_ARREADY.read()) && 
                     esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0)))) {
            ap_reg_ioackin_gmem_ARREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_gmem_AWREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, gmem_AWREADY.read())) {
                ap_reg_ioackin_gmem_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_WREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_condition_569.read(), ap_const_boolean_1)) {
            if (esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) {
                ap_reg_ioackin_gmem_WREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_block_pp0_stage1_01001.read(), ap_const_boolean_0) && 
                        esl_seteq<1,1,1>(ap_const_logic_1, gmem_WREADY.read()))) {
                ap_reg_ioackin_gmem_WREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(exitcond_reg_317.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_op_assign_reg_157 = i_reg_321.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_sig_ioackin_gmem_AWREADY.read(), ap_const_logic_1))) {
        i_op_assign_reg_157 = ap_const_lv8_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        dim_V_read_reg_285 = dim_V.read();
        gmem_addr_reg_291 =  (sc_lv<32>) (tmp_fu_178_p1.read());
        tmp_2_reg_297 = mlp_output_V.read().range(31, 1);
        tmp_3_reg_302 = gamma_V.read().range(31, 1);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_reg_317 = exitcond_fu_218_p2.read();
        exitcond_reg_317_pp0_iter1_reg = exitcond_reg_317.read();
        exitcond_reg_317_pp0_iter2_reg = exitcond_reg_317_pp0_iter1_reg.read();
        exitcond_reg_317_pp0_iter3_reg = exitcond_reg_317_pp0_iter2_reg.read();
        exitcond_reg_317_pp0_iter4_reg = exitcond_reg_317_pp0_iter3_reg.read();
        exitcond_reg_317_pp0_iter5_reg = exitcond_reg_317_pp0_iter4_reg.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_317_pp0_iter3_reg.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        gmem_addr_1_read_reg_338 = gmem_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_218_p2.read()))) {
        gmem_addr_1_reg_326 =  (sc_lv<32>) (gamma_V2_sum_cast_fu_238_p1.read());
        gmem_addr_2_reg_332 =  (sc_lv<32>) (mlp_output_V4_sum_ca_fu_253_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_317_pp0_iter4_reg.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        gmem_addr_2_read_reg_343 = gmem_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_reg_321 = i_fu_223_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_AWREADY.read(), ap_const_logic_1))) {
        tmp_3_cast7_reg_307 = tmp_3_cast7_fu_208_p1.read();
        tmp_4_cast_reg_312 = tmp_4_cast_fu_211_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_317_pp0_iter4_reg.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_5_reg_348 = r_V_fu_278_p2.read().range(23, 8);
    }
}

void gamma::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[2];
}

void gamma::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[3];
}

void gamma::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void gamma::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[8];
}

void gamma::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void gamma::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void gamma::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_317_pp0_iter3_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void gamma::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_317_pp0_iter3_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read())));
}

void gamma::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_317_pp0_iter3_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read())));
}

void gamma::thread_ap_block_pp0_stage1() {
    ap_block_pp0_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void gamma::thread_ap_block_pp0_stage1_01001() {
    ap_block_pp0_stage1_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_317_pp0_iter4_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void gamma::thread_ap_block_pp0_stage1_11001() {
    ap_block_pp0_stage1_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_317_pp0_iter4_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state14_io.read())));
}

void gamma::thread_ap_block_pp0_stage1_subdone() {
    ap_block_pp0_stage1_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_317_pp0_iter4_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state14_io.read())));
}

void gamma::thread_ap_block_state10_pp0_stage1_iter3() {
    ap_block_state10_pp0_stage1_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void gamma::thread_ap_block_state11_pp0_stage0_iter4() {
    ap_block_state11_pp0_stage0_iter4 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_317_pp0_iter3_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void gamma::thread_ap_block_state12_pp0_stage1_iter4() {
    ap_block_state12_pp0_stage1_iter4 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_317_pp0_iter4_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void gamma::thread_ap_block_state13_pp0_stage0_iter5() {
    ap_block_state13_pp0_stage0_iter5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void gamma::thread_ap_block_state14_io() {
    ap_block_state14_io = (esl_seteq<1,1,1>(exitcond_reg_317_pp0_iter5_reg.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_WREADY.read()));
}

void gamma::thread_ap_block_state14_pp0_stage1_iter5() {
    ap_block_state14_pp0_stage1_iter5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void gamma::thread_ap_block_state3_pp0_stage0_iter0() {
    ap_block_state3_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void gamma::thread_ap_block_state4_io() {
    ap_block_state4_io = (esl_seteq<1,1,1>(exitcond_reg_317.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_ARREADY.read()));
}

void gamma::thread_ap_block_state4_pp0_stage1_iter0() {
    ap_block_state4_pp0_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void gamma::thread_ap_block_state5_io() {
    ap_block_state5_io = (esl_seteq<1,1,1>(exitcond_reg_317.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_ARREADY.read()));
}

void gamma::thread_ap_block_state5_pp0_stage0_iter1() {
    ap_block_state5_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void gamma::thread_ap_block_state6_pp0_stage1_iter1() {
    ap_block_state6_pp0_stage1_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void gamma::thread_ap_block_state7_pp0_stage0_iter2() {
    ap_block_state7_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void gamma::thread_ap_block_state8_pp0_stage1_iter2() {
    ap_block_state8_pp0_stage1_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void gamma::thread_ap_block_state9_pp0_stage0_iter3() {
    ap_block_state9_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void gamma::thread_ap_condition_403() {
    ap_condition_403 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_01001.read(), ap_const_boolean_0));
}

void gamma::thread_ap_condition_414() {
    ap_condition_414 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0));
}

void gamma::thread_ap_condition_569() {
    ap_condition_569 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && esl_seteq<1,1,1>(exitcond_reg_317_pp0_iter5_reg.read(), ap_const_lv1_0));
}

void gamma::thread_ap_condition_pp0_exit_iter0_state3() {
    if (esl_seteq<1,1,1>(exitcond_fu_218_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_0;
    }
}

void gamma::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
         esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void gamma::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void gamma::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void gamma::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void gamma::thread_ap_phi_mux_i_op_assign_phi_fu_161_p4() {
    if ((esl_seteq<1,1,1>(exitcond_reg_317.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        ap_phi_mux_i_op_assign_phi_fu_161_p4 = i_reg_321.read();
    } else {
        ap_phi_mux_i_op_assign_phi_fu_161_p4 = i_op_assign_reg_157.read();
    }
}

void gamma::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
         esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void gamma::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void gamma::thread_ap_sig_ioackin_gmem_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) {
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY.read();
    } else {
        ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1;
    }
}

void gamma::thread_ap_sig_ioackin_gmem_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_AWREADY.read())) {
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY.read();
    } else {
        ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1;
    }
}

void gamma::thread_ap_sig_ioackin_gmem_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_WREADY.read())) {
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY.read();
    } else {
        ap_sig_ioackin_gmem_WREADY = ap_const_logic_1;
    }
}

void gamma::thread_exitcond_fu_218_p2() {
    exitcond_fu_218_p2 = (!ap_phi_mux_i_op_assign_phi_fu_161_p4.read().is_01() || !dim_V_read_reg_285.read().is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_i_op_assign_phi_fu_161_p4.read() == dim_V_read_reg_285.read());
}

void gamma::thread_gamma_V2_sum_cast_fu_238_p1() {
    gamma_V2_sum_cast_fu_238_p1 = esl_zext<64,32>(gamma_V2_sum_fu_233_p2.read());
}

void gamma::thread_gamma_V2_sum_fu_233_p2() {
    gamma_V2_sum_fu_233_p2 = (!tmp_2_cast_fu_229_p1.read().is_01() || !tmp_4_cast_reg_312.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_2_cast_fu_229_p1.read()) + sc_biguint<32>(tmp_4_cast_reg_312.read()));
}

void gamma::thread_gmem_ARADDR() {
    if ((esl_seteq<1,1,1>(exitcond_reg_317.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read()))) {
        if (esl_seteq<1,1,1>(ap_condition_414.read(), ap_const_boolean_1)) {
            gmem_ARADDR = gmem_addr_2_reg_332.read();
        } else if (esl_seteq<1,1,1>(ap_condition_403.read(), ap_const_boolean_1)) {
            gmem_ARADDR = gmem_addr_1_reg_326.read();
        } else {
            gmem_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        gmem_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void gamma::thread_gmem_ARVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(exitcond_reg_317.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_01001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) || 
         (esl_seteq<1,1,1>(exitcond_reg_317.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0)))) {
        gmem_ARVALID = ap_const_logic_1;
    } else {
        gmem_ARVALID = ap_const_logic_0;
    }
}

void gamma::thread_gmem_AWLEN() {
    gmem_AWLEN = esl_zext<32,8>(dim_V_read_reg_285.read());
}

void gamma::thread_gmem_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_AWREADY.read()))) {
        gmem_AWVALID = ap_const_logic_1;
    } else {
        gmem_AWVALID = ap_const_logic_0;
    }
}

void gamma::thread_gmem_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
         esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
        gmem_BREADY = ap_const_logic_1;
    } else {
        gmem_BREADY = ap_const_logic_0;
    }
}

void gamma::thread_gmem_RREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_317_pp0_iter3_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_317_pp0_iter4_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)))) {
        gmem_RREADY = ap_const_logic_1;
    } else {
        gmem_RREADY = ap_const_logic_0;
    }
}

void gamma::thread_gmem_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_317_pp0_iter5_reg.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_01001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_WREADY.read()))) {
        gmem_WVALID = ap_const_logic_1;
    } else {
        gmem_WVALID = ap_const_logic_0;
    }
}

void gamma::thread_gmem_blk_n_AR() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(exitcond_reg_317.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(exitcond_reg_317.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
        gmem_blk_n_AR = m_axi_gmem_ARREADY.read();
    } else {
        gmem_blk_n_AR = ap_const_logic_1;
    }
}

void gamma::thread_gmem_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        gmem_blk_n_AW = m_axi_gmem_AWREADY.read();
    } else {
        gmem_blk_n_AW = ap_const_logic_1;
    }
}

void gamma::thread_gmem_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        gmem_blk_n_B = m_axi_gmem_BVALID.read();
    } else {
        gmem_blk_n_B = ap_const_logic_1;
    }
}

void gamma::thread_gmem_blk_n_R() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_317_pp0_iter3_reg.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_317_pp0_iter4_reg.read())))) {
        gmem_blk_n_R = m_axi_gmem_RVALID.read();
    } else {
        gmem_blk_n_R = ap_const_logic_1;
    }
}

void gamma::thread_gmem_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_reg_317_pp0_iter5_reg.read(), ap_const_lv1_0))) {
        gmem_blk_n_W = m_axi_gmem_WREADY.read();
    } else {
        gmem_blk_n_W = ap_const_logic_1;
    }
}

void gamma::thread_i_fu_223_p2() {
    i_fu_223_p2 = (!ap_phi_mux_i_op_assign_phi_fu_161_p4.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(ap_phi_mux_i_op_assign_phi_fu_161_p4.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void gamma::thread_mlp_output_V4_sum_ca_fu_253_p1() {
    mlp_output_V4_sum_ca_fu_253_p1 = esl_zext<64,32>(mlp_output_V4_sum_fu_248_p2.read());
}

void gamma::thread_mlp_output_V4_sum_fu_248_p2() {
    mlp_output_V4_sum_fu_248_p2 = (!tmp_2_cast_fu_229_p1.read().is_01() || !tmp_3_cast7_reg_307.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_2_cast_fu_229_p1.read()) + sc_biguint<32>(tmp_3_cast7_reg_307.read()));
}

void gamma::thread_output_V5_fu_168_p4() {
    output_V5_fu_168_p4 = output_V.read().range(31, 1);
}

void gamma::thread_tmp_2_cast_fu_229_p1() {
    tmp_2_cast_fu_229_p1 = esl_zext<32,8>(ap_phi_mux_i_op_assign_phi_fu_161_p4.read());
}

void gamma::thread_tmp_3_cast7_fu_208_p1() {
    tmp_3_cast7_fu_208_p1 = esl_zext<32,31>(tmp_2_reg_297.read());
}

void gamma::thread_tmp_4_cast_fu_211_p1() {
    tmp_4_cast_fu_211_p1 = esl_zext<32,31>(tmp_3_reg_302.read());
}

void gamma::thread_tmp_fu_178_p1() {
    tmp_fu_178_p1 = esl_zext<64,31>(output_V5_fu_168_p4.read());
}

void gamma::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_fu_218_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_fu_218_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter4.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter4.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state19;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<9>) ("XXXXXXXXX");
            break;
    }
}

void gamma::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_gmem_AWVALID\" :  \"" << m_axi_gmem_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_AWREADY\" :  \"" << m_axi_gmem_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWADDR\" :  \"" << m_axi_gmem_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWID\" :  \"" << m_axi_gmem_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLEN\" :  \"" << m_axi_gmem_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWSIZE\" :  \"" << m_axi_gmem_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWBURST\" :  \"" << m_axi_gmem_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLOCK\" :  \"" << m_axi_gmem_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWCACHE\" :  \"" << m_axi_gmem_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWPROT\" :  \"" << m_axi_gmem_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWQOS\" :  \"" << m_axi_gmem_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWREGION\" :  \"" << m_axi_gmem_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWUSER\" :  \"" << m_axi_gmem_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WVALID\" :  \"" << m_axi_gmem_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_WREADY\" :  \"" << m_axi_gmem_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WDATA\" :  \"" << m_axi_gmem_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WSTRB\" :  \"" << m_axi_gmem_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WLAST\" :  \"" << m_axi_gmem_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WID\" :  \"" << m_axi_gmem_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WUSER\" :  \"" << m_axi_gmem_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARVALID\" :  \"" << m_axi_gmem_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_ARREADY\" :  \"" << m_axi_gmem_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARADDR\" :  \"" << m_axi_gmem_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARID\" :  \"" << m_axi_gmem_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLEN\" :  \"" << m_axi_gmem_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARSIZE\" :  \"" << m_axi_gmem_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARBURST\" :  \"" << m_axi_gmem_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLOCK\" :  \"" << m_axi_gmem_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARCACHE\" :  \"" << m_axi_gmem_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARPROT\" :  \"" << m_axi_gmem_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARQOS\" :  \"" << m_axi_gmem_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARREGION\" :  \"" << m_axi_gmem_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARUSER\" :  \"" << m_axi_gmem_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RVALID\" :  \"" << m_axi_gmem_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_RREADY\" :  \"" << m_axi_gmem_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RDATA\" :  \"" << m_axi_gmem_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RLAST\" :  \"" << m_axi_gmem_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RID\" :  \"" << m_axi_gmem_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RUSER\" :  \"" << m_axi_gmem_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RRESP\" :  \"" << m_axi_gmem_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BVALID\" :  \"" << m_axi_gmem_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_BREADY\" :  \"" << m_axi_gmem_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BRESP\" :  \"" << m_axi_gmem_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BID\" :  \"" << m_axi_gmem_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BUSER\" :  \"" << m_axi_gmem_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

