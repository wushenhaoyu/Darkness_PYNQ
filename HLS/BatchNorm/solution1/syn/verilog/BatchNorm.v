// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="BatchNorm,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=2,HLS_SYN_FF=2422,HLS_SYN_LUT=3066,HLS_VERSION=2018_3}" *)

module BatchNorm (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 57'd1;
parameter    ap_ST_fsm_state2 = 57'd2;
parameter    ap_ST_fsm_state3 = 57'd4;
parameter    ap_ST_fsm_state4 = 57'd8;
parameter    ap_ST_fsm_state5 = 57'd16;
parameter    ap_ST_fsm_state6 = 57'd32;
parameter    ap_ST_fsm_state7 = 57'd64;
parameter    ap_ST_fsm_state8 = 57'd128;
parameter    ap_ST_fsm_state9 = 57'd256;
parameter    ap_ST_fsm_state10 = 57'd512;
parameter    ap_ST_fsm_state11 = 57'd1024;
parameter    ap_ST_fsm_state12 = 57'd2048;
parameter    ap_ST_fsm_state13 = 57'd4096;
parameter    ap_ST_fsm_state14 = 57'd8192;
parameter    ap_ST_fsm_state15 = 57'd16384;
parameter    ap_ST_fsm_state16 = 57'd32768;
parameter    ap_ST_fsm_state17 = 57'd65536;
parameter    ap_ST_fsm_state18 = 57'd131072;
parameter    ap_ST_fsm_state19 = 57'd262144;
parameter    ap_ST_fsm_state20 = 57'd524288;
parameter    ap_ST_fsm_state21 = 57'd1048576;
parameter    ap_ST_fsm_state22 = 57'd2097152;
parameter    ap_ST_fsm_state23 = 57'd4194304;
parameter    ap_ST_fsm_state24 = 57'd8388608;
parameter    ap_ST_fsm_state25 = 57'd16777216;
parameter    ap_ST_fsm_state26 = 57'd33554432;
parameter    ap_ST_fsm_state27 = 57'd67108864;
parameter    ap_ST_fsm_state28 = 57'd134217728;
parameter    ap_ST_fsm_state29 = 57'd268435456;
parameter    ap_ST_fsm_state30 = 57'd536870912;
parameter    ap_ST_fsm_state31 = 57'd1073741824;
parameter    ap_ST_fsm_state32 = 57'd2147483648;
parameter    ap_ST_fsm_state33 = 57'd4294967296;
parameter    ap_ST_fsm_state34 = 57'd8589934592;
parameter    ap_ST_fsm_state35 = 57'd17179869184;
parameter    ap_ST_fsm_state36 = 57'd34359738368;
parameter    ap_ST_fsm_state37 = 57'd68719476736;
parameter    ap_ST_fsm_state38 = 57'd137438953472;
parameter    ap_ST_fsm_state39 = 57'd274877906944;
parameter    ap_ST_fsm_state40 = 57'd549755813888;
parameter    ap_ST_fsm_state41 = 57'd1099511627776;
parameter    ap_ST_fsm_state42 = 57'd2199023255552;
parameter    ap_ST_fsm_state43 = 57'd4398046511104;
parameter    ap_ST_fsm_state44 = 57'd8796093022208;
parameter    ap_ST_fsm_state45 = 57'd17592186044416;
parameter    ap_ST_fsm_state46 = 57'd35184372088832;
parameter    ap_ST_fsm_state47 = 57'd70368744177664;
parameter    ap_ST_fsm_state48 = 57'd140737488355328;
parameter    ap_ST_fsm_state49 = 57'd281474976710656;
parameter    ap_ST_fsm_state50 = 57'd562949953421312;
parameter    ap_ST_fsm_state51 = 57'd1125899906842624;
parameter    ap_ST_fsm_state52 = 57'd2251799813685248;
parameter    ap_ST_fsm_state53 = 57'd4503599627370496;
parameter    ap_ST_fsm_state54 = 57'd9007199254740992;
parameter    ap_ST_fsm_state55 = 57'd18014398509481984;
parameter    ap_ST_fsm_state56 = 57'd36028797018963968;
parameter    ap_ST_fsm_state57 = 57'd72057594037927936;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [56:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [7:0] num_features_V;
wire   [15:0] height_V;
wire   [15:0] width_V;
wire   [31:0] in_data_V;
wire   [31:0] out_data_V;
wire   [31:0] gamma_V;
wire   [31:0] beta_V;
wire   [31:0] running_mean_V;
wire   [31:0] running_var_V;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state7;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state51;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state4;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state53;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state6;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [15:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [15:0] width_V_read_reg_660;
reg   [15:0] height_V_read_reg_665;
reg   [7:0] num_features_V_read_reg_670;
wire   [31:0] tmp_cast_fu_328_p1;
reg   [31:0] tmp_cast_reg_675;
wire   [31:0] tmp_34_cast_fu_342_p1;
reg   [31:0] tmp_34_cast_reg_680;
wire   [31:0] tmp_35_cast_fu_356_p1;
reg   [31:0] tmp_35_cast_reg_685;
wire   [31:0] tmp_36_cast_fu_370_p1;
reg   [31:0] tmp_36_cast_reg_690;
wire   [40:0] tmp_37_cast_fu_384_p1;
reg   [40:0] tmp_37_cast_reg_695;
wire   [40:0] tmp_38_cast_fu_398_p1;
reg   [40:0] tmp_38_cast_reg_700;
wire   [23:0] rhs_V_cast_fu_402_p1;
reg   [23:0] rhs_V_cast_reg_705;
wire   [39:0] rhs_V_1_cast_fu_406_p1;
reg   [39:0] rhs_V_1_cast_reg_710;
wire   [31:0] rhs_V_2_cast_fu_410_p1;
reg   [31:0] rhs_V_2_cast_reg_715;
wire   [23:0] next_mul1_fu_414_p2;
reg   [23:0] next_mul1_reg_721;
wire    ap_CS_fsm_state2;
wire   [7:0] c_fu_424_p2;
reg   [7:0] c_reg_729;
reg   [31:0] gmem_addr_reg_734;
wire   [0:0] exitcond2_fu_419_p2;
reg   [31:0] gmem_addr_1_reg_740;
reg   [31:0] gmem_addr_2_reg_746;
reg   [31:0] gmem_addr_3_reg_752;
wire   [39:0] ret_V_1_fu_646_p2;
reg   [39:0] ret_V_1_reg_758;
wire   [31:0] next_mul_fu_498_p2;
reg   [31:0] next_mul_reg_764;
wire    ap_CS_fsm_state3;
wire   [15:0] h_fu_508_p2;
reg   [15:0] h_reg_772;
reg   [31:0] gmem_addr_4_reg_777;
wire   [0:0] exitcond1_fu_503_p2;
wire   [15:0] w_fu_551_p2;
reg   [15:0] w_reg_786;
wire    ap_CS_fsm_state5;
reg   [31:0] gmem_addr_5_reg_791;
wire   [0:0] exitcond_fu_546_p2;
reg  signed [15:0] x_V_reg_797;
reg    ap_sig_ioackin_gmem_ARREADY;
reg  signed [15:0] p_Val2_5_reg_802;
wire   [16:0] ret_V_5_fu_597_p2;
reg   [16:0] ret_V_5_reg_807;
reg   [15:0] p_Val2_7_reg_812;
wire    ap_CS_fsm_state23;
reg  signed [15:0] gmem_addr_2_read_reg_827;
wire   [15:0] grp_fu_614_p2;
reg   [15:0] tmp_27_reg_832;
reg   [15:0] p_Val2_9_reg_837;
reg   [15:0] tmp_25_reg_842;
wire    ap_CS_fsm_state52;
wire   [12:0] grp_sqrt_fixed_17_9_s_fu_313_ap_return;
reg   [7:0] i_op_assign_reg_257;
reg   [23:0] ret_V_reg_268;
reg   [15:0] i_op_assign_1_reg_279;
reg   [31:0] ret_V_2_reg_290;
reg   [15:0] i_op_assign_2_reg_302;
reg    ap_sig_ioackin_gmem_WREADY;
reg    ap_sig_ioackin_gmem_AWREADY;
wire    ap_CS_fsm_state16;
wire   [63:0] running_mean_V10_sum_1_fu_439_p1;
wire   [63:0] running_var_V12_sum_s_fu_454_p1;
wire   [63:0] gamma_V6_sum_cast_fu_469_p1;
wire   [63:0] beta_V8_sum_cast_fu_484_p1;
wire   [63:0] out_data_V4_sum_cast_fu_532_p1;
wire   [63:0] in_data_V2_sum1_cast_fu_581_p1;
reg    ap_reg_ioackin_gmem_AWREADY;
reg    ap_reg_ioackin_gmem_ARREADY;
reg    ap_reg_ioackin_gmem_WREADY;
wire   [30:0] tmp_fu_318_p4;
wire   [30:0] tmp_43_fu_332_p4;
wire   [30:0] tmp_44_fu_346_p4;
wire   [30:0] tmp_45_fu_360_p4;
wire   [30:0] tmp_46_fu_374_p4;
wire   [30:0] tmp_47_fu_388_p4;
wire   [31:0] tmp_cast_165_fu_430_p1;
wire   [31:0] running_mean_V10_sum_fu_434_p2;
wire   [31:0] running_var_V12_sum_fu_449_p2;
wire   [31:0] gamma_V6_sum_fu_464_p2;
wire   [31:0] beta_V8_sum_fu_479_p2;
wire   [39:0] tmp_24_fu_514_p1;
(* use_dsp48 = "no" *) wire   [39:0] tmp_26_fu_518_p2;
wire   [40:0] tmp_28_cast_fu_523_p1;
wire   [40:0] out_data_V4_sum_fu_527_p2;
wire   [31:0] i_op_assign_2_cast3_fu_542_p1;
wire   [31:0] tmp1_fu_557_p2;
wire   [39:0] tmp1_cast_fu_563_p1;
(* use_dsp48 = "no" *) wire   [39:0] tmp_19_fu_567_p2;
wire   [40:0] tmp_19_cast_cast_fu_572_p1;
wire   [40:0] in_data_V2_sum1_fu_576_p2;
wire  signed [16:0] lhs_V_fu_591_p1;
wire  signed [16:0] rhs_V_fu_594_p1;
wire   [24:0] grp_fu_614_p0;
wire   [13:0] grp_fu_614_p1;
wire  signed [15:0] normalized_V_fu_620_p1;
wire  signed [23:0] grp_fu_651_p3;
wire   [15:0] ret_V_1_fu_646_p0;
wire   [23:0] ret_V_1_fu_646_p1;
wire   [23:0] grp_fu_651_p2;
reg    grp_fu_614_ap_start;
wire    grp_fu_614_ap_done;
reg    grp_fu_614_ce;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state49;
reg   [56:0] ap_NS_fsm;
wire   [24:0] grp_fu_614_p10;
wire   [39:0] ret_V_1_fu_646_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 57'd1;
#0 ap_reg_ioackin_gmem_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem_WREADY = 1'b0;
end

BatchNorm_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
BatchNorm_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .num_features_V(num_features_V),
    .height_V(height_V),
    .width_V(width_V),
    .in_data_V(in_data_V),
    .out_data_V(out_data_V),
    .gamma_V(gamma_V),
    .beta_V(beta_V),
    .running_mean_V(running_mean_V),
    .running_var_V(running_var_V)
);

BatchNorm_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
BatchNorm_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_4_reg_777),
    .I_AWID(1'd0),
    .I_AWLEN(rhs_V_2_cast_reg_715),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(tmp_25_reg_842),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

sqrt_fixed_17_9_s grp_sqrt_fixed_17_9_s_fu_313(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .x_V(p_Val2_7_reg_812),
    .ap_return(grp_sqrt_fixed_17_9_s_fu_313_ap_return)
);

BatchNorm_sdiv_25bkb #(
    .ID( 1 ),
    .NUM_STAGE( 29 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 16 ))
BatchNorm_sdiv_25bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_614_ap_start),
    .done(grp_fu_614_ap_done),
    .din0(grp_fu_614_p0),
    .din1(grp_fu_614_p1),
    .ce(grp_fu_614_ce),
    .dout(grp_fu_614_p2)
);

BatchNorm_mul_mulcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 40 ))
BatchNorm_mul_mulcud_U3(
    .din0(ret_V_1_fu_646_p0),
    .din1(ret_V_1_fu_646_p1),
    .dout(ret_V_1_fu_646_p2)
);

BatchNorm_mac_muldEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
BatchNorm_mac_muldEe_U4(
    .din0(gmem_addr_2_read_reg_827),
    .din1(normalized_V_fu_620_p1),
    .din2(grp_fu_651_p2),
    .dout(grp_fu_651_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_ARREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | (~((ap_sig_ioackin_gmem_ARREADY == 1'b0) | (gmem_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state13)) | ((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b0;
        end else if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((gmem_RVALID == 1'b1) & (gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            if ((ap_sig_ioackin_gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b0;
            end else if ((gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state53)) begin
            if ((ap_sig_ioackin_gmem_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b0;
            end else if ((gmem_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state57))) begin
        i_op_assign_1_reg_279 <= h_reg_772;
    end else if (((exitcond2_fu_419_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_op_assign_1_reg_279 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_op_assign_2_reg_302 <= 16'd0;
    end else if (((ap_sig_ioackin_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state53))) begin
        i_op_assign_2_reg_302 <= w_reg_786;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_503_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_op_assign_reg_257 <= c_reg_729;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_op_assign_reg_257 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state57))) begin
        ret_V_2_reg_290 <= next_mul_reg_764;
    end else if (((exitcond2_fu_419_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ret_V_2_reg_290 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_503_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ret_V_reg_268 <= next_mul1_reg_721;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ret_V_reg_268 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_reg_729 <= c_fu_424_p2;
        next_mul1_reg_721 <= next_mul1_fu_414_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_419_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_addr_1_reg_740 <= running_var_V12_sum_s_fu_454_p1;
        gmem_addr_2_reg_746 <= gamma_V6_sum_cast_fu_469_p1;
        gmem_addr_3_reg_752 <= beta_V8_sum_cast_fu_484_p1;
        gmem_addr_reg_734 <= running_mean_V10_sum_1_fu_439_p1;
        ret_V_1_reg_758 <= ret_V_1_fu_646_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state50))) begin
        gmem_addr_2_read_reg_827 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_503_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        gmem_addr_4_reg_777 <= out_data_V4_sum_cast_fu_532_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_546_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        gmem_addr_5_reg_791 <= in_data_V2_sum1_cast_fu_581_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_reg_772 <= h_fu_508_p2;
        next_mul_reg_764 <= next_mul_fu_498_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        height_V_read_reg_665 <= height_V;
        num_features_V_read_reg_670 <= num_features_V;
        rhs_V_1_cast_reg_710[15 : 0] <= rhs_V_1_cast_fu_406_p1[15 : 0];
        rhs_V_2_cast_reg_715[15 : 0] <= rhs_V_2_cast_fu_410_p1[15 : 0];
        rhs_V_cast_reg_705[15 : 0] <= rhs_V_cast_fu_402_p1[15 : 0];
        tmp_34_cast_reg_680[30 : 0] <= tmp_34_cast_fu_342_p1[30 : 0];
        tmp_35_cast_reg_685[30 : 0] <= tmp_35_cast_fu_356_p1[30 : 0];
        tmp_36_cast_reg_690[30 : 0] <= tmp_36_cast_fu_370_p1[30 : 0];
        tmp_37_cast_reg_695[30 : 0] <= tmp_37_cast_fu_384_p1[30 : 0];
        tmp_38_cast_reg_700[30 : 0] <= tmp_38_cast_fu_398_p1[30 : 0];
        tmp_cast_reg_675[30 : 0] <= tmp_cast_fu_328_p1[30 : 0];
        width_V_read_reg_660 <= width_V;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        p_Val2_5_reg_802 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        p_Val2_7_reg_812 <= gmem_RDATA;
        ret_V_5_reg_807 <= ret_V_5_fu_597_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state51))) begin
        p_Val2_9_reg_837 <= gmem_RDATA;
        tmp_27_reg_832 <= grp_fu_614_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        tmp_25_reg_842 <= {{grp_fu_651_p3[23:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        w_reg_786 <= w_fu_551_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_sig_ioackin_gmem_ARREADY == 1'b0) | (gmem_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state13))) begin
        x_V_reg_797 <= gmem_RDATA;
    end
end

always @ (*) begin
    if (((exitcond2_fu_419_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_419_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_AWREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_WREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY;
    end else begin
        ap_sig_ioackin_gmem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
            gmem_ARADDR = gmem_addr_3_reg_752;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            gmem_ARADDR = gmem_addr_2_reg_746;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            gmem_ARADDR = gmem_addr_1_reg_740;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            gmem_ARADDR = gmem_addr_reg_734;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            gmem_ARADDR = gmem_addr_5_reg_791;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state6)) | ((gmem_RVALID == 1'b1) & (ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state13)) | ((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state12)) | ((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state8)) | ((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state7)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state57))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state51)) | (~((ap_sig_ioackin_gmem_ARREADY == 1'b0) | (gmem_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state13)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state50)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state53))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_614_ap_start = 1'b1;
    end else begin
        grp_fu_614_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50))) begin
        grp_fu_614_ce = 1'b1;
    end else begin
        grp_fu_614_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_419_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond1_fu_503_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((ap_sig_ioackin_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond_fu_546_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if ((~((ap_sig_ioackin_gmem_ARREADY == 1'b0) | (gmem_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            if (((ap_sig_ioackin_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state57))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign beta_V8_sum_cast_fu_484_p1 = beta_V8_sum_fu_479_p2;

assign beta_V8_sum_fu_479_p2 = (tmp_cast_165_fu_430_p1 + tmp_35_cast_reg_685);

assign c_fu_424_p2 = (i_op_assign_reg_257 + 8'd1);

assign exitcond1_fu_503_p2 = ((i_op_assign_1_reg_279 == height_V_read_reg_665) ? 1'b1 : 1'b0);

assign exitcond2_fu_419_p2 = ((i_op_assign_reg_257 == num_features_V_read_reg_670) ? 1'b1 : 1'b0);

assign exitcond_fu_546_p2 = ((i_op_assign_2_reg_302 == width_V_read_reg_660) ? 1'b1 : 1'b0);

assign gamma_V6_sum_cast_fu_469_p1 = gamma_V6_sum_fu_464_p2;

assign gamma_V6_sum_fu_464_p2 = (tmp_cast_165_fu_430_p1 + tmp_36_cast_reg_690);

assign grp_fu_614_p0 = {{ret_V_5_reg_807}, {8'd0}};

assign grp_fu_614_p1 = grp_fu_614_p10;

assign grp_fu_614_p10 = grp_sqrt_fixed_17_9_s_fu_313_ap_return;

assign grp_fu_651_p2 = {{p_Val2_9_reg_837}, {8'd0}};

assign h_fu_508_p2 = (i_op_assign_1_reg_279 + 16'd1);

assign i_op_assign_2_cast3_fu_542_p1 = i_op_assign_2_reg_302;

assign in_data_V2_sum1_cast_fu_581_p1 = in_data_V2_sum1_fu_576_p2;

assign in_data_V2_sum1_fu_576_p2 = (tmp_38_cast_reg_700 + tmp_19_cast_cast_fu_572_p1);

assign lhs_V_fu_591_p1 = x_V_reg_797;

assign next_mul1_fu_414_p2 = (ret_V_reg_268 + rhs_V_cast_reg_705);

assign next_mul_fu_498_p2 = (ret_V_2_reg_290 + rhs_V_2_cast_reg_715);

assign normalized_V_fu_620_p1 = tmp_27_reg_832[15:0];

assign out_data_V4_sum_cast_fu_532_p1 = out_data_V4_sum_fu_527_p2;

assign out_data_V4_sum_fu_527_p2 = (tmp_28_cast_fu_523_p1 + tmp_37_cast_reg_695);

assign ret_V_1_fu_646_p0 = rhs_V_1_cast_reg_710;

assign ret_V_1_fu_646_p1 = ret_V_1_fu_646_p10;

assign ret_V_1_fu_646_p10 = ret_V_reg_268;

assign ret_V_5_fu_597_p2 = ($signed(lhs_V_fu_591_p1) - $signed(rhs_V_fu_594_p1));

assign rhs_V_1_cast_fu_406_p1 = width_V;

assign rhs_V_2_cast_fu_410_p1 = width_V;

assign rhs_V_cast_fu_402_p1 = height_V;

assign rhs_V_fu_594_p1 = p_Val2_5_reg_802;

assign running_mean_V10_sum_1_fu_439_p1 = running_mean_V10_sum_fu_434_p2;

assign running_mean_V10_sum_fu_434_p2 = (tmp_cast_165_fu_430_p1 + tmp_34_cast_reg_680);

assign running_var_V12_sum_fu_449_p2 = (tmp_cast_165_fu_430_p1 + tmp_cast_reg_675);

assign running_var_V12_sum_s_fu_454_p1 = running_var_V12_sum_fu_449_p2;

assign tmp1_cast_fu_563_p1 = tmp1_fu_557_p2;

assign tmp1_fu_557_p2 = (i_op_assign_2_cast3_fu_542_p1 + ret_V_2_reg_290);

assign tmp_19_cast_cast_fu_572_p1 = tmp_19_fu_567_p2;

assign tmp_19_fu_567_p2 = (ret_V_1_reg_758 + tmp1_cast_fu_563_p1);

assign tmp_24_fu_514_p1 = ret_V_2_reg_290;

assign tmp_26_fu_518_p2 = (ret_V_1_reg_758 + tmp_24_fu_514_p1);

assign tmp_28_cast_fu_523_p1 = tmp_26_fu_518_p2;

assign tmp_34_cast_fu_342_p1 = tmp_43_fu_332_p4;

assign tmp_35_cast_fu_356_p1 = tmp_44_fu_346_p4;

assign tmp_36_cast_fu_370_p1 = tmp_45_fu_360_p4;

assign tmp_37_cast_fu_384_p1 = tmp_46_fu_374_p4;

assign tmp_38_cast_fu_398_p1 = tmp_47_fu_388_p4;

assign tmp_43_fu_332_p4 = {{running_mean_V[31:1]}};

assign tmp_44_fu_346_p4 = {{beta_V[31:1]}};

assign tmp_45_fu_360_p4 = {{gamma_V[31:1]}};

assign tmp_46_fu_374_p4 = {{out_data_V[31:1]}};

assign tmp_47_fu_388_p4 = {{in_data_V[31:1]}};

assign tmp_cast_165_fu_430_p1 = i_op_assign_reg_257;

assign tmp_cast_fu_328_p1 = tmp_fu_318_p4;

assign tmp_fu_318_p4 = {{running_var_V[31:1]}};

assign w_fu_551_p2 = (i_op_assign_2_reg_302 + 16'd1);

always @ (posedge ap_clk) begin
    tmp_cast_reg_675[31] <= 1'b0;
    tmp_34_cast_reg_680[31] <= 1'b0;
    tmp_35_cast_reg_685[31] <= 1'b0;
    tmp_36_cast_reg_690[31] <= 1'b0;
    tmp_37_cast_reg_695[40:31] <= 10'b0000000000;
    tmp_38_cast_reg_700[40:31] <= 10'b0000000000;
    rhs_V_cast_reg_705[23:16] <= 8'b00000000;
    rhs_V_1_cast_reg_710[39:16] <= 24'b000000000000000000000000;
    rhs_V_2_cast_reg_715[31:16] <= 16'b0000000000000000;
end

endmodule //BatchNorm
