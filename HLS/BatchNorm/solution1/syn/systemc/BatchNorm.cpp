// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "BatchNorm.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic BatchNorm::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic BatchNorm::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<57> BatchNorm::ap_ST_fsm_state1 = "1";
const sc_lv<57> BatchNorm::ap_ST_fsm_state2 = "10";
const sc_lv<57> BatchNorm::ap_ST_fsm_state3 = "100";
const sc_lv<57> BatchNorm::ap_ST_fsm_state4 = "1000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state5 = "10000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state6 = "100000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state7 = "1000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state8 = "10000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state9 = "100000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state10 = "1000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state11 = "10000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state12 = "100000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state48 = "100000000000000000000000000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state49 = "1000000000000000000000000000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state50 = "10000000000000000000000000000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state51 = "100000000000000000000000000000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state52 = "1000000000000000000000000000000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state53 = "10000000000000000000000000000000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state54 = "100000000000000000000000000000000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state55 = "1000000000000000000000000000000000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state56 = "10000000000000000000000000000000000000000000000000000000";
const sc_lv<57> BatchNorm::ap_ST_fsm_state57 = "100000000000000000000000000000000000000000000000000000000";
const sc_lv<32> BatchNorm::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> BatchNorm::ap_const_lv32_6 = "110";
const sc_lv<32> BatchNorm::ap_const_lv32_D = "1101";
const sc_lv<32> BatchNorm::ap_const_lv32_7 = "111";
const sc_lv<32> BatchNorm::ap_const_lv32_E = "1110";
const sc_lv<32> BatchNorm::ap_const_lv32_B = "1011";
const sc_lv<32> BatchNorm::ap_const_lv32_31 = "110001";
const sc_lv<32> BatchNorm::ap_const_lv32_C = "1100";
const sc_lv<32> BatchNorm::ap_const_lv32_32 = "110010";
const sc_lv<32> BatchNorm::ap_const_lv32_3 = "11";
const sc_lv<32> BatchNorm::ap_const_lv32_34 = "110100";
const sc_lv<32> BatchNorm::ap_const_lv32_38 = "111000";
const sc_lv<32> BatchNorm::ap_const_lv32_5 = "101";
const int BatchNorm::C_S_AXI_DATA_WIDTH = "100000";
const int BatchNorm::C_M_AXI_GMEM_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int BatchNorm::C_M_AXI_GMEM_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int BatchNorm::C_M_AXI_GMEM_CACHE_VALUE = "11";
const int BatchNorm::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> BatchNorm::ap_const_lv32_1 = "1";
const sc_lv<1> BatchNorm::ap_const_lv1_0 = "0";
const sc_lv<32> BatchNorm::ap_const_lv32_2 = "10";
const sc_lv<32> BatchNorm::ap_const_lv32_4 = "100";
const sc_lv<32> BatchNorm::ap_const_lv32_16 = "10110";
const sc_lv<32> BatchNorm::ap_const_lv32_33 = "110011";
const sc_lv<8> BatchNorm::ap_const_lv8_0 = "00000000";
const sc_lv<1> BatchNorm::ap_const_lv1_1 = "1";
const sc_lv<24> BatchNorm::ap_const_lv24_0 = "000000000000000000000000";
const sc_lv<16> BatchNorm::ap_const_lv16_0 = "0000000000000000";
const sc_lv<32> BatchNorm::ap_const_lv32_F = "1111";
const sc_lv<3> BatchNorm::ap_const_lv3_0 = "000";
const sc_lv<2> BatchNorm::ap_const_lv2_0 = "00";
const sc_lv<4> BatchNorm::ap_const_lv4_0 = "0000";
const sc_lv<2> BatchNorm::ap_const_lv2_3 = "11";
const sc_lv<32> BatchNorm::ap_const_lv32_1F = "11111";
const sc_lv<8> BatchNorm::ap_const_lv8_1 = "1";
const sc_lv<16> BatchNorm::ap_const_lv16_1 = "1";
const sc_lv<32> BatchNorm::ap_const_lv32_8 = "1000";
const sc_lv<32> BatchNorm::ap_const_lv32_17 = "10111";
const sc_lv<32> BatchNorm::ap_const_lv32_18 = "11000";
const sc_lv<32> BatchNorm::ap_const_lv32_19 = "11001";
const sc_lv<32> BatchNorm::ap_const_lv32_1A = "11010";
const sc_lv<32> BatchNorm::ap_const_lv32_1B = "11011";
const sc_lv<32> BatchNorm::ap_const_lv32_1C = "11100";
const sc_lv<32> BatchNorm::ap_const_lv32_1D = "11101";
const sc_lv<32> BatchNorm::ap_const_lv32_1E = "11110";
const sc_lv<32> BatchNorm::ap_const_lv32_20 = "100000";
const sc_lv<32> BatchNorm::ap_const_lv32_21 = "100001";
const sc_lv<32> BatchNorm::ap_const_lv32_22 = "100010";
const sc_lv<32> BatchNorm::ap_const_lv32_23 = "100011";
const sc_lv<32> BatchNorm::ap_const_lv32_24 = "100100";
const sc_lv<32> BatchNorm::ap_const_lv32_25 = "100101";
const sc_lv<32> BatchNorm::ap_const_lv32_26 = "100110";
const sc_lv<32> BatchNorm::ap_const_lv32_27 = "100111";
const sc_lv<32> BatchNorm::ap_const_lv32_28 = "101000";
const sc_lv<32> BatchNorm::ap_const_lv32_29 = "101001";
const sc_lv<32> BatchNorm::ap_const_lv32_2A = "101010";
const sc_lv<32> BatchNorm::ap_const_lv32_2B = "101011";
const sc_lv<32> BatchNorm::ap_const_lv32_2C = "101100";
const sc_lv<32> BatchNorm::ap_const_lv32_2D = "101101";
const sc_lv<32> BatchNorm::ap_const_lv32_2E = "101110";
const sc_lv<32> BatchNorm::ap_const_lv32_2F = "101111";
const sc_lv<32> BatchNorm::ap_const_lv32_30 = "110000";
const bool BatchNorm::ap_const_boolean_1 = true;

BatchNorm::BatchNorm(sc_module_name name) : sc_module(name), mVcdFile(0) {
    BatchNorm_AXILiteS_s_axi_U = new BatchNorm_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("BatchNorm_AXILiteS_s_axi_U");
    BatchNorm_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    BatchNorm_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    BatchNorm_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    BatchNorm_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    BatchNorm_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    BatchNorm_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    BatchNorm_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    BatchNorm_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    BatchNorm_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    BatchNorm_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    BatchNorm_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    BatchNorm_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    BatchNorm_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    BatchNorm_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    BatchNorm_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    BatchNorm_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    BatchNorm_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    BatchNorm_AXILiteS_s_axi_U->ACLK(ap_clk);
    BatchNorm_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    BatchNorm_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    BatchNorm_AXILiteS_s_axi_U->ap_start(ap_start);
    BatchNorm_AXILiteS_s_axi_U->interrupt(interrupt);
    BatchNorm_AXILiteS_s_axi_U->ap_ready(ap_ready);
    BatchNorm_AXILiteS_s_axi_U->ap_done(ap_done);
    BatchNorm_AXILiteS_s_axi_U->ap_idle(ap_idle);
    BatchNorm_AXILiteS_s_axi_U->num_features_V(num_features_V);
    BatchNorm_AXILiteS_s_axi_U->height_V(height_V);
    BatchNorm_AXILiteS_s_axi_U->width_V(width_V);
    BatchNorm_AXILiteS_s_axi_U->in_data_V(in_data_V);
    BatchNorm_AXILiteS_s_axi_U->out_data_V(out_data_V);
    BatchNorm_AXILiteS_s_axi_U->gamma_V(gamma_V);
    BatchNorm_AXILiteS_s_axi_U->beta_V(beta_V);
    BatchNorm_AXILiteS_s_axi_U->running_mean_V(running_mean_V);
    BatchNorm_AXILiteS_s_axi_U->running_var_V(running_var_V);
    BatchNorm_gmem_m_axi_U = new BatchNorm_gmem_m_axi<0,16,32,5,16,16,16,16,C_M_AXI_GMEM_ID_WIDTH,C_M_AXI_GMEM_ADDR_WIDTH,C_M_AXI_GMEM_DATA_WIDTH,C_M_AXI_GMEM_AWUSER_WIDTH,C_M_AXI_GMEM_ARUSER_WIDTH,C_M_AXI_GMEM_WUSER_WIDTH,C_M_AXI_GMEM_RUSER_WIDTH,C_M_AXI_GMEM_BUSER_WIDTH,C_M_AXI_GMEM_USER_VALUE,C_M_AXI_GMEM_PROT_VALUE,C_M_AXI_GMEM_CACHE_VALUE>("BatchNorm_gmem_m_axi_U");
    BatchNorm_gmem_m_axi_U->AWVALID(m_axi_gmem_AWVALID);
    BatchNorm_gmem_m_axi_U->AWREADY(m_axi_gmem_AWREADY);
    BatchNorm_gmem_m_axi_U->AWADDR(m_axi_gmem_AWADDR);
    BatchNorm_gmem_m_axi_U->AWID(m_axi_gmem_AWID);
    BatchNorm_gmem_m_axi_U->AWLEN(m_axi_gmem_AWLEN);
    BatchNorm_gmem_m_axi_U->AWSIZE(m_axi_gmem_AWSIZE);
    BatchNorm_gmem_m_axi_U->AWBURST(m_axi_gmem_AWBURST);
    BatchNorm_gmem_m_axi_U->AWLOCK(m_axi_gmem_AWLOCK);
    BatchNorm_gmem_m_axi_U->AWCACHE(m_axi_gmem_AWCACHE);
    BatchNorm_gmem_m_axi_U->AWPROT(m_axi_gmem_AWPROT);
    BatchNorm_gmem_m_axi_U->AWQOS(m_axi_gmem_AWQOS);
    BatchNorm_gmem_m_axi_U->AWREGION(m_axi_gmem_AWREGION);
    BatchNorm_gmem_m_axi_U->AWUSER(m_axi_gmem_AWUSER);
    BatchNorm_gmem_m_axi_U->WVALID(m_axi_gmem_WVALID);
    BatchNorm_gmem_m_axi_U->WREADY(m_axi_gmem_WREADY);
    BatchNorm_gmem_m_axi_U->WDATA(m_axi_gmem_WDATA);
    BatchNorm_gmem_m_axi_U->WSTRB(m_axi_gmem_WSTRB);
    BatchNorm_gmem_m_axi_U->WLAST(m_axi_gmem_WLAST);
    BatchNorm_gmem_m_axi_U->WID(m_axi_gmem_WID);
    BatchNorm_gmem_m_axi_U->WUSER(m_axi_gmem_WUSER);
    BatchNorm_gmem_m_axi_U->ARVALID(m_axi_gmem_ARVALID);
    BatchNorm_gmem_m_axi_U->ARREADY(m_axi_gmem_ARREADY);
    BatchNorm_gmem_m_axi_U->ARADDR(m_axi_gmem_ARADDR);
    BatchNorm_gmem_m_axi_U->ARID(m_axi_gmem_ARID);
    BatchNorm_gmem_m_axi_U->ARLEN(m_axi_gmem_ARLEN);
    BatchNorm_gmem_m_axi_U->ARSIZE(m_axi_gmem_ARSIZE);
    BatchNorm_gmem_m_axi_U->ARBURST(m_axi_gmem_ARBURST);
    BatchNorm_gmem_m_axi_U->ARLOCK(m_axi_gmem_ARLOCK);
    BatchNorm_gmem_m_axi_U->ARCACHE(m_axi_gmem_ARCACHE);
    BatchNorm_gmem_m_axi_U->ARPROT(m_axi_gmem_ARPROT);
    BatchNorm_gmem_m_axi_U->ARQOS(m_axi_gmem_ARQOS);
    BatchNorm_gmem_m_axi_U->ARREGION(m_axi_gmem_ARREGION);
    BatchNorm_gmem_m_axi_U->ARUSER(m_axi_gmem_ARUSER);
    BatchNorm_gmem_m_axi_U->RVALID(m_axi_gmem_RVALID);
    BatchNorm_gmem_m_axi_U->RREADY(m_axi_gmem_RREADY);
    BatchNorm_gmem_m_axi_U->RDATA(m_axi_gmem_RDATA);
    BatchNorm_gmem_m_axi_U->RLAST(m_axi_gmem_RLAST);
    BatchNorm_gmem_m_axi_U->RID(m_axi_gmem_RID);
    BatchNorm_gmem_m_axi_U->RUSER(m_axi_gmem_RUSER);
    BatchNorm_gmem_m_axi_U->RRESP(m_axi_gmem_RRESP);
    BatchNorm_gmem_m_axi_U->BVALID(m_axi_gmem_BVALID);
    BatchNorm_gmem_m_axi_U->BREADY(m_axi_gmem_BREADY);
    BatchNorm_gmem_m_axi_U->BRESP(m_axi_gmem_BRESP);
    BatchNorm_gmem_m_axi_U->BID(m_axi_gmem_BID);
    BatchNorm_gmem_m_axi_U->BUSER(m_axi_gmem_BUSER);
    BatchNorm_gmem_m_axi_U->ACLK(ap_clk);
    BatchNorm_gmem_m_axi_U->ARESET(ap_rst_n_inv);
    BatchNorm_gmem_m_axi_U->ACLK_EN(ap_var_for_const0);
    BatchNorm_gmem_m_axi_U->I_ARVALID(gmem_ARVALID);
    BatchNorm_gmem_m_axi_U->I_ARREADY(gmem_ARREADY);
    BatchNorm_gmem_m_axi_U->I_ARADDR(gmem_ARADDR);
    BatchNorm_gmem_m_axi_U->I_ARID(ap_var_for_const1);
    BatchNorm_gmem_m_axi_U->I_ARLEN(ap_var_for_const2);
    BatchNorm_gmem_m_axi_U->I_ARSIZE(ap_var_for_const3);
    BatchNorm_gmem_m_axi_U->I_ARLOCK(ap_var_for_const4);
    BatchNorm_gmem_m_axi_U->I_ARCACHE(ap_var_for_const5);
    BatchNorm_gmem_m_axi_U->I_ARQOS(ap_var_for_const5);
    BatchNorm_gmem_m_axi_U->I_ARPROT(ap_var_for_const3);
    BatchNorm_gmem_m_axi_U->I_ARUSER(ap_var_for_const1);
    BatchNorm_gmem_m_axi_U->I_ARBURST(ap_var_for_const4);
    BatchNorm_gmem_m_axi_U->I_ARREGION(ap_var_for_const5);
    BatchNorm_gmem_m_axi_U->I_RVALID(gmem_RVALID);
    BatchNorm_gmem_m_axi_U->I_RREADY(gmem_RREADY);
    BatchNorm_gmem_m_axi_U->I_RDATA(gmem_RDATA);
    BatchNorm_gmem_m_axi_U->I_RID(gmem_RID);
    BatchNorm_gmem_m_axi_U->I_RUSER(gmem_RUSER);
    BatchNorm_gmem_m_axi_U->I_RRESP(gmem_RRESP);
    BatchNorm_gmem_m_axi_U->I_RLAST(gmem_RLAST);
    BatchNorm_gmem_m_axi_U->I_AWVALID(gmem_AWVALID);
    BatchNorm_gmem_m_axi_U->I_AWREADY(gmem_AWREADY);
    BatchNorm_gmem_m_axi_U->I_AWADDR(gmem_addr_4_reg_777);
    BatchNorm_gmem_m_axi_U->I_AWID(ap_var_for_const1);
    BatchNorm_gmem_m_axi_U->I_AWLEN(rhs_V_2_cast_reg_715);
    BatchNorm_gmem_m_axi_U->I_AWSIZE(ap_var_for_const3);
    BatchNorm_gmem_m_axi_U->I_AWLOCK(ap_var_for_const4);
    BatchNorm_gmem_m_axi_U->I_AWCACHE(ap_var_for_const5);
    BatchNorm_gmem_m_axi_U->I_AWQOS(ap_var_for_const5);
    BatchNorm_gmem_m_axi_U->I_AWPROT(ap_var_for_const3);
    BatchNorm_gmem_m_axi_U->I_AWUSER(ap_var_for_const1);
    BatchNorm_gmem_m_axi_U->I_AWBURST(ap_var_for_const4);
    BatchNorm_gmem_m_axi_U->I_AWREGION(ap_var_for_const5);
    BatchNorm_gmem_m_axi_U->I_WVALID(gmem_WVALID);
    BatchNorm_gmem_m_axi_U->I_WREADY(gmem_WREADY);
    BatchNorm_gmem_m_axi_U->I_WDATA(tmp_25_reg_842);
    BatchNorm_gmem_m_axi_U->I_WID(ap_var_for_const1);
    BatchNorm_gmem_m_axi_U->I_WUSER(ap_var_for_const1);
    BatchNorm_gmem_m_axi_U->I_WLAST(ap_var_for_const6);
    BatchNorm_gmem_m_axi_U->I_WSTRB(ap_var_for_const7);
    BatchNorm_gmem_m_axi_U->I_BVALID(gmem_BVALID);
    BatchNorm_gmem_m_axi_U->I_BREADY(gmem_BREADY);
    BatchNorm_gmem_m_axi_U->I_BRESP(gmem_BRESP);
    BatchNorm_gmem_m_axi_U->I_BID(gmem_BID);
    BatchNorm_gmem_m_axi_U->I_BUSER(gmem_BUSER);
    grp_sqrt_fixed_17_9_s_fu_313 = new sqrt_fixed_17_9_s("grp_sqrt_fixed_17_9_s_fu_313");
    grp_sqrt_fixed_17_9_s_fu_313->ap_clk(ap_clk);
    grp_sqrt_fixed_17_9_s_fu_313->ap_rst(ap_rst_n_inv);
    grp_sqrt_fixed_17_9_s_fu_313->x_V(p_Val2_7_reg_812);
    grp_sqrt_fixed_17_9_s_fu_313->ap_return(grp_sqrt_fixed_17_9_s_fu_313_ap_return);
    BatchNorm_sdiv_25bkb_U2 = new BatchNorm_sdiv_25bkb<1,29,25,14,16>("BatchNorm_sdiv_25bkb_U2");
    BatchNorm_sdiv_25bkb_U2->clk(ap_clk);
    BatchNorm_sdiv_25bkb_U2->reset(ap_rst_n_inv);
    BatchNorm_sdiv_25bkb_U2->start(grp_fu_614_ap_start);
    BatchNorm_sdiv_25bkb_U2->done(grp_fu_614_ap_done);
    BatchNorm_sdiv_25bkb_U2->din0(grp_fu_614_p0);
    BatchNorm_sdiv_25bkb_U2->din1(grp_fu_614_p1);
    BatchNorm_sdiv_25bkb_U2->ce(grp_fu_614_ce);
    BatchNorm_sdiv_25bkb_U2->dout(grp_fu_614_p2);
    BatchNorm_mul_mulcud_U3 = new BatchNorm_mul_mulcud<1,1,16,24,40>("BatchNorm_mul_mulcud_U3");
    BatchNorm_mul_mulcud_U3->din0(ret_V_1_fu_646_p0);
    BatchNorm_mul_mulcud_U3->din1(ret_V_1_fu_646_p1);
    BatchNorm_mul_mulcud_U3->dout(ret_V_1_fu_646_p2);
    BatchNorm_mac_muldEe_U4 = new BatchNorm_mac_muldEe<1,1,16,16,24,24>("BatchNorm_mac_muldEe_U4");
    BatchNorm_mac_muldEe_U4->din0(gmem_addr_2_read_reg_827);
    BatchNorm_mac_muldEe_U4->din1(normalized_V_fu_620_p1);
    BatchNorm_mac_muldEe_U4->din2(grp_fu_651_p2);
    BatchNorm_mac_muldEe_U4->dout(grp_fu_651_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state33);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state37);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state38);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state39);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state40);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state41);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state42);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state43);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state44);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state45);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state46);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state47);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state48);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state49);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state50);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state51);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state52);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state53);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state57);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_419_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_419_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_gmem_ARREADY);
    sensitive << ( gmem_ARREADY );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_gmem_AWREADY);
    sensitive << ( gmem_AWREADY );
    sensitive << ( ap_reg_ioackin_gmem_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_gmem_WREADY);
    sensitive << ( gmem_WREADY );
    sensitive << ( ap_reg_ioackin_gmem_WREADY );

    SC_METHOD(thread_beta_V8_sum_cast_fu_484_p1);
    sensitive << ( beta_V8_sum_fu_479_p2 );

    SC_METHOD(thread_beta_V8_sum_fu_479_p2);
    sensitive << ( tmp_35_cast_reg_685 );
    sensitive << ( tmp_cast_165_fu_430_p1 );

    SC_METHOD(thread_c_fu_424_p2);
    sensitive << ( i_op_assign_reg_257 );

    SC_METHOD(thread_exitcond1_fu_503_p2);
    sensitive << ( height_V_read_reg_665 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_op_assign_1_reg_279 );

    SC_METHOD(thread_exitcond2_fu_419_p2);
    sensitive << ( num_features_V_read_reg_670 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_op_assign_reg_257 );

    SC_METHOD(thread_exitcond_fu_546_p2);
    sensitive << ( width_V_read_reg_660 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( i_op_assign_2_reg_302 );

    SC_METHOD(thread_gamma_V6_sum_cast_fu_469_p1);
    sensitive << ( gamma_V6_sum_fu_464_p2 );

    SC_METHOD(thread_gamma_V6_sum_fu_464_p2);
    sensitive << ( tmp_36_cast_reg_690 );
    sensitive << ( tmp_cast_165_fu_430_p1 );

    SC_METHOD(thread_gmem_ARADDR);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( gmem_RVALID );
    sensitive << ( gmem_addr_reg_734 );
    sensitive << ( gmem_addr_1_reg_740 );
    sensitive << ( gmem_addr_2_reg_746 );
    sensitive << ( gmem_addr_3_reg_752 );
    sensitive << ( gmem_addr_5_reg_791 );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );

    SC_METHOD(thread_gmem_ARVALID);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( gmem_RVALID );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );

    SC_METHOD(thread_gmem_AWVALID);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_reg_ioackin_gmem_AWREADY );

    SC_METHOD(thread_gmem_BREADY);
    sensitive << ( ap_CS_fsm_state57 );
    sensitive << ( gmem_BVALID );

    SC_METHOD(thread_gmem_RREADY);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state51 );
    sensitive << ( gmem_RVALID );
    sensitive << ( ap_sig_ioackin_gmem_ARREADY );

    SC_METHOD(thread_gmem_WVALID);
    sensitive << ( ap_CS_fsm_state53 );
    sensitive << ( ap_reg_ioackin_gmem_WREADY );

    SC_METHOD(thread_gmem_blk_n_AR);
    sensitive << ( m_axi_gmem_ARREADY );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_gmem_blk_n_AW);
    sensitive << ( m_axi_gmem_AWREADY );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_gmem_blk_n_B);
    sensitive << ( m_axi_gmem_BVALID );
    sensitive << ( ap_CS_fsm_state57 );

    SC_METHOD(thread_gmem_blk_n_R);
    sensitive << ( m_axi_gmem_RVALID );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state51 );

    SC_METHOD(thread_gmem_blk_n_W);
    sensitive << ( m_axi_gmem_WREADY );
    sensitive << ( ap_CS_fsm_state53 );

    SC_METHOD(thread_grp_fu_614_ap_start);
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_grp_fu_614_ce);
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( ap_CS_fsm_state51 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( ap_CS_fsm_state49 );

    SC_METHOD(thread_grp_fu_614_p0);
    sensitive << ( ret_V_5_reg_807 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_grp_fu_614_p1);
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( grp_fu_614_p10 );

    SC_METHOD(thread_grp_fu_614_p10);
    sensitive << ( grp_sqrt_fixed_17_9_s_fu_313_ap_return );

    SC_METHOD(thread_grp_fu_651_p2);
    sensitive << ( p_Val2_9_reg_837 );
    sensitive << ( ap_CS_fsm_state52 );

    SC_METHOD(thread_h_fu_508_p2);
    sensitive << ( i_op_assign_1_reg_279 );

    SC_METHOD(thread_i_op_assign_2_cast3_fu_542_p1);
    sensitive << ( i_op_assign_2_reg_302 );

    SC_METHOD(thread_in_data_V2_sum1_cast_fu_581_p1);
    sensitive << ( in_data_V2_sum1_fu_576_p2 );

    SC_METHOD(thread_in_data_V2_sum1_fu_576_p2);
    sensitive << ( tmp_38_cast_reg_700 );
    sensitive << ( tmp_19_cast_cast_fu_572_p1 );

    SC_METHOD(thread_lhs_V_fu_591_p1);
    sensitive << ( x_V_reg_797 );

    SC_METHOD(thread_next_mul1_fu_414_p2);
    sensitive << ( rhs_V_cast_reg_705 );
    sensitive << ( ret_V_reg_268 );

    SC_METHOD(thread_next_mul_fu_498_p2);
    sensitive << ( rhs_V_2_cast_reg_715 );
    sensitive << ( ret_V_2_reg_290 );

    SC_METHOD(thread_normalized_V_fu_620_p1);
    sensitive << ( tmp_27_reg_832 );

    SC_METHOD(thread_out_data_V4_sum_cast_fu_532_p1);
    sensitive << ( out_data_V4_sum_fu_527_p2 );

    SC_METHOD(thread_out_data_V4_sum_fu_527_p2);
    sensitive << ( tmp_37_cast_reg_695 );
    sensitive << ( tmp_28_cast_fu_523_p1 );

    SC_METHOD(thread_ret_V_1_fu_646_p0);
    sensitive << ( rhs_V_1_cast_reg_710 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ret_V_1_fu_646_p1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ret_V_1_fu_646_p10 );

    SC_METHOD(thread_ret_V_1_fu_646_p10);
    sensitive << ( ret_V_reg_268 );

    SC_METHOD(thread_ret_V_5_fu_597_p2);
    sensitive << ( lhs_V_fu_591_p1 );
    sensitive << ( rhs_V_fu_594_p1 );

    SC_METHOD(thread_rhs_V_1_cast_fu_406_p1);
    sensitive << ( width_V );

    SC_METHOD(thread_rhs_V_2_cast_fu_410_p1);
    sensitive << ( width_V );

    SC_METHOD(thread_rhs_V_cast_fu_402_p1);
    sensitive << ( height_V );

    SC_METHOD(thread_rhs_V_fu_594_p1);
    sensitive << ( p_Val2_5_reg_802 );

    SC_METHOD(thread_running_mean_V10_sum_1_fu_439_p1);
    sensitive << ( running_mean_V10_sum_fu_434_p2 );

    SC_METHOD(thread_running_mean_V10_sum_fu_434_p2);
    sensitive << ( tmp_34_cast_reg_680 );
    sensitive << ( tmp_cast_165_fu_430_p1 );

    SC_METHOD(thread_running_var_V12_sum_fu_449_p2);
    sensitive << ( tmp_cast_reg_675 );
    sensitive << ( tmp_cast_165_fu_430_p1 );

    SC_METHOD(thread_running_var_V12_sum_s_fu_454_p1);
    sensitive << ( running_var_V12_sum_fu_449_p2 );

    SC_METHOD(thread_tmp1_cast_fu_563_p1);
    sensitive << ( tmp1_fu_557_p2 );

    SC_METHOD(thread_tmp1_fu_557_p2);
    sensitive << ( ret_V_2_reg_290 );
    sensitive << ( i_op_assign_2_cast3_fu_542_p1 );

    SC_METHOD(thread_tmp_19_cast_cast_fu_572_p1);
    sensitive << ( tmp_19_fu_567_p2 );

    SC_METHOD(thread_tmp_19_fu_567_p2);
    sensitive << ( ret_V_1_reg_758 );
    sensitive << ( tmp1_cast_fu_563_p1 );

    SC_METHOD(thread_tmp_24_fu_514_p1);
    sensitive << ( ret_V_2_reg_290 );

    SC_METHOD(thread_tmp_26_fu_518_p2);
    sensitive << ( ret_V_1_reg_758 );
    sensitive << ( tmp_24_fu_514_p1 );

    SC_METHOD(thread_tmp_28_cast_fu_523_p1);
    sensitive << ( tmp_26_fu_518_p2 );

    SC_METHOD(thread_tmp_34_cast_fu_342_p1);
    sensitive << ( tmp_43_fu_332_p4 );

    SC_METHOD(thread_tmp_35_cast_fu_356_p1);
    sensitive << ( tmp_44_fu_346_p4 );

    SC_METHOD(thread_tmp_36_cast_fu_370_p1);
    sensitive << ( tmp_45_fu_360_p4 );

    SC_METHOD(thread_tmp_37_cast_fu_384_p1);
    sensitive << ( tmp_46_fu_374_p4 );

    SC_METHOD(thread_tmp_38_cast_fu_398_p1);
    sensitive << ( tmp_47_fu_388_p4 );

    SC_METHOD(thread_tmp_43_fu_332_p4);
    sensitive << ( running_mean_V );

    SC_METHOD(thread_tmp_44_fu_346_p4);
    sensitive << ( beta_V );

    SC_METHOD(thread_tmp_45_fu_360_p4);
    sensitive << ( gamma_V );

    SC_METHOD(thread_tmp_46_fu_374_p4);
    sensitive << ( out_data_V );

    SC_METHOD(thread_tmp_47_fu_388_p4);
    sensitive << ( in_data_V );

    SC_METHOD(thread_tmp_cast_165_fu_430_p1);
    sensitive << ( i_op_assign_reg_257 );

    SC_METHOD(thread_tmp_cast_fu_328_p1);
    sensitive << ( tmp_fu_318_p4 );

    SC_METHOD(thread_tmp_fu_318_p4);
    sensitive << ( running_var_V );

    SC_METHOD(thread_w_fu_551_p2);
    sensitive << ( i_op_assign_2_reg_302 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state51 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state53 );
    sensitive << ( ap_CS_fsm_state57 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( gmem_RVALID );
    sensitive << ( gmem_BVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_419_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond1_fu_503_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond_fu_546_p2 );
    sensitive << ( ap_sig_ioackin_gmem_ARREADY );
    sensitive << ( ap_sig_ioackin_gmem_WREADY );
    sensitive << ( ap_sig_ioackin_gmem_AWREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const7);

    ap_CS_fsm = "000000000000000000000000000000000000000000000000000000001";
    ap_reg_ioackin_gmem_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_gmem_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_gmem_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "BatchNorm_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_gmem_AWVALID, "(port)m_axi_gmem_AWVALID");
    sc_trace(mVcdFile, m_axi_gmem_AWREADY, "(port)m_axi_gmem_AWREADY");
    sc_trace(mVcdFile, m_axi_gmem_AWADDR, "(port)m_axi_gmem_AWADDR");
    sc_trace(mVcdFile, m_axi_gmem_AWID, "(port)m_axi_gmem_AWID");
    sc_trace(mVcdFile, m_axi_gmem_AWLEN, "(port)m_axi_gmem_AWLEN");
    sc_trace(mVcdFile, m_axi_gmem_AWSIZE, "(port)m_axi_gmem_AWSIZE");
    sc_trace(mVcdFile, m_axi_gmem_AWBURST, "(port)m_axi_gmem_AWBURST");
    sc_trace(mVcdFile, m_axi_gmem_AWLOCK, "(port)m_axi_gmem_AWLOCK");
    sc_trace(mVcdFile, m_axi_gmem_AWCACHE, "(port)m_axi_gmem_AWCACHE");
    sc_trace(mVcdFile, m_axi_gmem_AWPROT, "(port)m_axi_gmem_AWPROT");
    sc_trace(mVcdFile, m_axi_gmem_AWQOS, "(port)m_axi_gmem_AWQOS");
    sc_trace(mVcdFile, m_axi_gmem_AWREGION, "(port)m_axi_gmem_AWREGION");
    sc_trace(mVcdFile, m_axi_gmem_AWUSER, "(port)m_axi_gmem_AWUSER");
    sc_trace(mVcdFile, m_axi_gmem_WVALID, "(port)m_axi_gmem_WVALID");
    sc_trace(mVcdFile, m_axi_gmem_WREADY, "(port)m_axi_gmem_WREADY");
    sc_trace(mVcdFile, m_axi_gmem_WDATA, "(port)m_axi_gmem_WDATA");
    sc_trace(mVcdFile, m_axi_gmem_WSTRB, "(port)m_axi_gmem_WSTRB");
    sc_trace(mVcdFile, m_axi_gmem_WLAST, "(port)m_axi_gmem_WLAST");
    sc_trace(mVcdFile, m_axi_gmem_WID, "(port)m_axi_gmem_WID");
    sc_trace(mVcdFile, m_axi_gmem_WUSER, "(port)m_axi_gmem_WUSER");
    sc_trace(mVcdFile, m_axi_gmem_ARVALID, "(port)m_axi_gmem_ARVALID");
    sc_trace(mVcdFile, m_axi_gmem_ARREADY, "(port)m_axi_gmem_ARREADY");
    sc_trace(mVcdFile, m_axi_gmem_ARADDR, "(port)m_axi_gmem_ARADDR");
    sc_trace(mVcdFile, m_axi_gmem_ARID, "(port)m_axi_gmem_ARID");
    sc_trace(mVcdFile, m_axi_gmem_ARLEN, "(port)m_axi_gmem_ARLEN");
    sc_trace(mVcdFile, m_axi_gmem_ARSIZE, "(port)m_axi_gmem_ARSIZE");
    sc_trace(mVcdFile, m_axi_gmem_ARBURST, "(port)m_axi_gmem_ARBURST");
    sc_trace(mVcdFile, m_axi_gmem_ARLOCK, "(port)m_axi_gmem_ARLOCK");
    sc_trace(mVcdFile, m_axi_gmem_ARCACHE, "(port)m_axi_gmem_ARCACHE");
    sc_trace(mVcdFile, m_axi_gmem_ARPROT, "(port)m_axi_gmem_ARPROT");
    sc_trace(mVcdFile, m_axi_gmem_ARQOS, "(port)m_axi_gmem_ARQOS");
    sc_trace(mVcdFile, m_axi_gmem_ARREGION, "(port)m_axi_gmem_ARREGION");
    sc_trace(mVcdFile, m_axi_gmem_ARUSER, "(port)m_axi_gmem_ARUSER");
    sc_trace(mVcdFile, m_axi_gmem_RVALID, "(port)m_axi_gmem_RVALID");
    sc_trace(mVcdFile, m_axi_gmem_RREADY, "(port)m_axi_gmem_RREADY");
    sc_trace(mVcdFile, m_axi_gmem_RDATA, "(port)m_axi_gmem_RDATA");
    sc_trace(mVcdFile, m_axi_gmem_RLAST, "(port)m_axi_gmem_RLAST");
    sc_trace(mVcdFile, m_axi_gmem_RID, "(port)m_axi_gmem_RID");
    sc_trace(mVcdFile, m_axi_gmem_RUSER, "(port)m_axi_gmem_RUSER");
    sc_trace(mVcdFile, m_axi_gmem_RRESP, "(port)m_axi_gmem_RRESP");
    sc_trace(mVcdFile, m_axi_gmem_BVALID, "(port)m_axi_gmem_BVALID");
    sc_trace(mVcdFile, m_axi_gmem_BREADY, "(port)m_axi_gmem_BREADY");
    sc_trace(mVcdFile, m_axi_gmem_BRESP, "(port)m_axi_gmem_BRESP");
    sc_trace(mVcdFile, m_axi_gmem_BID, "(port)m_axi_gmem_BID");
    sc_trace(mVcdFile, m_axi_gmem_BUSER, "(port)m_axi_gmem_BUSER");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, num_features_V, "num_features_V");
    sc_trace(mVcdFile, height_V, "height_V");
    sc_trace(mVcdFile, width_V, "width_V");
    sc_trace(mVcdFile, in_data_V, "in_data_V");
    sc_trace(mVcdFile, out_data_V, "out_data_V");
    sc_trace(mVcdFile, gamma_V, "gamma_V");
    sc_trace(mVcdFile, beta_V, "beta_V");
    sc_trace(mVcdFile, running_mean_V, "running_mean_V");
    sc_trace(mVcdFile, running_var_V, "running_var_V");
    sc_trace(mVcdFile, gmem_blk_n_AR, "gmem_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, gmem_blk_n_R, "gmem_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state50, "ap_CS_fsm_state50");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state51, "ap_CS_fsm_state51");
    sc_trace(mVcdFile, gmem_blk_n_AW, "gmem_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, gmem_blk_n_W, "gmem_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state53, "ap_CS_fsm_state53");
    sc_trace(mVcdFile, gmem_blk_n_B, "gmem_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state57, "ap_CS_fsm_state57");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, gmem_AWVALID, "gmem_AWVALID");
    sc_trace(mVcdFile, gmem_AWREADY, "gmem_AWREADY");
    sc_trace(mVcdFile, gmem_WVALID, "gmem_WVALID");
    sc_trace(mVcdFile, gmem_WREADY, "gmem_WREADY");
    sc_trace(mVcdFile, gmem_ARVALID, "gmem_ARVALID");
    sc_trace(mVcdFile, gmem_ARREADY, "gmem_ARREADY");
    sc_trace(mVcdFile, gmem_ARADDR, "gmem_ARADDR");
    sc_trace(mVcdFile, gmem_RVALID, "gmem_RVALID");
    sc_trace(mVcdFile, gmem_RREADY, "gmem_RREADY");
    sc_trace(mVcdFile, gmem_RDATA, "gmem_RDATA");
    sc_trace(mVcdFile, gmem_RLAST, "gmem_RLAST");
    sc_trace(mVcdFile, gmem_RID, "gmem_RID");
    sc_trace(mVcdFile, gmem_RUSER, "gmem_RUSER");
    sc_trace(mVcdFile, gmem_RRESP, "gmem_RRESP");
    sc_trace(mVcdFile, gmem_BVALID, "gmem_BVALID");
    sc_trace(mVcdFile, gmem_BREADY, "gmem_BREADY");
    sc_trace(mVcdFile, gmem_BRESP, "gmem_BRESP");
    sc_trace(mVcdFile, gmem_BID, "gmem_BID");
    sc_trace(mVcdFile, gmem_BUSER, "gmem_BUSER");
    sc_trace(mVcdFile, width_V_read_reg_660, "width_V_read_reg_660");
    sc_trace(mVcdFile, height_V_read_reg_665, "height_V_read_reg_665");
    sc_trace(mVcdFile, num_features_V_read_reg_670, "num_features_V_read_reg_670");
    sc_trace(mVcdFile, tmp_cast_fu_328_p1, "tmp_cast_fu_328_p1");
    sc_trace(mVcdFile, tmp_cast_reg_675, "tmp_cast_reg_675");
    sc_trace(mVcdFile, tmp_34_cast_fu_342_p1, "tmp_34_cast_fu_342_p1");
    sc_trace(mVcdFile, tmp_34_cast_reg_680, "tmp_34_cast_reg_680");
    sc_trace(mVcdFile, tmp_35_cast_fu_356_p1, "tmp_35_cast_fu_356_p1");
    sc_trace(mVcdFile, tmp_35_cast_reg_685, "tmp_35_cast_reg_685");
    sc_trace(mVcdFile, tmp_36_cast_fu_370_p1, "tmp_36_cast_fu_370_p1");
    sc_trace(mVcdFile, tmp_36_cast_reg_690, "tmp_36_cast_reg_690");
    sc_trace(mVcdFile, tmp_37_cast_fu_384_p1, "tmp_37_cast_fu_384_p1");
    sc_trace(mVcdFile, tmp_37_cast_reg_695, "tmp_37_cast_reg_695");
    sc_trace(mVcdFile, tmp_38_cast_fu_398_p1, "tmp_38_cast_fu_398_p1");
    sc_trace(mVcdFile, tmp_38_cast_reg_700, "tmp_38_cast_reg_700");
    sc_trace(mVcdFile, rhs_V_cast_fu_402_p1, "rhs_V_cast_fu_402_p1");
    sc_trace(mVcdFile, rhs_V_cast_reg_705, "rhs_V_cast_reg_705");
    sc_trace(mVcdFile, rhs_V_1_cast_fu_406_p1, "rhs_V_1_cast_fu_406_p1");
    sc_trace(mVcdFile, rhs_V_1_cast_reg_710, "rhs_V_1_cast_reg_710");
    sc_trace(mVcdFile, rhs_V_2_cast_fu_410_p1, "rhs_V_2_cast_fu_410_p1");
    sc_trace(mVcdFile, rhs_V_2_cast_reg_715, "rhs_V_2_cast_reg_715");
    sc_trace(mVcdFile, next_mul1_fu_414_p2, "next_mul1_fu_414_p2");
    sc_trace(mVcdFile, next_mul1_reg_721, "next_mul1_reg_721");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, c_fu_424_p2, "c_fu_424_p2");
    sc_trace(mVcdFile, c_reg_729, "c_reg_729");
    sc_trace(mVcdFile, gmem_addr_reg_734, "gmem_addr_reg_734");
    sc_trace(mVcdFile, exitcond2_fu_419_p2, "exitcond2_fu_419_p2");
    sc_trace(mVcdFile, gmem_addr_1_reg_740, "gmem_addr_1_reg_740");
    sc_trace(mVcdFile, gmem_addr_2_reg_746, "gmem_addr_2_reg_746");
    sc_trace(mVcdFile, gmem_addr_3_reg_752, "gmem_addr_3_reg_752");
    sc_trace(mVcdFile, ret_V_1_fu_646_p2, "ret_V_1_fu_646_p2");
    sc_trace(mVcdFile, ret_V_1_reg_758, "ret_V_1_reg_758");
    sc_trace(mVcdFile, next_mul_fu_498_p2, "next_mul_fu_498_p2");
    sc_trace(mVcdFile, next_mul_reg_764, "next_mul_reg_764");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, h_fu_508_p2, "h_fu_508_p2");
    sc_trace(mVcdFile, h_reg_772, "h_reg_772");
    sc_trace(mVcdFile, gmem_addr_4_reg_777, "gmem_addr_4_reg_777");
    sc_trace(mVcdFile, exitcond1_fu_503_p2, "exitcond1_fu_503_p2");
    sc_trace(mVcdFile, w_fu_551_p2, "w_fu_551_p2");
    sc_trace(mVcdFile, w_reg_786, "w_reg_786");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, gmem_addr_5_reg_791, "gmem_addr_5_reg_791");
    sc_trace(mVcdFile, exitcond_fu_546_p2, "exitcond_fu_546_p2");
    sc_trace(mVcdFile, x_V_reg_797, "x_V_reg_797");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_ARREADY, "ap_sig_ioackin_gmem_ARREADY");
    sc_trace(mVcdFile, p_Val2_5_reg_802, "p_Val2_5_reg_802");
    sc_trace(mVcdFile, ret_V_5_fu_597_p2, "ret_V_5_fu_597_p2");
    sc_trace(mVcdFile, ret_V_5_reg_807, "ret_V_5_reg_807");
    sc_trace(mVcdFile, p_Val2_7_reg_812, "p_Val2_7_reg_812");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, gmem_addr_2_read_reg_827, "gmem_addr_2_read_reg_827");
    sc_trace(mVcdFile, grp_fu_614_p2, "grp_fu_614_p2");
    sc_trace(mVcdFile, tmp_27_reg_832, "tmp_27_reg_832");
    sc_trace(mVcdFile, p_Val2_9_reg_837, "p_Val2_9_reg_837");
    sc_trace(mVcdFile, tmp_25_reg_842, "tmp_25_reg_842");
    sc_trace(mVcdFile, ap_CS_fsm_state52, "ap_CS_fsm_state52");
    sc_trace(mVcdFile, grp_sqrt_fixed_17_9_s_fu_313_ap_return, "grp_sqrt_fixed_17_9_s_fu_313_ap_return");
    sc_trace(mVcdFile, i_op_assign_reg_257, "i_op_assign_reg_257");
    sc_trace(mVcdFile, ret_V_reg_268, "ret_V_reg_268");
    sc_trace(mVcdFile, i_op_assign_1_reg_279, "i_op_assign_1_reg_279");
    sc_trace(mVcdFile, ret_V_2_reg_290, "ret_V_2_reg_290");
    sc_trace(mVcdFile, i_op_assign_2_reg_302, "i_op_assign_2_reg_302");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_WREADY, "ap_sig_ioackin_gmem_WREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_AWREADY, "ap_sig_ioackin_gmem_AWREADY");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, running_mean_V10_sum_1_fu_439_p1, "running_mean_V10_sum_1_fu_439_p1");
    sc_trace(mVcdFile, running_var_V12_sum_s_fu_454_p1, "running_var_V12_sum_s_fu_454_p1");
    sc_trace(mVcdFile, gamma_V6_sum_cast_fu_469_p1, "gamma_V6_sum_cast_fu_469_p1");
    sc_trace(mVcdFile, beta_V8_sum_cast_fu_484_p1, "beta_V8_sum_cast_fu_484_p1");
    sc_trace(mVcdFile, out_data_V4_sum_cast_fu_532_p1, "out_data_V4_sum_cast_fu_532_p1");
    sc_trace(mVcdFile, in_data_V2_sum1_cast_fu_581_p1, "in_data_V2_sum1_cast_fu_581_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_AWREADY, "ap_reg_ioackin_gmem_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_ARREADY, "ap_reg_ioackin_gmem_ARREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_WREADY, "ap_reg_ioackin_gmem_WREADY");
    sc_trace(mVcdFile, tmp_fu_318_p4, "tmp_fu_318_p4");
    sc_trace(mVcdFile, tmp_43_fu_332_p4, "tmp_43_fu_332_p4");
    sc_trace(mVcdFile, tmp_44_fu_346_p4, "tmp_44_fu_346_p4");
    sc_trace(mVcdFile, tmp_45_fu_360_p4, "tmp_45_fu_360_p4");
    sc_trace(mVcdFile, tmp_46_fu_374_p4, "tmp_46_fu_374_p4");
    sc_trace(mVcdFile, tmp_47_fu_388_p4, "tmp_47_fu_388_p4");
    sc_trace(mVcdFile, tmp_cast_165_fu_430_p1, "tmp_cast_165_fu_430_p1");
    sc_trace(mVcdFile, running_mean_V10_sum_fu_434_p2, "running_mean_V10_sum_fu_434_p2");
    sc_trace(mVcdFile, running_var_V12_sum_fu_449_p2, "running_var_V12_sum_fu_449_p2");
    sc_trace(mVcdFile, gamma_V6_sum_fu_464_p2, "gamma_V6_sum_fu_464_p2");
    sc_trace(mVcdFile, beta_V8_sum_fu_479_p2, "beta_V8_sum_fu_479_p2");
    sc_trace(mVcdFile, tmp_24_fu_514_p1, "tmp_24_fu_514_p1");
    sc_trace(mVcdFile, tmp_26_fu_518_p2, "tmp_26_fu_518_p2");
    sc_trace(mVcdFile, tmp_28_cast_fu_523_p1, "tmp_28_cast_fu_523_p1");
    sc_trace(mVcdFile, out_data_V4_sum_fu_527_p2, "out_data_V4_sum_fu_527_p2");
    sc_trace(mVcdFile, i_op_assign_2_cast3_fu_542_p1, "i_op_assign_2_cast3_fu_542_p1");
    sc_trace(mVcdFile, tmp1_fu_557_p2, "tmp1_fu_557_p2");
    sc_trace(mVcdFile, tmp1_cast_fu_563_p1, "tmp1_cast_fu_563_p1");
    sc_trace(mVcdFile, tmp_19_fu_567_p2, "tmp_19_fu_567_p2");
    sc_trace(mVcdFile, tmp_19_cast_cast_fu_572_p1, "tmp_19_cast_cast_fu_572_p1");
    sc_trace(mVcdFile, in_data_V2_sum1_fu_576_p2, "in_data_V2_sum1_fu_576_p2");
    sc_trace(mVcdFile, lhs_V_fu_591_p1, "lhs_V_fu_591_p1");
    sc_trace(mVcdFile, rhs_V_fu_594_p1, "rhs_V_fu_594_p1");
    sc_trace(mVcdFile, grp_fu_614_p0, "grp_fu_614_p0");
    sc_trace(mVcdFile, grp_fu_614_p1, "grp_fu_614_p1");
    sc_trace(mVcdFile, normalized_V_fu_620_p1, "normalized_V_fu_620_p1");
    sc_trace(mVcdFile, grp_fu_651_p3, "grp_fu_651_p3");
    sc_trace(mVcdFile, ret_V_1_fu_646_p0, "ret_V_1_fu_646_p0");
    sc_trace(mVcdFile, ret_V_1_fu_646_p1, "ret_V_1_fu_646_p1");
    sc_trace(mVcdFile, grp_fu_651_p2, "grp_fu_651_p2");
    sc_trace(mVcdFile, grp_fu_614_ap_start, "grp_fu_614_ap_start");
    sc_trace(mVcdFile, grp_fu_614_ap_done, "grp_fu_614_ap_done");
    sc_trace(mVcdFile, grp_fu_614_ce, "grp_fu_614_ce");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, ap_CS_fsm_state33, "ap_CS_fsm_state33");
    sc_trace(mVcdFile, ap_CS_fsm_state34, "ap_CS_fsm_state34");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, ap_CS_fsm_state37, "ap_CS_fsm_state37");
    sc_trace(mVcdFile, ap_CS_fsm_state38, "ap_CS_fsm_state38");
    sc_trace(mVcdFile, ap_CS_fsm_state39, "ap_CS_fsm_state39");
    sc_trace(mVcdFile, ap_CS_fsm_state40, "ap_CS_fsm_state40");
    sc_trace(mVcdFile, ap_CS_fsm_state41, "ap_CS_fsm_state41");
    sc_trace(mVcdFile, ap_CS_fsm_state42, "ap_CS_fsm_state42");
    sc_trace(mVcdFile, ap_CS_fsm_state43, "ap_CS_fsm_state43");
    sc_trace(mVcdFile, ap_CS_fsm_state44, "ap_CS_fsm_state44");
    sc_trace(mVcdFile, ap_CS_fsm_state45, "ap_CS_fsm_state45");
    sc_trace(mVcdFile, ap_CS_fsm_state46, "ap_CS_fsm_state46");
    sc_trace(mVcdFile, ap_CS_fsm_state47, "ap_CS_fsm_state47");
    sc_trace(mVcdFile, ap_CS_fsm_state48, "ap_CS_fsm_state48");
    sc_trace(mVcdFile, ap_CS_fsm_state49, "ap_CS_fsm_state49");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, grp_fu_614_p10, "grp_fu_614_p10");
    sc_trace(mVcdFile, ret_V_1_fu_646_p10, "ret_V_1_fu_646_p10");
#endif

    }
    mHdltvinHandle.open("BatchNorm.hdltvin.dat");
    mHdltvoutHandle.open("BatchNorm.hdltvout.dat");
}

BatchNorm::~BatchNorm() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete BatchNorm_AXILiteS_s_axi_U;
    delete BatchNorm_gmem_m_axi_U;
    delete grp_sqrt_fixed_17_9_s_fu_313;
    delete BatchNorm_sdiv_25bkb_U2;
    delete BatchNorm_mul_mulcud_U3;
    delete BatchNorm_mac_muldEe_U4;
}

void BatchNorm::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void BatchNorm::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_logic_0;
}

void BatchNorm::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_1;
}

void BatchNorm::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void BatchNorm::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv3_0;
}

void BatchNorm::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv2_0;
}

void BatchNorm::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv4_0;
}

void BatchNorm::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv2_3;
}

void BatchNorm::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
              !(esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_ARREADY.read()))) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1)))) {
            ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, gmem_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, gmem_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, gmem_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, gmem_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
                     esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, gmem_ARREADY.read())))) {
            ap_reg_ioackin_gmem_ARREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_gmem_AWREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, gmem_AWREADY.read())) {
                ap_reg_ioackin_gmem_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_WREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_gmem_WREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_gmem_WREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, gmem_WREADY.read())) {
                ap_reg_ioackin_gmem_WREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read()) && 
         esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
        i_op_assign_1_reg_279 = h_reg_772.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond2_fu_419_p2.read(), ap_const_lv1_0))) {
        i_op_assign_1_reg_279 = ap_const_lv16_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_sig_ioackin_gmem_AWREADY.read(), ap_const_logic_1))) {
        i_op_assign_2_reg_302 = ap_const_lv16_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read()) && 
                esl_seteq<1,1,1>(ap_sig_ioackin_gmem_WREADY.read(), ap_const_logic_1))) {
        i_op_assign_2_reg_302 = w_reg_786.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_503_p2.read(), ap_const_lv1_1))) {
        i_op_assign_reg_257 = c_reg_729.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_op_assign_reg_257 = ap_const_lv8_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read()) && 
         esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
        ret_V_2_reg_290 = next_mul_reg_764.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond2_fu_419_p2.read(), ap_const_lv1_0))) {
        ret_V_2_reg_290 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_503_p2.read(), ap_const_lv1_1))) {
        ret_V_reg_268 = next_mul1_reg_721.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ret_V_reg_268 = ap_const_lv24_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        c_reg_729 = c_fu_424_p2.read();
        next_mul1_reg_721 = next_mul1_fu_414_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond2_fu_419_p2.read(), ap_const_lv1_0))) {
        gmem_addr_1_reg_740 =  (sc_lv<32>) (running_var_V12_sum_s_fu_454_p1.read());
        gmem_addr_2_reg_746 =  (sc_lv<32>) (gamma_V6_sum_cast_fu_469_p1.read());
        gmem_addr_3_reg_752 =  (sc_lv<32>) (beta_V8_sum_cast_fu_484_p1.read());
        gmem_addr_reg_734 =  (sc_lv<32>) (running_mean_V10_sum_1_fu_439_p1.read());
        ret_V_1_reg_758 = ret_V_1_fu_646_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()) && esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1))) {
        gmem_addr_2_read_reg_827 = gmem_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_503_p2.read()))) {
        gmem_addr_4_reg_777 =  (sc_lv<32>) (out_data_V4_sum_cast_fu_532_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_546_p2.read()))) {
        gmem_addr_5_reg_791 =  (sc_lv<32>) (in_data_V2_sum1_cast_fu_581_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        h_reg_772 = h_fu_508_p2.read();
        next_mul_reg_764 = next_mul_fu_498_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        height_V_read_reg_665 = height_V.read();
        num_features_V_read_reg_670 = num_features_V.read();
        rhs_V_1_cast_reg_710 = rhs_V_1_cast_fu_406_p1.read();
        rhs_V_2_cast_reg_715 = rhs_V_2_cast_fu_410_p1.read();
        rhs_V_cast_reg_705 = rhs_V_cast_fu_402_p1.read();
        tmp_34_cast_reg_680 = tmp_34_cast_fu_342_p1.read();
        tmp_35_cast_reg_685 = tmp_35_cast_fu_356_p1.read();
        tmp_36_cast_reg_690 = tmp_36_cast_fu_370_p1.read();
        tmp_37_cast_reg_695 = tmp_37_cast_fu_384_p1.read();
        tmp_38_cast_reg_700 = tmp_38_cast_fu_398_p1.read();
        tmp_cast_reg_675 = tmp_cast_fu_328_p1.read();
        width_V_read_reg_660 = width_V.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1))) {
        p_Val2_5_reg_802 = gmem_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1))) {
        p_Val2_7_reg_812 = gmem_RDATA.read();
        ret_V_5_reg_807 = ret_V_5_fu_597_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()) && esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1))) {
        p_Val2_9_reg_837 = gmem_RDATA.read();
        tmp_27_reg_832 = grp_fu_614_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state52.read())) {
        tmp_25_reg_842 = grp_fu_651_p3.read().range(23, 8);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        w_reg_786 = w_fu_551_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_ARREADY.read())))) {
        x_V_reg_797 = gmem_RDATA.read();
    }
}

void BatchNorm::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void BatchNorm::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void BatchNorm::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void BatchNorm::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void BatchNorm::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void BatchNorm::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void BatchNorm::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void BatchNorm::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void BatchNorm::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void BatchNorm::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void BatchNorm::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void BatchNorm::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void BatchNorm::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void BatchNorm::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[28];
}

void BatchNorm::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void BatchNorm::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void BatchNorm::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void BatchNorm::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void BatchNorm::thread_ap_CS_fsm_state33() {
    ap_CS_fsm_state33 = ap_CS_fsm.read()[32];
}

void BatchNorm::thread_ap_CS_fsm_state34() {
    ap_CS_fsm_state34 = ap_CS_fsm.read()[33];
}

void BatchNorm::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[34];
}

void BatchNorm::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read()[35];
}

void BatchNorm::thread_ap_CS_fsm_state37() {
    ap_CS_fsm_state37 = ap_CS_fsm.read()[36];
}

void BatchNorm::thread_ap_CS_fsm_state38() {
    ap_CS_fsm_state38 = ap_CS_fsm.read()[37];
}

void BatchNorm::thread_ap_CS_fsm_state39() {
    ap_CS_fsm_state39 = ap_CS_fsm.read()[38];
}

void BatchNorm::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void BatchNorm::thread_ap_CS_fsm_state40() {
    ap_CS_fsm_state40 = ap_CS_fsm.read()[39];
}

void BatchNorm::thread_ap_CS_fsm_state41() {
    ap_CS_fsm_state41 = ap_CS_fsm.read()[40];
}

void BatchNorm::thread_ap_CS_fsm_state42() {
    ap_CS_fsm_state42 = ap_CS_fsm.read()[41];
}

void BatchNorm::thread_ap_CS_fsm_state43() {
    ap_CS_fsm_state43 = ap_CS_fsm.read()[42];
}

void BatchNorm::thread_ap_CS_fsm_state44() {
    ap_CS_fsm_state44 = ap_CS_fsm.read()[43];
}

void BatchNorm::thread_ap_CS_fsm_state45() {
    ap_CS_fsm_state45 = ap_CS_fsm.read()[44];
}

void BatchNorm::thread_ap_CS_fsm_state46() {
    ap_CS_fsm_state46 = ap_CS_fsm.read()[45];
}

void BatchNorm::thread_ap_CS_fsm_state47() {
    ap_CS_fsm_state47 = ap_CS_fsm.read()[46];
}

void BatchNorm::thread_ap_CS_fsm_state48() {
    ap_CS_fsm_state48 = ap_CS_fsm.read()[47];
}

void BatchNorm::thread_ap_CS_fsm_state49() {
    ap_CS_fsm_state49 = ap_CS_fsm.read()[48];
}

void BatchNorm::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void BatchNorm::thread_ap_CS_fsm_state50() {
    ap_CS_fsm_state50 = ap_CS_fsm.read()[49];
}

void BatchNorm::thread_ap_CS_fsm_state51() {
    ap_CS_fsm_state51 = ap_CS_fsm.read()[50];
}

void BatchNorm::thread_ap_CS_fsm_state52() {
    ap_CS_fsm_state52 = ap_CS_fsm.read()[51];
}

void BatchNorm::thread_ap_CS_fsm_state53() {
    ap_CS_fsm_state53 = ap_CS_fsm.read()[52];
}

void BatchNorm::thread_ap_CS_fsm_state57() {
    ap_CS_fsm_state57 = ap_CS_fsm.read()[56];
}

void BatchNorm::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void BatchNorm::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void BatchNorm::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void BatchNorm::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_419_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void BatchNorm::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void BatchNorm::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_419_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void BatchNorm::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void BatchNorm::thread_ap_sig_ioackin_gmem_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) {
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY.read();
    } else {
        ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1;
    }
}

void BatchNorm::thread_ap_sig_ioackin_gmem_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_AWREADY.read())) {
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY.read();
    } else {
        ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1;
    }
}

void BatchNorm::thread_ap_sig_ioackin_gmem_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_WREADY.read())) {
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY.read();
    } else {
        ap_sig_ioackin_gmem_WREADY = ap_const_logic_1;
    }
}

void BatchNorm::thread_beta_V8_sum_cast_fu_484_p1() {
    beta_V8_sum_cast_fu_484_p1 = esl_zext<64,32>(beta_V8_sum_fu_479_p2.read());
}

void BatchNorm::thread_beta_V8_sum_fu_479_p2() {
    beta_V8_sum_fu_479_p2 = (!tmp_cast_165_fu_430_p1.read().is_01() || !tmp_35_cast_reg_685.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_cast_165_fu_430_p1.read()) + sc_biguint<32>(tmp_35_cast_reg_685.read()));
}

void BatchNorm::thread_c_fu_424_p2() {
    c_fu_424_p2 = (!i_op_assign_reg_257.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(i_op_assign_reg_257.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void BatchNorm::thread_exitcond1_fu_503_p2() {
    exitcond1_fu_503_p2 = (!i_op_assign_1_reg_279.read().is_01() || !height_V_read_reg_665.read().is_01())? sc_lv<1>(): sc_lv<1>(i_op_assign_1_reg_279.read() == height_V_read_reg_665.read());
}

void BatchNorm::thread_exitcond2_fu_419_p2() {
    exitcond2_fu_419_p2 = (!i_op_assign_reg_257.read().is_01() || !num_features_V_read_reg_670.read().is_01())? sc_lv<1>(): sc_lv<1>(i_op_assign_reg_257.read() == num_features_V_read_reg_670.read());
}

void BatchNorm::thread_exitcond_fu_546_p2() {
    exitcond_fu_546_p2 = (!i_op_assign_2_reg_302.read().is_01() || !width_V_read_reg_660.read().is_01())? sc_lv<1>(): sc_lv<1>(i_op_assign_2_reg_302.read() == width_V_read_reg_660.read());
}

void BatchNorm::thread_gamma_V6_sum_cast_fu_469_p1() {
    gamma_V6_sum_cast_fu_469_p1 = esl_zext<64,32>(gamma_V6_sum_fu_464_p2.read());
}

void BatchNorm::thread_gamma_V6_sum_fu_464_p2() {
    gamma_V6_sum_fu_464_p2 = (!tmp_cast_165_fu_430_p1.read().is_01() || !tmp_36_cast_reg_690.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_cast_165_fu_430_p1.read()) + sc_biguint<32>(tmp_36_cast_reg_690.read()));
}

void BatchNorm::thread_gmem_ARADDR() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
             esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1))) {
            gmem_ARADDR = gmem_addr_3_reg_752.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
            gmem_ARADDR = gmem_addr_2_reg_746.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            gmem_ARADDR = gmem_addr_1_reg_740.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
            gmem_ARADDR = gmem_addr_reg_734.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
            gmem_ARADDR = gmem_addr_5_reg_791.read();
        } else {
            gmem_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        gmem_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void BatchNorm::thread_gmem_ARVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
          esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())))) {
        gmem_ARVALID = ap_const_logic_1;
    } else {
        gmem_ARVALID = ap_const_logic_0;
    }
}

void BatchNorm::thread_gmem_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_AWREADY.read()))) {
        gmem_AWVALID = ap_const_logic_1;
    } else {
        gmem_AWVALID = ap_const_logic_0;
    }
}

void BatchNorm::thread_gmem_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read()) && 
         esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
        gmem_BREADY = ap_const_logic_1;
    } else {
        gmem_BREADY = ap_const_logic_0;
    }
}

void BatchNorm::thread_gmem_RREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_ARREADY.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
          esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
          esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()) && 
          esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()) && 
          esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1)))) {
        gmem_RREADY = ap_const_logic_1;
    } else {
        gmem_RREADY = ap_const_logic_0;
    }
}

void BatchNorm::thread_gmem_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_WREADY.read()))) {
        gmem_WVALID = ap_const_logic_1;
    } else {
        gmem_WVALID = ap_const_logic_0;
    }
}

void BatchNorm::thread_gmem_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        gmem_blk_n_AR = m_axi_gmem_ARREADY.read();
    } else {
        gmem_blk_n_AR = ap_const_logic_1;
    }
}

void BatchNorm::thread_gmem_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        gmem_blk_n_AW = m_axi_gmem_AWREADY.read();
    } else {
        gmem_blk_n_AW = ap_const_logic_1;
    }
}

void BatchNorm::thread_gmem_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read())) {
        gmem_blk_n_B = m_axi_gmem_BVALID.read();
    } else {
        gmem_blk_n_B = ap_const_logic_1;
    }
}

void BatchNorm::thread_gmem_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()))) {
        gmem_blk_n_R = m_axi_gmem_RVALID.read();
    } else {
        gmem_blk_n_R = ap_const_logic_1;
    }
}

void BatchNorm::thread_gmem_blk_n_W() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read())) {
        gmem_blk_n_W = m_axi_gmem_WREADY.read();
    } else {
        gmem_blk_n_W = ap_const_logic_1;
    }
}

void BatchNorm::thread_grp_fu_614_ap_start() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        grp_fu_614_ap_start = ap_const_logic_1;
    } else {
        grp_fu_614_ap_start = ap_const_logic_0;
    }
}

void BatchNorm::thread_grp_fu_614_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()))) {
        grp_fu_614_ce = ap_const_logic_1;
    } else {
        grp_fu_614_ce = ap_const_logic_0;
    }
}

void BatchNorm::thread_grp_fu_614_p0() {
    grp_fu_614_p0 = esl_concat<17,8>(ret_V_5_reg_807.read(), ap_const_lv8_0);
}

void BatchNorm::thread_grp_fu_614_p1() {
    grp_fu_614_p1 =  (sc_lv<14>) (grp_fu_614_p10.read());
}

void BatchNorm::thread_grp_fu_614_p10() {
    grp_fu_614_p10 = esl_zext<25,13>(grp_sqrt_fixed_17_9_s_fu_313_ap_return.read());
}

void BatchNorm::thread_grp_fu_651_p2() {
    grp_fu_651_p2 = esl_concat<16,8>(p_Val2_9_reg_837.read(), ap_const_lv8_0);
}

void BatchNorm::thread_h_fu_508_p2() {
    h_fu_508_p2 = (!i_op_assign_1_reg_279.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(i_op_assign_1_reg_279.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void BatchNorm::thread_i_op_assign_2_cast3_fu_542_p1() {
    i_op_assign_2_cast3_fu_542_p1 = esl_zext<32,16>(i_op_assign_2_reg_302.read());
}

void BatchNorm::thread_in_data_V2_sum1_cast_fu_581_p1() {
    in_data_V2_sum1_cast_fu_581_p1 = esl_zext<64,41>(in_data_V2_sum1_fu_576_p2.read());
}

void BatchNorm::thread_in_data_V2_sum1_fu_576_p2() {
    in_data_V2_sum1_fu_576_p2 = (!tmp_38_cast_reg_700.read().is_01() || !tmp_19_cast_cast_fu_572_p1.read().is_01())? sc_lv<41>(): (sc_biguint<41>(tmp_38_cast_reg_700.read()) + sc_biguint<41>(tmp_19_cast_cast_fu_572_p1.read()));
}

void BatchNorm::thread_lhs_V_fu_591_p1() {
    lhs_V_fu_591_p1 = esl_sext<17,16>(x_V_reg_797.read());
}

void BatchNorm::thread_next_mul1_fu_414_p2() {
    next_mul1_fu_414_p2 = (!ret_V_reg_268.read().is_01() || !rhs_V_cast_reg_705.read().is_01())? sc_lv<24>(): (sc_biguint<24>(ret_V_reg_268.read()) + sc_biguint<24>(rhs_V_cast_reg_705.read()));
}

void BatchNorm::thread_next_mul_fu_498_p2() {
    next_mul_fu_498_p2 = (!ret_V_2_reg_290.read().is_01() || !rhs_V_2_cast_reg_715.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ret_V_2_reg_290.read()) + sc_biguint<32>(rhs_V_2_cast_reg_715.read()));
}

void BatchNorm::thread_normalized_V_fu_620_p1() {
    normalized_V_fu_620_p1 = tmp_27_reg_832.read().range(16-1, 0);
}

void BatchNorm::thread_out_data_V4_sum_cast_fu_532_p1() {
    out_data_V4_sum_cast_fu_532_p1 = esl_zext<64,41>(out_data_V4_sum_fu_527_p2.read());
}

void BatchNorm::thread_out_data_V4_sum_fu_527_p2() {
    out_data_V4_sum_fu_527_p2 = (!tmp_28_cast_fu_523_p1.read().is_01() || !tmp_37_cast_reg_695.read().is_01())? sc_lv<41>(): (sc_biguint<41>(tmp_28_cast_fu_523_p1.read()) + sc_biguint<41>(tmp_37_cast_reg_695.read()));
}

void BatchNorm::thread_ret_V_1_fu_646_p0() {
    ret_V_1_fu_646_p0 =  (sc_lv<16>) (rhs_V_1_cast_reg_710.read());
}

void BatchNorm::thread_ret_V_1_fu_646_p1() {
    ret_V_1_fu_646_p1 =  (sc_lv<24>) (ret_V_1_fu_646_p10.read());
}

void BatchNorm::thread_ret_V_1_fu_646_p10() {
    ret_V_1_fu_646_p10 = esl_zext<40,24>(ret_V_reg_268.read());
}

void BatchNorm::thread_ret_V_5_fu_597_p2() {
    ret_V_5_fu_597_p2 = (!lhs_V_fu_591_p1.read().is_01() || !rhs_V_fu_594_p1.read().is_01())? sc_lv<17>(): (sc_bigint<17>(lhs_V_fu_591_p1.read()) - sc_bigint<17>(rhs_V_fu_594_p1.read()));
}

void BatchNorm::thread_rhs_V_1_cast_fu_406_p1() {
    rhs_V_1_cast_fu_406_p1 = esl_zext<40,16>(width_V.read());
}

void BatchNorm::thread_rhs_V_2_cast_fu_410_p1() {
    rhs_V_2_cast_fu_410_p1 = esl_zext<32,16>(width_V.read());
}

void BatchNorm::thread_rhs_V_cast_fu_402_p1() {
    rhs_V_cast_fu_402_p1 = esl_zext<24,16>(height_V.read());
}

void BatchNorm::thread_rhs_V_fu_594_p1() {
    rhs_V_fu_594_p1 = esl_sext<17,16>(p_Val2_5_reg_802.read());
}

void BatchNorm::thread_running_mean_V10_sum_1_fu_439_p1() {
    running_mean_V10_sum_1_fu_439_p1 = esl_zext<64,32>(running_mean_V10_sum_fu_434_p2.read());
}

void BatchNorm::thread_running_mean_V10_sum_fu_434_p2() {
    running_mean_V10_sum_fu_434_p2 = (!tmp_cast_165_fu_430_p1.read().is_01() || !tmp_34_cast_reg_680.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_cast_165_fu_430_p1.read()) + sc_biguint<32>(tmp_34_cast_reg_680.read()));
}

void BatchNorm::thread_running_var_V12_sum_fu_449_p2() {
    running_var_V12_sum_fu_449_p2 = (!tmp_cast_165_fu_430_p1.read().is_01() || !tmp_cast_reg_675.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_cast_165_fu_430_p1.read()) + sc_biguint<32>(tmp_cast_reg_675.read()));
}

void BatchNorm::thread_running_var_V12_sum_s_fu_454_p1() {
    running_var_V12_sum_s_fu_454_p1 = esl_zext<64,32>(running_var_V12_sum_fu_449_p2.read());
}

void BatchNorm::thread_tmp1_cast_fu_563_p1() {
    tmp1_cast_fu_563_p1 = esl_zext<40,32>(tmp1_fu_557_p2.read());
}

void BatchNorm::thread_tmp1_fu_557_p2() {
    tmp1_fu_557_p2 = (!i_op_assign_2_cast3_fu_542_p1.read().is_01() || !ret_V_2_reg_290.read().is_01())? sc_lv<32>(): (sc_biguint<32>(i_op_assign_2_cast3_fu_542_p1.read()) + sc_biguint<32>(ret_V_2_reg_290.read()));
}

void BatchNorm::thread_tmp_19_cast_cast_fu_572_p1() {
    tmp_19_cast_cast_fu_572_p1 = esl_zext<41,40>(tmp_19_fu_567_p2.read());
}

void BatchNorm::thread_tmp_19_fu_567_p2() {
    tmp_19_fu_567_p2 = (!ret_V_1_reg_758.read().is_01() || !tmp1_cast_fu_563_p1.read().is_01())? sc_lv<40>(): (sc_biguint<40>(ret_V_1_reg_758.read()) + sc_biguint<40>(tmp1_cast_fu_563_p1.read()));
}

void BatchNorm::thread_tmp_24_fu_514_p1() {
    tmp_24_fu_514_p1 = esl_zext<40,32>(ret_V_2_reg_290.read());
}

void BatchNorm::thread_tmp_26_fu_518_p2() {
    tmp_26_fu_518_p2 = (!ret_V_1_reg_758.read().is_01() || !tmp_24_fu_514_p1.read().is_01())? sc_lv<40>(): (sc_biguint<40>(ret_V_1_reg_758.read()) + sc_biguint<40>(tmp_24_fu_514_p1.read()));
}

void BatchNorm::thread_tmp_28_cast_fu_523_p1() {
    tmp_28_cast_fu_523_p1 = esl_zext<41,40>(tmp_26_fu_518_p2.read());
}

void BatchNorm::thread_tmp_34_cast_fu_342_p1() {
    tmp_34_cast_fu_342_p1 = esl_zext<32,31>(tmp_43_fu_332_p4.read());
}

void BatchNorm::thread_tmp_35_cast_fu_356_p1() {
    tmp_35_cast_fu_356_p1 = esl_zext<32,31>(tmp_44_fu_346_p4.read());
}

void BatchNorm::thread_tmp_36_cast_fu_370_p1() {
    tmp_36_cast_fu_370_p1 = esl_zext<32,31>(tmp_45_fu_360_p4.read());
}

void BatchNorm::thread_tmp_37_cast_fu_384_p1() {
    tmp_37_cast_fu_384_p1 = esl_zext<41,31>(tmp_46_fu_374_p4.read());
}

void BatchNorm::thread_tmp_38_cast_fu_398_p1() {
    tmp_38_cast_fu_398_p1 = esl_zext<41,31>(tmp_47_fu_388_p4.read());
}

void BatchNorm::thread_tmp_43_fu_332_p4() {
    tmp_43_fu_332_p4 = running_mean_V.read().range(31, 1);
}

void BatchNorm::thread_tmp_44_fu_346_p4() {
    tmp_44_fu_346_p4 = beta_V.read().range(31, 1);
}

void BatchNorm::thread_tmp_45_fu_360_p4() {
    tmp_45_fu_360_p4 = gamma_V.read().range(31, 1);
}

void BatchNorm::thread_tmp_46_fu_374_p4() {
    tmp_46_fu_374_p4 = out_data_V.read().range(31, 1);
}

void BatchNorm::thread_tmp_47_fu_388_p4() {
    tmp_47_fu_388_p4 = in_data_V.read().range(31, 1);
}

void BatchNorm::thread_tmp_cast_165_fu_430_p1() {
    tmp_cast_165_fu_430_p1 = esl_zext<32,8>(i_op_assign_reg_257.read());
}

void BatchNorm::thread_tmp_cast_fu_328_p1() {
    tmp_cast_fu_328_p1 = esl_zext<32,31>(tmp_fu_318_p4.read());
}

void BatchNorm::thread_tmp_fu_318_p4() {
    tmp_fu_318_p4 = running_var_V.read().range(31, 1);
}

void BatchNorm::thread_w_fu_551_p2() {
    w_fu_551_p2 = (!i_op_assign_2_reg_302.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(i_op_assign_2_reg_302.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void BatchNorm::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond2_fu_419_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond1_fu_503_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(exitcond_fu_546_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state54;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_ARREADY.read())))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 4398046511104 : 
            ap_NS_fsm = ap_ST_fsm_state44;
            break;
        case 8796093022208 : 
            ap_NS_fsm = ap_ST_fsm_state45;
            break;
        case 17592186044416 : 
            ap_NS_fsm = ap_ST_fsm_state46;
            break;
        case 35184372088832 : 
            ap_NS_fsm = ap_ST_fsm_state47;
            break;
        case 70368744177664 : 
            ap_NS_fsm = ap_ST_fsm_state48;
            break;
        case 140737488355328 : 
            ap_NS_fsm = ap_ST_fsm_state49;
            break;
        case 281474976710656 : 
            ap_NS_fsm = ap_ST_fsm_state50;
            break;
        case 562949953421312 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()) && esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state51;
            } else {
                ap_NS_fsm = ap_ST_fsm_state50;
            }
            break;
        case 1125899906842624 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()) && esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state52;
            } else {
                ap_NS_fsm = ap_ST_fsm_state51;
            }
            break;
        case 2251799813685248 : 
            ap_NS_fsm = ap_ST_fsm_state53;
            break;
        case 4503599627370496 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_WREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state53;
            }
            break;
        case 9007199254740992 : 
            ap_NS_fsm = ap_ST_fsm_state55;
            break;
        case 18014398509481984 : 
            ap_NS_fsm = ap_ST_fsm_state56;
            break;
        case 36028797018963968 : 
            ap_NS_fsm = ap_ST_fsm_state57;
            break;
        case 72057594037927936 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read()) && esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state57;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<57>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void BatchNorm::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_gmem_AWVALID\" :  \"" << m_axi_gmem_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_AWREADY\" :  \"" << m_axi_gmem_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWADDR\" :  \"" << m_axi_gmem_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWID\" :  \"" << m_axi_gmem_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLEN\" :  \"" << m_axi_gmem_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWSIZE\" :  \"" << m_axi_gmem_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWBURST\" :  \"" << m_axi_gmem_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLOCK\" :  \"" << m_axi_gmem_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWCACHE\" :  \"" << m_axi_gmem_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWPROT\" :  \"" << m_axi_gmem_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWQOS\" :  \"" << m_axi_gmem_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWREGION\" :  \"" << m_axi_gmem_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWUSER\" :  \"" << m_axi_gmem_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WVALID\" :  \"" << m_axi_gmem_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_WREADY\" :  \"" << m_axi_gmem_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WDATA\" :  \"" << m_axi_gmem_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WSTRB\" :  \"" << m_axi_gmem_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WLAST\" :  \"" << m_axi_gmem_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WID\" :  \"" << m_axi_gmem_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WUSER\" :  \"" << m_axi_gmem_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARVALID\" :  \"" << m_axi_gmem_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_ARREADY\" :  \"" << m_axi_gmem_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARADDR\" :  \"" << m_axi_gmem_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARID\" :  \"" << m_axi_gmem_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLEN\" :  \"" << m_axi_gmem_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARSIZE\" :  \"" << m_axi_gmem_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARBURST\" :  \"" << m_axi_gmem_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLOCK\" :  \"" << m_axi_gmem_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARCACHE\" :  \"" << m_axi_gmem_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARPROT\" :  \"" << m_axi_gmem_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARQOS\" :  \"" << m_axi_gmem_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARREGION\" :  \"" << m_axi_gmem_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARUSER\" :  \"" << m_axi_gmem_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RVALID\" :  \"" << m_axi_gmem_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_RREADY\" :  \"" << m_axi_gmem_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RDATA\" :  \"" << m_axi_gmem_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RLAST\" :  \"" << m_axi_gmem_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RID\" :  \"" << m_axi_gmem_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RUSER\" :  \"" << m_axi_gmem_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RRESP\" :  \"" << m_axi_gmem_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BVALID\" :  \"" << m_axi_gmem_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_BREADY\" :  \"" << m_axi_gmem_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BRESP\" :  \"" << m_axi_gmem_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BID\" :  \"" << m_axi_gmem_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BUSER\" :  \"" << m_axi_gmem_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

