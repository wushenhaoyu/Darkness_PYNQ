-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv2D is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of Conv2D is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Conv2D,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=11,HLS_SYN_FF=2720,HLS_SYN_LUT=2162,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (47 downto 0) := "000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (47 downto 0) := "000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (47 downto 0) := "000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (47 downto 0) := "000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (47 downto 0) := "000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (47 downto 0) := "000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (47 downto 0) := "000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (47 downto 0) := "000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (47 downto 0) := "000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (47 downto 0) := "001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (47 downto 0) := "010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (47 downto 0) := "100000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_channel_V : STD_LOGIC_VECTOR (15 downto 0);
    signal out_channel_V : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_size_V : STD_LOGIC_VECTOR (7 downto 0);
    signal stride_V : STD_LOGIC_VECTOR (7 downto 0);
    signal padding_V : STD_LOGIC_VECTOR (7 downto 0);
    signal input_width_V : STD_LOGIC_VECTOR (7 downto 0);
    signal input_height_V : STD_LOGIC_VECTOR (7 downto 0);
    signal in_data_V : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_V : STD_LOGIC_VECTOR (31 downto 0);
    signal biases_V : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_V : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal exitcond1_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal input_height_V_read_reg_1038 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_width_V_read_reg_1044 : STD_LOGIC_VECTOR (7 downto 0);
    signal padding_V_read_reg_1051 : STD_LOGIC_VECTOR (7 downto 0);
    signal stride_V_read_reg_1056 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_size_V_read_reg_1061 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_channel_V_read_reg_1072 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_channel_V_read_reg_1077 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_1083 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_1_reg_1088 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_3_reg_1093 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_9_reg_1098 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_tr4_fu_515_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_cast1_fu_555_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_cast1_reg_1119 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_9_cast1_fu_558_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_cast1_reg_1124 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_cast_fu_561_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_24_cast_reg_1129 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_25_cast_fu_564_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_25_cast_reg_1134 : STD_LOGIC_VECTOR (32 downto 0);
    signal output_width_fu_571_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal output_width_reg_1139 : STD_LOGIC_VECTOR (12 downto 0);
    signal output_width_cast_fu_577_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_width_cast_reg_1144 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_height_fu_585_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal output_height_reg_1149 : STD_LOGIC_VECTOR (12 downto 0);
    signal output_height_cast_c_fu_591_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal output_height_cast_c_reg_1154 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_cast_cast_fu_595_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_cast_cast_reg_1159 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_1_cast_fu_598_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_1_cast_reg_1165 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_3_cast_fu_601_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_3_cast_reg_1171 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_4_cast_fu_604_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_4_cast_reg_1176 : STD_LOGIC_VECTOR (19 downto 0);
    signal rhs_V_3_cast_fu_607_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal rhs_V_3_cast_reg_1181 : STD_LOGIC_VECTOR (23 downto 0);
    signal rhs_V_4_cast_fu_610_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_4_cast_reg_1186 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_5_cast_cast_fu_613_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal rhs_V_5_cast_cast_reg_1191 : STD_LOGIC_VECTOR (27 downto 0);
    signal rhs_V_9_cast_fu_616_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal rhs_V_9_cast_reg_1196 : STD_LOGIC_VECTOR (39 downto 0);
    signal rhs_V_11_cast_fu_619_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_11_cast_reg_1201 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_2_cast1_fu_622_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_2_cast1_reg_1206 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_2_cast_fu_625_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal rhs_V_2_cast_reg_1211 : STD_LOGIC_VECTOR (23 downto 0);
    signal rhs_V_10_cast_fu_628_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_10_cast_reg_1216 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_8_cast_fu_631_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_8_cast_reg_1221 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_634_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_1226 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul1_fu_638_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul1_reg_1231 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal oc_fu_652_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal oc_reg_1239 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_1006_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_8_reg_1244 : STD_LOGIC_VECTOR (27 downto 0);
    signal exitcond3_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_reg_1249 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_3_fu_681_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_3_reg_1255 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_4_fu_689_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal ret_V_4_reg_1260 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal phi_mul20_cast_fu_694_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal phi_mul20_cast_reg_1265 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal next_mul2_fu_698_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal next_mul2_reg_1270 : STD_LOGIC_VECTOR (18 downto 0);
    signal oh_fu_716_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal oh_reg_1278 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_7_fu_731_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_1283 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_1_reg_1288 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_4_fu_754_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_4_reg_1294 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_sig_ioackin_gmem_AWREADY : STD_LOGIC;
    signal next_mul3_fu_762_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal next_mul3_reg_1299 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ow_fu_776_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ow_reg_1307 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_12_fu_782_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_12_reg_1312 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_11_fu_771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul4_fu_787_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal next_mul4_reg_1317 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_sig_ioackin_gmem_ARREADY : STD_LOGIC;
    signal ap_block_state23_io : BOOLEAN;
    signal next_mul5_fu_792_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal next_mul5_reg_1322 : STD_LOGIC_VECTOR (23 downto 0);
    signal ic_fu_802_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ic_reg_1330 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_7_cast_fu_812_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal lhs_V_7_cast_reg_1335 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1017_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp2_reg_1340 : STD_LOGIC_VECTOR (47 downto 0);
    signal next_mul_fu_819_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul_reg_1345 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal kh_fu_833_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal kh_reg_1353 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_reg_1358 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_fu_828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_852_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_1362 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1023_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_s_reg_1367 : STD_LOGIC_VECTOR (32 downto 0);
    signal kw_fu_870_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal kw_reg_1375 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal or_cond5_fu_910_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond5_reg_1380 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_865_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_2_reg_1384 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_3_reg_1390 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_2_read_reg_1396 : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_addr_3_read_reg_1401 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_reg_1406 : STD_LOGIC_VECTOR (15 downto 0);
    signal addconv_fu_1001_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal addconv_reg_1411 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal i_op_assign_reg_251 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_10_reg_262 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_4_reg_273 : STD_LOGIC_VECTOR (11 downto 0);
    signal phi_mul2_reg_284 : STD_LOGIC_VECTOR (18 downto 0);
    signal i_op_assign_5_reg_295 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_ioackin_gmem_WREADY : STD_LOGIC;
    signal phi_mul3_reg_306 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_s_reg_317 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_1_reg_329 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_5_reg_340 : STD_LOGIC_VECTOR (23 downto 0);
    signal ret_V_11_reg_351 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_0367_2_reg_362 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_2_reg_374 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_12_reg_385 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_2_reg_397 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_p_Val2_2_be_phi_fu_424_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal i_op_assign_3_reg_409 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_2_be_reg_420 : STD_LOGIC_VECTOR (15 downto 0);
    signal biases_V6_sum_cast_fu_667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_data_V8_sum_cast_fu_744_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_data_V2_sum_cast_fu_952_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal weights_V4_sum_cast_fu_967_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gmem_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_WREADY : STD_LOGIC := '0';
    signal lhs_V_fu_475_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_fu_479_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_1_fu_489_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_fu_483_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_1_cast_fu_497_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_cast_fu_501_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_2_tr_fu_505_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_519_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_519_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_V_1_fu_525_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_2_fu_529_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_7_cast_fu_535_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_5_tr_fu_539_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_549_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_549_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_519_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_cast_fu_567_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_549_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_cast_fu_581_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_1_cast1_fu_658_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal biases_V6_sum_fu_662_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_3_fu_681_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_3_fu_681_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_4_fu_689_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_4_fu_689_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal i_op_assign_4_cast_fu_707_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_op_assign_4_cast1_fu_703_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_5_fu_722_p2 : STD_LOGIC_VECTOR (27 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_5_fu_722_p2 : signal is "no";
    signal tmp_7_fu_731_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_7_fu_731_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_10_cast_fu_736_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal out_data_V8_sum_fu_739_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal i_op_assign_5_cast_fu_767_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal phi_mul17_cast_fu_758_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal ret_V_7_fu_1011_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_2_cast7_fu_824_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal ih_fu_839_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal i_op_assign_3_cast5_fu_861_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal iw_fu_876_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_15_fu_885_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_893_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal iw_cast_fu_881_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_7_cast_fu_915_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_29_cast_fu_924_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_fu_928_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_cast_fu_934_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_17_fu_938_p2 : STD_LOGIC_VECTOR (47 downto 0);
    attribute use_dsp48 of tmp_17_fu_938_p2 : signal is "no";
    signal ret_V_9_fu_919_p2 : STD_LOGIC_VECTOR (32 downto 0);
    attribute use_dsp48 of ret_V_9_fu_919_p2 : signal is "no";
    signal in_data_V2_sum_fu_947_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_32_cast_cast_fu_943_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal weights_V4_sum_fu_962_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_1029_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_8_fu_1006_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_1006_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ret_V_7_fu_1011_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal ret_V_7_fu_1011_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1017_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1017_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1023_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1023_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1029_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_519_ap_start : STD_LOGIC;
    signal grp_fu_519_ap_done : STD_LOGIC;
    signal grp_fu_549_ap_start : STD_LOGIC;
    signal grp_fu_549_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_1017_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_3_fu_681_p10 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_4_fu_689_p10 : STD_LOGIC_VECTOR (47 downto 0);
    signal ret_V_7_fu_1011_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1006_p00 : STD_LOGIC_VECTOR (27 downto 0);

    component Conv2D_sdiv_12s_9bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component Conv2D_mul_mul_16cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component Conv2D_mul_mul_24dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv2D_mac_muladdeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (47 downto 0);
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component Conv2D_mac_muladdfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component Conv2D_mac_muladdg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component Conv2D_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        in_channel_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_channel_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        kernel_size_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        stride_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        padding_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_width_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_height_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        in_data_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        biases_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_data_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv2D_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    Conv2D_AXILiteS_s_axi_U : component Conv2D_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        in_channel_V => in_channel_V,
        out_channel_V => out_channel_V,
        kernel_size_V => kernel_size_V,
        stride_V => stride_V,
        padding_V => padding_V,
        input_width_V => input_width_V,
        input_height_V => input_height_V,
        in_data_V => in_data_V,
        weights_V => weights_V,
        biases_V => biases_V,
        out_data_V => out_data_V);

    Conv2D_gmem_m_axi_U : component Conv2D_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_1_reg_1288,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => tmp_10_reg_1226,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => addconv_reg_1411,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_3,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    Conv2D_sdiv_12s_9bkb_U1 : component Conv2D_sdiv_12s_9bkb
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 12,
        din1_WIDTH => 9,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_519_ap_start,
        done => grp_fu_519_ap_done,
        din0 => grp_fu_519_p0,
        din1 => grp_fu_519_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_519_p2);

    Conv2D_sdiv_12s_9bkb_U2 : component Conv2D_sdiv_12s_9bkb
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 12,
        din1_WIDTH => 9,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_549_ap_start,
        done => grp_fu_549_ap_done,
        din0 => grp_fu_549_p0,
        din1 => grp_fu_549_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_549_p2);

    Conv2D_mul_mul_16cud_U3 : component Conv2D_mul_mul_16cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 28)
    port map (
        din0 => tmp_8_fu_1006_p0,
        din1 => tmp_8_fu_1006_p1,
        dout => tmp_8_fu_1006_p2);

    Conv2D_mul_mul_24dEe_U4 : component Conv2D_mul_mul_24dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 8,
        dout_WIDTH => 32)
    port map (
        din0 => ret_V_7_fu_1011_p0,
        din1 => ret_V_7_fu_1011_p1,
        dout => ret_V_7_fu_1011_p2);

    Conv2D_mac_muladdeOg_U5 : component Conv2D_mac_muladdeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 8,
        din2_WIDTH => 48,
        dout_WIDTH => 48)
    port map (
        din0 => grp_fu_1017_p0,
        din1 => grp_fu_1017_p1,
        din2 => ret_V_4_reg_1260,
        dout => grp_fu_1017_p3);

    Conv2D_mac_muladdfYi_U6 : component Conv2D_mac_muladdfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 20,
        din2_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        din0 => grp_fu_1023_p0,
        din1 => ih_fu_839_p2,
        din2 => grp_fu_1023_p2,
        dout => grp_fu_1023_p3);

    Conv2D_mac_muladdg8j_U7 : component Conv2D_mac_muladdg8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        din0 => gmem_addr_2_read_reg_1396,
        din1 => gmem_addr_3_read_reg_1401,
        din2 => grp_fu_1029_p2,
        dout => grp_fu_1029_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((ap_const_boolean_0 = ap_block_state23_io) and (ap_const_logic_1 = ap_CS_fsm_state23) and (exitcond1_fu_797_p2 = ap_const_lv1_1)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
                elsif ((((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23) and (exitcond1_fu_797_p2 = ap_const_lv1_1)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                    if ((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
                    elsif ((gmem_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                    if ((ap_sig_ioackin_gmem_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
                    elsif ((gmem_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i_op_assign_1_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (exitcond2_fu_828_p2 = ap_const_lv1_1))) then 
                i_op_assign_1_reg_329 <= ic_reg_1330;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (tmp_11_fu_771_p2 = ap_const_lv1_1))) then 
                i_op_assign_1_reg_329 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    i_op_assign_2_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (exitcond_fu_865_p2 = ap_const_lv1_1))) then 
                i_op_assign_2_reg_374 <= kh_reg_1353;
            elsif (((ap_const_boolean_0 = ap_block_state23_io) and (ap_const_logic_1 = ap_CS_fsm_state23) and (exitcond1_fu_797_p2 = ap_const_lv1_0))) then 
                i_op_assign_2_reg_374 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_op_assign_3_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                i_op_assign_3_reg_409 <= kw_reg_1375;
            elsif (((exitcond2_fu_828_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                i_op_assign_3_reg_409 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_op_assign_4_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                i_op_assign_4_reg_273 <= ap_const_lv12_0;
            elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                i_op_assign_4_reg_273 <= oh_reg_1278;
            end if; 
        end if;
    end process;

    i_op_assign_5_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                i_op_assign_5_reg_295 <= ap_const_lv12_0;
            elsif (((ap_sig_ioackin_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                i_op_assign_5_reg_295 <= ow_reg_1307;
            end if; 
        end if;
    end process;

    i_op_assign_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_711_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                i_op_assign_reg_251 <= oc_reg_1239;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i_op_assign_reg_251 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    p_0367_2_reg_362_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (exitcond_fu_865_p2 = ap_const_lv1_1))) then 
                p_0367_2_reg_362 <= p_Val2_2_reg_397;
            elsif (((ap_const_boolean_0 = ap_block_state23_io) and (ap_const_logic_1 = ap_CS_fsm_state23) and (exitcond1_fu_797_p2 = ap_const_lv1_0))) then 
                p_0367_2_reg_362 <= p_Val2_s_reg_317;
            end if; 
        end if;
    end process;

    p_Val2_2_be_reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((exitcond_fu_865_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_13_reg_1358 = ap_const_lv1_1)) or ((exitcond_fu_865_p2 = ap_const_lv1_0) and (or_cond5_fu_910_p2 = ap_const_lv1_0) and (tmp_13_reg_1358 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25)))) then 
                p_Val2_2_be_reg_420 <= p_Val2_2_reg_397;
            elsif (((tmp_13_reg_1358 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state35) and (or_cond5_reg_1380 = ap_const_lv1_1))) then 
                p_Val2_2_be_reg_420 <= grp_fu_1029_p3(23 downto 8);
            end if; 
        end if;
    end process;

    p_Val2_2_reg_397_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                p_Val2_2_reg_397 <= ap_phi_mux_p_Val2_2_be_phi_fu_424_p6;
            elsif (((exitcond2_fu_828_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                p_Val2_2_reg_397 <= p_0367_2_reg_362;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (exitcond2_fu_828_p2 = ap_const_lv1_1))) then 
                p_Val2_s_reg_317 <= p_0367_2_reg_362;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (tmp_11_fu_771_p2 = ap_const_lv1_1))) then 
                p_Val2_s_reg_317 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    phi_mul2_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                phi_mul2_reg_284 <= ap_const_lv19_0;
            elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                phi_mul2_reg_284 <= next_mul2_reg_1270;
            end if; 
        end if;
    end process;

    phi_mul3_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                phi_mul3_reg_306 <= ap_const_lv19_0;
            elsif (((ap_sig_ioackin_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                phi_mul3_reg_306 <= next_mul3_reg_1299;
            end if; 
        end if;
    end process;

    ret_V_10_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_711_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                ret_V_10_reg_262 <= next_mul1_reg_1231;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                ret_V_10_reg_262 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    ret_V_11_reg_351_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (exitcond2_fu_828_p2 = ap_const_lv1_1))) then 
                ret_V_11_reg_351 <= next_mul4_reg_1317;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (tmp_11_fu_771_p2 = ap_const_lv1_1))) then 
                ret_V_11_reg_351 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;

    ret_V_12_reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (exitcond_fu_865_p2 = ap_const_lv1_1))) then 
                ret_V_12_reg_385 <= next_mul_reg_1345;
            elsif (((ap_const_boolean_0 = ap_block_state23_io) and (ap_const_logic_1 = ap_CS_fsm_state23) and (exitcond1_fu_797_p2 = ap_const_lv1_0))) then 
                ret_V_12_reg_385 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    ret_V_5_reg_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (exitcond2_fu_828_p2 = ap_const_lv1_1))) then 
                ret_V_5_reg_340 <= next_mul5_reg_1322;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (tmp_11_fu_771_p2 = ap_const_lv1_1))) then 
                ret_V_5_reg_340 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                addconv_reg_1411 <= addconv_fu_1001_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                gmem_addr_1_reg_1288 <= out_data_V8_sum_cast_fu_744_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                gmem_addr_2_read_reg_1396 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_865_p2 = ap_const_lv1_0) and (tmp_13_reg_1358 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25) and (or_cond5_fu_910_p2 = ap_const_lv1_1))) then
                gmem_addr_2_reg_1384 <= in_data_V2_sum_cast_fu_952_p1(32 - 1 downto 0);
                gmem_addr_3_reg_1390 <= weights_V4_sum_cast_fu_967_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                gmem_addr_3_read_reg_1401 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_647_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                gmem_addr_reg_1249 <= biases_V6_sum_cast_fu_667_p1(32 - 1 downto 0);
                ret_V_3_reg_1255 <= ret_V_3_fu_681_p2;
                tmp_8_reg_1244 <= tmp_8_fu_1006_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state23_io) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                ic_reg_1330 <= ic_fu_802_p2;
                next_mul4_reg_1317 <= next_mul4_fu_787_p2;
                next_mul5_reg_1322 <= next_mul5_fu_792_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                in_channel_V_read_reg_1077 <= in_channel_V;
                input_height_V_read_reg_1038 <= input_height_V;
                input_width_V_read_reg_1044 <= input_width_V;
                kernel_size_V_read_reg_1061 <= kernel_size_V;
                out_channel_V_read_reg_1072 <= out_channel_V;
                padding_V_read_reg_1051 <= padding_V;
                stride_V_read_reg_1056 <= stride_V;
                tmp_1_reg_1088 <= biases_V(31 downto 1);
                tmp_3_reg_1093 <= weights_V(31 downto 1);
                tmp_9_reg_1098 <= in_data_V(31 downto 1);
                tmp_reg_1083 <= out_data_V(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                kh_reg_1353 <= kh_fu_833_p2;
                next_mul_reg_1345 <= next_mul_fu_819_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                kw_reg_1375 <= kw_fu_870_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state23_io) and (ap_const_logic_1 = ap_CS_fsm_state23) and (exitcond1_fu_797_p2 = ap_const_lv1_0))) then
                    lhs_V_7_cast_reg_1335(31 downto 0) <= lhs_V_7_cast_fu_812_p1(31 downto 0);
                tmp2_reg_1340 <= grp_fu_1017_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                next_mul1_reg_1231 <= next_mul1_fu_638_p2;
                oc_reg_1239 <= oc_fu_652_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                next_mul2_reg_1270 <= next_mul2_fu_698_p2;
                oh_reg_1278 <= oh_fu_716_p2;
                    phi_mul20_cast_reg_1265(18 downto 0) <= phi_mul20_cast_fu_694_p1(18 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                next_mul3_reg_1299 <= next_mul3_fu_762_p2;
                ow_reg_1307 <= ow_fu_776_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_865_p2 = ap_const_lv1_0) and (tmp_13_reg_1358 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                or_cond5_reg_1380 <= or_cond5_fu_910_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                output_height_cast_c_reg_1154 <= output_height_cast_c_fu_591_p1;
                output_height_reg_1149 <= output_height_fu_585_p2;
                output_width_cast_reg_1144 <= output_width_cast_fu_577_p1;
                output_width_reg_1139 <= output_width_fu_571_p2;
                    rhs_V_10_cast_reg_1216(7 downto 0) <= rhs_V_10_cast_fu_628_p1(7 downto 0);
                    rhs_V_11_cast_reg_1201(7 downto 0) <= rhs_V_11_cast_fu_619_p1(7 downto 0);
                    rhs_V_2_cast1_reg_1206(7 downto 0) <= rhs_V_2_cast1_fu_622_p1(7 downto 0);
                    rhs_V_2_cast_reg_1211(7 downto 0) <= rhs_V_2_cast_fu_625_p1(7 downto 0);
                    rhs_V_3_cast_reg_1181(7 downto 0) <= rhs_V_3_cast_fu_607_p1(7 downto 0);
                    rhs_V_4_cast_reg_1186(7 downto 0) <= rhs_V_4_cast_fu_610_p1(7 downto 0);
                    rhs_V_5_cast_cast_reg_1191(7 downto 0) <= rhs_V_5_cast_cast_fu_613_p1(7 downto 0);
                    rhs_V_8_cast_reg_1221(15 downto 0) <= rhs_V_8_cast_fu_631_p1(15 downto 0);
                    rhs_V_9_cast_reg_1196(7 downto 0) <= rhs_V_9_cast_fu_616_p1(7 downto 0);
                    tmp_10_reg_1226(12 downto 0) <= tmp_10_fu_634_p1(12 downto 0);
                    tmp_1_cast_reg_1165(7 downto 0) <= tmp_1_cast_fu_598_p1(7 downto 0);
                    tmp_24_cast_reg_1129(30 downto 0) <= tmp_24_cast_fu_561_p1(30 downto 0);
                    tmp_25_cast_reg_1134(30 downto 0) <= tmp_25_cast_fu_564_p1(30 downto 0);
                    tmp_3_cast_reg_1171(7 downto 0) <= tmp_3_cast_fu_601_p1(7 downto 0);
                    tmp_4_cast_reg_1176(7 downto 0) <= tmp_4_cast_fu_604_p1(7 downto 0);
                    tmp_9_cast1_reg_1124(30 downto 0) <= tmp_9_cast1_fu_558_p1(30 downto 0);
                    tmp_cast1_reg_1119(30 downto 0) <= tmp_cast1_fu_555_p1(30 downto 0);
                    tmp_cast_cast_reg_1159(7 downto 0) <= tmp_cast_cast_fu_595_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                p_Val2_1_reg_1406 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                ret_V_4_reg_1260 <= ret_V_4_fu_689_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_828_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                ret_V_s_reg_1367 <= grp_fu_1023_p3;
                tmp_13_reg_1358 <= ih_fu_839_p2(19 downto 19);
                tmp_14_reg_1362 <= tmp_14_fu_852_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (tmp_11_fu_771_p2 = ap_const_lv1_1))) then
                tmp_12_reg_1312 <= tmp_12_fu_782_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                tmp_4_reg_1294 <= tmp_4_fu_754_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (tmp_2_fu_711_p2 = ap_const_lv1_1))) then
                tmp_7_reg_1283 <= tmp_7_fu_731_p2;
            end if;
        end if;
    end process;
    tmp_cast1_reg_1119(32 downto 31) <= "00";
    tmp_9_cast1_reg_1124(31) <= '0';
    tmp_24_cast_reg_1129(48 downto 31) <= "000000000000000000";
    tmp_25_cast_reg_1134(32 downto 31) <= "00";
    tmp_cast_cast_reg_1159(18 downto 8) <= "00000000000";
    tmp_1_cast_reg_1165(19 downto 8) <= "000000000000";
    tmp_3_cast_reg_1171(19 downto 8) <= "000000000000";
    tmp_4_cast_reg_1176(19 downto 8) <= "000000000000";
    rhs_V_3_cast_reg_1181(23 downto 8) <= "0000000000000000";
    rhs_V_4_cast_reg_1186(31 downto 8) <= "000000000000000000000000";
    rhs_V_5_cast_cast_reg_1191(27 downto 8) <= "00000000000000000000";
    rhs_V_9_cast_reg_1196(39 downto 8) <= "00000000000000000000000000000000";
    rhs_V_11_cast_reg_1201(47 downto 8) <= "0000000000000000000000000000000000000000";
    rhs_V_2_cast1_reg_1206(15 downto 8) <= "00000000";
    rhs_V_2_cast_reg_1211(23 downto 8) <= "0000000000000000";
    rhs_V_10_cast_reg_1216(31 downto 8) <= "000000000000000000000000";
    rhs_V_8_cast_reg_1221(31 downto 16) <= "0000000000000000";
    tmp_10_reg_1226(31 downto 13) <= "0000000000000000000";
    phi_mul20_cast_reg_1265(19) <= '0';
    lhs_V_7_cast_reg_1335(32) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state23, exitcond1_fu_797_p2, ap_CS_fsm_state42, ap_CS_fsm_state21, ap_CS_fsm_state44, ap_CS_fsm_state48, ap_CS_fsm_state26, ap_CS_fsm_state33, ap_CS_fsm_state27, ap_CS_fsm_state34, gmem_RVALID, gmem_BVALID, ap_CS_fsm_state17, exitcond3_fu_647_p2, ap_CS_fsm_state19, tmp_2_fu_711_p2, ap_sig_ioackin_gmem_AWREADY, ap_CS_fsm_state22, tmp_11_fu_771_p2, ap_sig_ioackin_gmem_ARREADY, ap_block_state23_io, ap_CS_fsm_state24, tmp_13_reg_1358, exitcond2_fu_828_p2, ap_CS_fsm_state25, or_cond5_fu_910_p2, exitcond_fu_865_p2, ap_sig_ioackin_gmem_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond3_fu_647_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((tmp_2_fu_711_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (tmp_11_fu_771_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_const_boolean_0 = ap_block_state23_io) and (ap_const_logic_1 = ap_CS_fsm_state23) and (exitcond1_fu_797_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                elsif (((ap_const_boolean_0 = ap_block_state23_io) and (ap_const_logic_1 = ap_CS_fsm_state23) and (exitcond1_fu_797_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (exitcond2_fu_828_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (exitcond_fu_865_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                elsif (((exitcond_fu_865_p2 = ap_const_lv1_0) and (tmp_13_reg_1358 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25) and (or_cond5_fu_910_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((ap_sig_ioackin_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    addconv_fu_1001_p2 <= std_logic_vector(unsigned(p_Val2_1_reg_1406) + unsigned(p_Val2_s_reg_317));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);

    ap_block_state23_io_assign_proc : process(exitcond1_fu_797_p2, ap_sig_ioackin_gmem_ARREADY)
    begin
                ap_block_state23_io <= ((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_0) and (exitcond1_fu_797_p2 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state17, exitcond3_fu_647_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond3_fu_647_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_Val2_2_be_phi_fu_424_p6_assign_proc : process(tmp_13_reg_1358, or_cond5_reg_1380, ap_CS_fsm_state35, p_Val2_2_be_reg_420, grp_fu_1029_p3)
    begin
        if (((tmp_13_reg_1358 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state35) and (or_cond5_reg_1380 = ap_const_lv1_1))) then 
            ap_phi_mux_p_Val2_2_be_phi_fu_424_p6 <= grp_fu_1029_p3(23 downto 8);
        else 
            ap_phi_mux_p_Val2_2_be_phi_fu_424_p6 <= p_Val2_2_be_reg_420;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17, exitcond3_fu_647_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond3_fu_647_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_gmem_ARREADY_assign_proc : process(gmem_ARREADY, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_ARREADY <= gmem_ARREADY;
        else 
            ap_sig_ioackin_gmem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_AWREADY_assign_proc : process(gmem_AWREADY, ap_reg_ioackin_gmem_AWREADY)
    begin
        if ((ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_AWREADY <= gmem_AWREADY;
        else 
            ap_sig_ioackin_gmem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_WREADY_assign_proc : process(gmem_WREADY, ap_reg_ioackin_gmem_WREADY)
    begin
        if ((ap_reg_ioackin_gmem_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_WREADY <= gmem_WREADY;
        else 
            ap_sig_ioackin_gmem_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    biases_V6_sum_cast_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(biases_V6_sum_fu_662_p2),64));
    biases_V6_sum_fu_662_p2 <= std_logic_vector(unsigned(tmp_1_cast1_fu_658_p1) + unsigned(tmp_9_cast1_reg_1124));
    exitcond1_fu_797_p2 <= "1" when (i_op_assign_1_reg_329 = in_channel_V_read_reg_1077) else "0";
    exitcond2_fu_828_p2 <= "1" when (i_op_assign_2_reg_374 = kernel_size_V_read_reg_1061) else "0";
    exitcond3_fu_647_p2 <= "1" when (i_op_assign_reg_251 = out_channel_V_read_reg_1072) else "0";
    exitcond_fu_865_p2 <= "1" when (i_op_assign_3_reg_409 = kernel_size_V_read_reg_1061) else "0";

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state23, exitcond1_fu_797_p2, ap_CS_fsm_state26, ap_CS_fsm_state27, gmem_addr_reg_1249, gmem_addr_2_reg_1384, gmem_addr_3_reg_1390, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                gmem_ARADDR <= gmem_addr_3_reg_1390;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                gmem_ARADDR <= gmem_addr_2_reg_1384;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (exitcond1_fu_797_p2 = ap_const_lv1_1))) then 
                gmem_ARADDR <= gmem_addr_reg_1249;
            else 
                gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state23, exitcond1_fu_797_p2, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state23) and (exitcond1_fu_797_p2 = ap_const_lv1_1)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state21, ap_reg_ioackin_gmem_AWREADY)
    begin
        if (((ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state48, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state42, ap_CS_fsm_state33, ap_CS_fsm_state34, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state44, ap_reg_ioackin_gmem_WREADY)
    begin
        if (((ap_reg_ioackin_gmem_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state23, exitcond1_fu_797_p2, ap_CS_fsm_state26, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (exitcond1_fu_797_p2 = ap_const_lv1_1)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state42, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_1017_p0 <= grp_fu_1017_p00(24 - 1 downto 0);
    grp_fu_1017_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_11_reg_351),32));
    grp_fu_1017_p1 <= rhs_V_10_cast_reg_1216(8 - 1 downto 0);
    grp_fu_1023_p0 <= rhs_V_5_cast_cast_reg_1191(8 - 1 downto 0);
    grp_fu_1023_p2 <= lhs_V_7_cast_reg_1335(32 - 1 downto 0);
    grp_fu_1029_p2 <= (p_Val2_2_reg_397 & ap_const_lv8_0);

    grp_fu_519_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_519_ap_start <= ap_const_logic_1;
        else 
            grp_fu_519_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_519_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_2_tr_fu_505_p2),12));

    grp_fu_519_p1 <= tmp_tr4_fu_515_p1(9 - 1 downto 0);

    grp_fu_549_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_549_ap_start <= ap_const_logic_1;
        else 
            grp_fu_549_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_549_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_5_tr_fu_539_p2),12));

    grp_fu_549_p1 <= tmp_tr4_fu_515_p1(9 - 1 downto 0);
    i_op_assign_2_cast7_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_2_reg_374),20));
    i_op_assign_3_cast5_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_3_reg_409),20));
    i_op_assign_4_cast1_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_4_reg_273),28));
    i_op_assign_4_cast_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_4_reg_273),13));
    i_op_assign_5_cast_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_5_reg_295),13));
    ic_fu_802_p2 <= std_logic_vector(unsigned(i_op_assign_1_reg_329) + unsigned(ap_const_lv16_1));
    ih_fu_839_p2 <= std_logic_vector(unsigned(i_op_assign_2_cast7_fu_824_p1) + unsigned(tmp_4_reg_1294));
    in_data_V2_sum_cast_fu_952_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_data_V2_sum_fu_947_p2),64));
    in_data_V2_sum_fu_947_p2 <= std_logic_vector(unsigned(ret_V_9_fu_919_p2) + unsigned(tmp_25_cast_reg_1134));
        iw_cast_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(iw_fu_876_p2),32));

    iw_fu_876_p2 <= std_logic_vector(unsigned(i_op_assign_3_cast5_fu_861_p1) + unsigned(tmp_12_reg_1312));
    kh_fu_833_p2 <= std_logic_vector(unsigned(i_op_assign_2_reg_374) + unsigned(ap_const_lv8_1));
    kw_fu_870_p2 <= std_logic_vector(unsigned(i_op_assign_3_reg_409) + unsigned(ap_const_lv8_1));
    lhs_V_1_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height_V),9));
    lhs_V_7_cast_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_7_fu_1011_p2),33));
    lhs_V_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width_V),9));
    next_mul1_fu_638_p2 <= std_logic_vector(unsigned(ret_V_10_reg_262) + unsigned(rhs_V_8_cast_reg_1221));
    next_mul2_fu_698_p2 <= std_logic_vector(unsigned(phi_mul2_reg_284) + unsigned(tmp_cast_cast_reg_1159));
    next_mul3_fu_762_p2 <= std_logic_vector(unsigned(phi_mul3_reg_306) + unsigned(tmp_cast_cast_reg_1159));
    next_mul4_fu_787_p2 <= std_logic_vector(unsigned(ret_V_11_reg_351) + unsigned(rhs_V_2_cast_reg_1211));
    next_mul5_fu_792_p2 <= std_logic_vector(unsigned(ret_V_5_reg_340) + unsigned(rhs_V_3_cast_reg_1181));
    next_mul_fu_819_p2 <= std_logic_vector(unsigned(ret_V_12_reg_385) + unsigned(rhs_V_2_cast1_reg_1206));
    oc_fu_652_p2 <= std_logic_vector(unsigned(i_op_assign_reg_251) + unsigned(ap_const_lv16_1));
    oh_fu_716_p2 <= std_logic_vector(unsigned(i_op_assign_4_reg_273) + unsigned(ap_const_lv12_1));
    or_cond5_fu_910_p2 <= (tmp_14_reg_1362 and tmp1_fu_904_p2);
        out_data_V8_sum_cast_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(out_data_V8_sum_fu_739_p2),64));

    out_data_V8_sum_fu_739_p2 <= std_logic_vector(signed(tmp_10_cast_fu_736_p1) + signed(tmp_cast1_reg_1119));
        output_height_cast_c_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(output_height_fu_585_p2),28));

    output_height_fu_585_p2 <= std_logic_vector(signed(tmp_9_cast_fu_581_p1) + signed(ap_const_lv13_1));
        output_width_cast_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(output_width_fu_571_p2),32));

    output_width_fu_571_p2 <= std_logic_vector(signed(tmp_2_cast_fu_567_p1) + signed(ap_const_lv13_1));
    ow_fu_776_p2 <= std_logic_vector(unsigned(i_op_assign_5_reg_295) + unsigned(ap_const_lv12_1));
    phi_mul17_cast_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul3_reg_306),20));
    phi_mul20_cast_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul2_reg_284),20));
    ret_V_1_cast_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_1_fu_489_p3),11));
    ret_V_1_fu_489_p3 <= (padding_V & ap_const_lv1_0);
    ret_V_2_fu_529_p2 <= std_logic_vector(unsigned(lhs_V_1_fu_525_p1) - unsigned(rhs_V_fu_479_p1));
    ret_V_2_tr_fu_505_p2 <= std_logic_vector(unsigned(ret_V_1_cast_fu_497_p1) + unsigned(tmp_cast_fu_501_p1));
    ret_V_3_fu_681_p0 <= rhs_V_9_cast_reg_1196(8 - 1 downto 0);
    ret_V_3_fu_681_p1 <= ret_V_3_fu_681_p10(32 - 1 downto 0);
    ret_V_3_fu_681_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_10_reg_262),40));
    ret_V_3_fu_681_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_3_fu_681_p0) * unsigned(ret_V_3_fu_681_p1), 40));
    ret_V_4_fu_689_p0 <= rhs_V_11_cast_reg_1201(8 - 1 downto 0);
    ret_V_4_fu_689_p1 <= ret_V_4_fu_689_p10(40 - 1 downto 0);
    ret_V_4_fu_689_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_3_reg_1255),48));
    ret_V_4_fu_689_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_4_fu_689_p0) * unsigned(ret_V_4_fu_689_p1), 48));
    ret_V_5_tr_fu_539_p2 <= std_logic_vector(unsigned(ret_V_1_cast_fu_497_p1) + unsigned(tmp_7_cast_fu_535_p1));
    ret_V_7_fu_1011_p0 <= ret_V_7_fu_1011_p00(24 - 1 downto 0);
    ret_V_7_fu_1011_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_5_reg_340),32));
    ret_V_7_fu_1011_p1 <= rhs_V_4_cast_reg_1186(8 - 1 downto 0);
    ret_V_9_fu_919_p2 <= std_logic_vector(signed(ret_V_s_reg_1367) + signed(rhs_V_7_cast_fu_915_p1));
    ret_V_fu_483_p2 <= std_logic_vector(unsigned(lhs_V_fu_475_p1) - unsigned(rhs_V_fu_479_p1));
    rev_fu_893_p2 <= (tmp_15_fu_885_p3 xor ap_const_lv1_1);
    rhs_V_10_cast_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kernel_size_V_read_reg_1061),32));
    rhs_V_11_cast_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kernel_size_V_read_reg_1061),48));
    rhs_V_2_cast1_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kernel_size_V_read_reg_1061),16));
    rhs_V_2_cast_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kernel_size_V_read_reg_1061),24));
    rhs_V_3_cast_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height_V_read_reg_1038),24));
    rhs_V_4_cast_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width_V_read_reg_1044),32));
    rhs_V_5_cast_cast_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width_V_read_reg_1044),28));
    rhs_V_7_cast_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iw_cast_fu_881_p1),33));
    rhs_V_8_cast_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_channel_V_read_reg_1077),32));
    rhs_V_9_cast_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kernel_size_V_read_reg_1061),40));
    rhs_V_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kernel_size_V),9));
    tmp1_fu_904_p2 <= (tmp_16_fu_899_p2 and rev_fu_893_p2);
    tmp3_cast_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_fu_928_p2),48));
    tmp3_fu_928_p2 <= std_logic_vector(unsigned(ret_V_12_reg_385) + unsigned(tmp_29_cast_fu_924_p1));
        tmp_10_cast_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_reg_1283),33));

    tmp_10_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width_fu_571_p2),32));
    tmp_11_fu_771_p2 <= "1" when (signed(i_op_assign_5_cast_fu_767_p1) < signed(output_width_reg_1139)) else "0";
    tmp_12_fu_782_p2 <= std_logic_vector(unsigned(phi_mul17_cast_fu_758_p1) - unsigned(tmp_1_cast_reg_1165));
    tmp_14_fu_852_p2 <= "1" when (signed(ih_fu_839_p2) < signed(tmp_3_cast_reg_1171)) else "0";
    tmp_15_fu_885_p3 <= iw_fu_876_p2(19 downto 19);
    tmp_16_fu_899_p2 <= "1" when (signed(iw_fu_876_p2) < signed(tmp_4_cast_reg_1176)) else "0";
    tmp_17_fu_938_p2 <= std_logic_vector(unsigned(tmp3_cast_fu_934_p1) + unsigned(tmp2_reg_1340));
    tmp_1_cast1_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_251),32));
    tmp_1_cast_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(padding_V_read_reg_1051),20));
    tmp_24_cast_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_1093),49));
    tmp_25_cast_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_1098),33));
    tmp_29_cast_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_3_reg_409),16));
        tmp_2_cast_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_519_p2),13));

    tmp_2_fu_711_p2 <= "1" when (signed(i_op_assign_4_cast_fu_707_p1) < signed(output_height_reg_1149)) else "0";
    tmp_32_cast_cast_fu_943_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_938_p2),49));
    tmp_3_cast_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height_V_read_reg_1038),20));
    tmp_4_cast_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width_V_read_reg_1044),20));
    tmp_4_fu_754_p2 <= std_logic_vector(unsigned(phi_mul20_cast_reg_1265) - unsigned(tmp_1_cast_reg_1165));
    tmp_5_fu_722_p2 <= std_logic_vector(signed(tmp_8_reg_1244) + signed(i_op_assign_4_cast1_fu_703_p1));
        tmp_7_cast_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_2_fu_529_p2),11));

    tmp_7_fu_731_p0 <= output_width_cast_reg_1144(13 - 1 downto 0);
    tmp_7_fu_731_p1 <= tmp_5_fu_722_p2;
    tmp_7_fu_731_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_7_fu_731_p0) * signed(tmp_7_fu_731_p1))), 32));
    tmp_8_fu_1006_p0 <= tmp_8_fu_1006_p00(16 - 1 downto 0);
    tmp_8_fu_1006_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_251),28));
    tmp_8_fu_1006_p1 <= output_height_cast_c_reg_1154(13 - 1 downto 0);
    tmp_9_cast1_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_1088),32));
        tmp_9_cast_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_549_p2),13));

    tmp_cast1_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1083),33));
    tmp_cast_cast_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stride_V_read_reg_1056),19));
        tmp_cast_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_fu_483_p2),11));

    tmp_tr4_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stride_V),12));
    weights_V4_sum_cast_fu_967_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_V4_sum_fu_962_p2),64));
    weights_V4_sum_fu_962_p2 <= std_logic_vector(unsigned(tmp_32_cast_cast_fu_943_p1) + unsigned(tmp_24_cast_reg_1129));
end behav;
