// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Conv2D,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=12,HLS_SYN_FF=3128,HLS_SYN_LUT=2665,HLS_VERSION=2018_3}" *)

module Conv2D (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 60'd1;
parameter    ap_ST_fsm_state2 = 60'd2;
parameter    ap_ST_fsm_state3 = 60'd4;
parameter    ap_ST_fsm_state4 = 60'd8;
parameter    ap_ST_fsm_state5 = 60'd16;
parameter    ap_ST_fsm_state6 = 60'd32;
parameter    ap_ST_fsm_state7 = 60'd64;
parameter    ap_ST_fsm_state8 = 60'd128;
parameter    ap_ST_fsm_state9 = 60'd256;
parameter    ap_ST_fsm_state10 = 60'd512;
parameter    ap_ST_fsm_state11 = 60'd1024;
parameter    ap_ST_fsm_state12 = 60'd2048;
parameter    ap_ST_fsm_state13 = 60'd4096;
parameter    ap_ST_fsm_state14 = 60'd8192;
parameter    ap_ST_fsm_state15 = 60'd16384;
parameter    ap_ST_fsm_state16 = 60'd32768;
parameter    ap_ST_fsm_state17 = 60'd65536;
parameter    ap_ST_fsm_state18 = 60'd131072;
parameter    ap_ST_fsm_state19 = 60'd262144;
parameter    ap_ST_fsm_state20 = 60'd524288;
parameter    ap_ST_fsm_state21 = 60'd1048576;
parameter    ap_ST_fsm_state22 = 60'd2097152;
parameter    ap_ST_fsm_state23 = 60'd4194304;
parameter    ap_ST_fsm_state24 = 60'd8388608;
parameter    ap_ST_fsm_state25 = 60'd16777216;
parameter    ap_ST_fsm_state26 = 60'd33554432;
parameter    ap_ST_fsm_state27 = 60'd67108864;
parameter    ap_ST_fsm_state28 = 60'd134217728;
parameter    ap_ST_fsm_state29 = 60'd268435456;
parameter    ap_ST_fsm_state30 = 60'd536870912;
parameter    ap_ST_fsm_state31 = 60'd1073741824;
parameter    ap_ST_fsm_state32 = 60'd2147483648;
parameter    ap_ST_fsm_state33 = 60'd4294967296;
parameter    ap_ST_fsm_state34 = 60'd8589934592;
parameter    ap_ST_fsm_state35 = 60'd17179869184;
parameter    ap_ST_fsm_state36 = 60'd34359738368;
parameter    ap_ST_fsm_state37 = 60'd68719476736;
parameter    ap_ST_fsm_state38 = 60'd137438953472;
parameter    ap_ST_fsm_state39 = 60'd274877906944;
parameter    ap_ST_fsm_state40 = 60'd549755813888;
parameter    ap_ST_fsm_state41 = 60'd1099511627776;
parameter    ap_ST_fsm_state42 = 60'd2199023255552;
parameter    ap_ST_fsm_state43 = 60'd4398046511104;
parameter    ap_ST_fsm_state44 = 60'd8796093022208;
parameter    ap_ST_fsm_state45 = 60'd17592186044416;
parameter    ap_ST_fsm_state46 = 60'd35184372088832;
parameter    ap_ST_fsm_state47 = 60'd70368744177664;
parameter    ap_ST_fsm_state48 = 60'd140737488355328;
parameter    ap_ST_fsm_state49 = 60'd281474976710656;
parameter    ap_ST_fsm_state50 = 60'd562949953421312;
parameter    ap_ST_fsm_state51 = 60'd1125899906842624;
parameter    ap_ST_fsm_state52 = 60'd2251799813685248;
parameter    ap_ST_fsm_state53 = 60'd4503599627370496;
parameter    ap_ST_fsm_state54 = 60'd9007199254740992;
parameter    ap_ST_fsm_state55 = 60'd18014398509481984;
parameter    ap_ST_fsm_state56 = 60'd36028797018963968;
parameter    ap_ST_fsm_state57 = 60'd72057594037927936;
parameter    ap_ST_fsm_state58 = 60'd144115188075855872;
parameter    ap_ST_fsm_state59 = 60'd288230376151711744;
parameter    ap_ST_fsm_state60 = 60'd576460752303423488;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [59:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [7:0] in_channel_V;
wire   [7:0] out_channel_V;
wire   [3:0] kernel_size_V;
wire   [3:0] stride_V;
wire   [3:0] padding_V;
wire   [11:0] input_width_V;
wire   [11:0] input_height_V;
wire   [31:0] in_data;
wire   [31:0] weights;
wire   [31:0] biases;
wire   [31:0] out_data;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state28;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state36;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state56;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state60;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state25;
wire   [0:0] exitcond2_fu_829_p2;
wire    ap_CS_fsm_state51;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [11:0] input_height_V_read_reg_1051;
reg   [11:0] input_width_V_read_reg_1057;
reg   [3:0] padding_V_read_reg_1064;
reg   [3:0] stride_V_read_reg_1069;
reg   [3:0] kernel_size_V_read_reg_1075;
reg   [7:0] out_channel_V_read_reg_1086;
reg   [7:0] in_channel_V_read_reg_1091;
reg   [29:0] tmp_reg_1097;
reg   [29:0] tmp_3_reg_1102;
reg   [29:0] tmp_4_reg_1107;
reg   [29:0] tmp_9_reg_1112;
wire   [14:0] tmp_tr4_fu_528_p1;
wire   [14:0] grp_fu_532_p2;
reg   [14:0] tmp_1_reg_1133;
wire    ap_CS_fsm_state19;
wire   [14:0] grp_fu_562_p2;
reg   [14:0] tmp_2_reg_1138;
wire   [32:0] tmp_cast1_fu_568_p1;
reg   [32:0] tmp_cast1_reg_1143;
wire    ap_CS_fsm_state20;
wire   [30:0] tmp_3_cast_fu_571_p1;
reg   [30:0] tmp_3_cast_reg_1148;
wire   [30:0] tmp_4_cast_fu_574_p1;
reg   [30:0] tmp_4_cast_reg_1153;
wire   [32:0] tmp_9_cast1_fu_577_p1;
reg   [32:0] tmp_9_cast1_reg_1158;
wire  signed [15:0] output_width_fu_583_p2;
reg  signed [15:0] output_width_reg_1163;
wire  signed [31:0] output_width_cast_fu_589_p1;
reg  signed [31:0] output_width_cast_reg_1168;
wire  signed [15:0] output_height_fu_596_p2;
reg  signed [15:0] output_height_reg_1173;
wire  signed [22:0] output_height_cast_c_fu_602_p1;
reg  signed [22:0] output_height_cast_c_reg_1178;
wire   [18:0] tmp_12_cast_fu_606_p1;
reg   [18:0] tmp_12_cast_reg_1183;
wire   [17:0] tmp_12_cast_cast_fu_609_p1;
reg   [17:0] tmp_12_cast_cast_reg_1188;
wire   [18:0] tmp_14_cast_fu_612_p1;
reg   [18:0] tmp_14_cast_reg_1193;
wire   [18:0] tmp_18_cast_fu_615_p1;
reg   [18:0] tmp_18_cast_reg_1199;
wire   [18:0] tmp_19_cast_fu_618_p1;
reg   [18:0] tmp_19_cast_reg_1204;
wire   [19:0] rhs_V_3_cast_fu_621_p1;
reg   [19:0] rhs_V_3_cast_reg_1209;
wire   [31:0] rhs_V_4_cast_fu_624_p1;
reg   [31:0] rhs_V_4_cast_reg_1214;
wire   [30:0] rhs_V_5_cast_cast_fu_627_p1;
reg   [30:0] rhs_V_5_cast_cast_reg_1219;
wire   [15:0] rhs_V_8_cast_fu_630_p1;
reg   [15:0] rhs_V_8_cast_reg_1224;
wire   [19:0] rhs_V_9_cast_fu_633_p1;
reg   [19:0] rhs_V_9_cast_reg_1229;
wire   [23:0] rhs_V_13_cast_fu_636_p1;
reg   [23:0] rhs_V_13_cast_reg_1234;
wire   [7:0] rhs_V_2_cast1_fu_639_p1;
reg   [7:0] rhs_V_2_cast1_reg_1239;
wire   [11:0] rhs_V_2_cast_fu_642_p1;
reg   [11:0] rhs_V_2_cast_reg_1244;
wire   [15:0] rhs_V_10_cast_fu_645_p1;
reg   [15:0] rhs_V_10_cast_reg_1249;
wire   [31:0] tmp_12_fu_648_p1;
reg   [31:0] tmp_12_reg_1254;
wire   [23:0] bound_fu_1008_p2;
reg   [23:0] bound_reg_1259;
wire   [0:0] tmp_5_fu_663_p2;
reg   [0:0] tmp_5_reg_1264;
wire    ap_CS_fsm_state21;
wire   [23:0] indvar_flatten_next_fu_673_p2;
reg   [23:0] indvar_flatten_next_reg_1272;
wire   [7:0] tmp_3_mid2_v_fu_685_p3;
reg   [7:0] tmp_3_mid2_v_reg_1277;
wire   [0:0] exitcond_flatten_fu_668_p2;
wire   [15:0] ret_V_4_mid2_v_v_v_v_fu_705_p2;
reg   [15:0] ret_V_4_mid2_v_v_v_v_reg_1282;
wire  signed [22:0] grp_fu_1014_p3;
reg  signed [22:0] tmp_6_reg_1287;
wire   [18:0] grp_fu_1021_p3;
reg   [18:0] tmp_11_reg_1292;
wire   [30:0] biases6_sum_fu_726_p2;
reg   [30:0] biases6_sum_reg_1297;
wire   [19:0] ret_V_4_mid2_v_v_fu_734_p2;
reg   [19:0] ret_V_4_mid2_v_v_reg_1302;
wire    ap_CS_fsm_state22;
reg   [31:0] gmem_addr_reg_1307;
wire   [23:0] ret_V_4_mid2_fu_763_p2;
reg   [23:0] ret_V_4_mid2_reg_1313;
reg    ap_sig_ioackin_gmem_AWREADY;
reg   [31:0] gmem_addr_1_reg_1318;
wire   [17:0] next_mul1_fu_781_p2;
reg   [17:0] next_mul1_reg_1324;
wire    ap_CS_fsm_state24;
wire   [14:0] ow_fu_795_p2;
reg   [14:0] ow_reg_1332;
wire   [18:0] tmp_13_fu_801_p2;
reg   [18:0] tmp_13_reg_1337;
wire   [0:0] tmp_8_fu_790_p2;
wire   [14:0] oh_fu_812_p3;
reg   [14:0] oh_reg_1342;
wire   [11:0] next_mul2_fu_819_p2;
reg   [11:0] next_mul2_reg_1347;
reg    ap_sig_ioackin_gmem_ARREADY;
reg    ap_block_state25_io;
wire   [19:0] next_mul3_fu_824_p2;
reg   [19:0] next_mul3_reg_1352;
wire   [7:0] ic_fu_834_p2;
reg   [7:0] ic_reg_1360;
wire   [32:0] lhs_V_7_cast_fu_844_p1;
reg   [32:0] lhs_V_7_cast_reg_1365;
wire   [23:0] grp_fu_1039_p3;
reg   [23:0] ret_V_11_reg_1370;
wire   [7:0] next_mul_fu_851_p2;
reg   [7:0] next_mul_reg_1375;
wire    ap_CS_fsm_state26;
wire   [3:0] kh_fu_865_p2;
reg   [3:0] kh_reg_1383;
reg   [0:0] tmp_15_reg_1388;
wire   [0:0] exitcond1_fu_860_p2;
wire   [0:0] tmp_16_fu_884_p2;
reg   [0:0] tmp_16_reg_1392;
wire  signed [32:0] grp_fu_1045_p3;
reg  signed [32:0] ret_V_3_reg_1397;
(* use_dsp48 = "no" *) wire   [23:0] ret_V_4_fu_897_p2;
reg   [23:0] ret_V_4_reg_1402;
wire   [3:0] kw_fu_911_p2;
reg   [3:0] kw_reg_1410;
wire    ap_CS_fsm_state27;
wire   [0:0] or_cond5_fu_951_p2;
reg   [0:0] or_cond5_reg_1415;
wire   [0:0] exitcond_fu_906_p2;
reg   [31:0] gmem_addr_2_reg_1419;
wire   [30:0] weights4_sum_fu_993_p2;
reg   [30:0] weights4_sum_reg_1425;
reg   [31:0] gmem_addr_2_read_reg_1436;
reg   [31:0] gmem_addr_3_read_reg_1441;
wire   [31:0] grp_fu_444_p2;
reg   [31:0] tmp_19_reg_1446;
wire    ap_CS_fsm_state39;
wire   [31:0] grp_fu_438_p2;
reg   [31:0] sum_3_reg_1451;
wire    ap_CS_fsm_state43;
reg   [31:0] gmem_addr_1_read_reg_1456;
reg   [31:0] tmp_s_reg_1461;
wire    ap_CS_fsm_state55;
reg   [23:0] indvar_flatten_reg_265;
reg   [7:0] i_op_assign_4_reg_276;
reg   [14:0] i_op_assign_7_reg_287;
reg   [14:0] i_op_assign_8_reg_299;
reg    ap_sig_ioackin_gmem_WREADY;
reg   [17:0] phi_mul1_reg_310;
reg   [31:0] sum_reg_321;
reg   [7:0] i_op_assign_reg_333;
reg   [19:0] ret_V_5_reg_344;
reg   [11:0] ret_V_10_reg_355;
reg   [31:0] sum_1_reg_366;
reg   [3:0] i_op_assign_5_reg_378;
reg   [7:0] ret_V_12_reg_389;
reg   [31:0] sum_2_reg_400;
reg   [31:0] ap_phi_mux_sum_2_be_phi_fu_427_p6;
wire    ap_CS_fsm_state44;
reg   [3:0] i_op_assign_6_reg_412;
reg   [31:0] sum_2_be_reg_423;
wire  signed [63:0] out_data8_sum_cast_fu_750_p1;
wire   [63:0] biases6_sum_cast_fu_768_p1;
wire   [63:0] in_data2_sum_cast_fu_970_p1;
wire   [63:0] weights4_sum_cast_fu_998_p1;
reg    ap_reg_ioackin_gmem_AWREADY;
reg    ap_reg_ioackin_gmem_ARREADY;
reg    ap_reg_ioackin_gmem_WREADY;
reg   [31:0] grp_fu_438_p0;
reg   [31:0] grp_fu_438_p1;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state37;
wire   [12:0] lhs_V_fu_488_p1;
wire   [12:0] rhs_V_fu_492_p1;
wire   [4:0] ret_V_1_fu_502_p3;
wire   [12:0] ret_V_fu_496_p2;
wire   [13:0] ret_V_1_cast_fu_510_p1;
wire  signed [13:0] tmp_cast_fu_514_p1;
wire   [13:0] ret_V_2_tr_fu_518_p2;
wire  signed [14:0] grp_fu_532_p0;
wire   [4:0] grp_fu_532_p1;
wire   [12:0] lhs_V_1_fu_538_p1;
wire   [12:0] ret_V_2_fu_542_p2;
wire  signed [13:0] tmp_10_cast_fu_548_p1;
wire   [13:0] ret_V_5_tr_fu_552_p2;
wire  signed [14:0] grp_fu_562_p0;
wire   [4:0] grp_fu_562_p1;
wire  signed [15:0] tmp_2_cast_fu_580_p1;
wire  signed [15:0] tmp_9_cast_fu_593_p1;
wire   [15:0] i_op_assign_7_cast_fu_659_p1;
wire   [7:0] oc_fu_679_p2;
wire   [7:0] ret_V_4_mid2_v_v_v_v_fu_705_p0;
wire   [7:0] ret_V_4_mid2_v_v_v_v_fu_705_p1;
wire   [14:0] i_op_assign_7_cast1_s_fu_710_p3;
wire   [30:0] tmp_3_mid2_cast_fu_693_p1;
wire   [3:0] ret_V_4_mid2_v_v_fu_734_p0;
wire   [15:0] ret_V_4_mid2_v_v_fu_734_p1;
wire  signed [31:0] tmp_7_fu_1027_p2;
wire  signed [32:0] tmp_13_cast_fu_742_p1;
wire   [32:0] out_data8_sum_fu_745_p2;
wire   [3:0] ret_V_4_mid2_fu_763_p0;
wire   [19:0] ret_V_4_mid2_fu_763_p1;
wire   [15:0] i_op_assign_8_cast_fu_786_p1;
wire   [18:0] phi_mul17_cast_fu_777_p1;
wire   [14:0] i_op_assign_7_op_fu_806_p2;
wire   [31:0] ret_V_7_fu_1033_p2;
wire   [18:0] i_op_assign_5_cast5_fu_856_p1;
(* use_dsp48 = "no" *) wire  signed [18:0] ih_fu_871_p2;
wire   [23:0] rhs_V_12_cast_fu_893_p1;
wire   [18:0] i_op_assign_6_cast3_fu_902_p1;
wire  signed [18:0] iw_fu_917_p2;
wire   [0:0] tmp_17_fu_926_p3;
wire   [0:0] tmp_18_fu_940_p2;
wire   [0:0] rev_fu_934_p2;
wire   [0:0] tmp1_fu_945_p2;
wire  signed [31:0] iw_cast_fu_922_p1;
wire   [32:0] rhs_V_7_cast_fu_956_p1;
(* use_dsp48 = "no" *) wire   [32:0] ret_V_9_fu_960_p2;
wire   [32:0] in_data2_sum_fu_965_p2;
wire   [23:0] rhs_V_14_cast_fu_980_p1;
wire   [23:0] ret_V_13_fu_984_p2;
wire   [30:0] tmp_24_cast_fu_989_p1;
wire   [15:0] bound_fu_1008_p0;
wire   [7:0] bound_fu_1008_p1;
wire   [7:0] grp_fu_1014_p0;
wire  signed [15:0] grp_fu_1014_p1;
wire   [14:0] grp_fu_1014_p2;
wire   [3:0] grp_fu_1021_p0;
wire   [14:0] grp_fu_1021_p1;
wire   [3:0] grp_fu_1021_p2;
wire  signed [15:0] tmp_7_fu_1027_p0;
wire   [19:0] ret_V_7_fu_1033_p0;
wire   [11:0] ret_V_7_fu_1033_p1;
wire   [11:0] grp_fu_1039_p0;
wire   [3:0] grp_fu_1039_p1;
wire   [11:0] grp_fu_1045_p0;
wire   [31:0] grp_fu_1045_p2;
reg    grp_fu_532_ap_start;
wire    grp_fu_532_ap_done;
reg    grp_fu_562_ap_start;
wire    grp_fu_562_ap_done;
reg   [59:0] ap_NS_fsm;
wire   [23:0] bound_fu_1008_p00;
wire   [23:0] bound_fu_1008_p10;
wire   [22:0] grp_fu_1014_p00;
wire   [22:0] grp_fu_1014_p20;
wire   [18:0] grp_fu_1021_p10;
wire   [15:0] grp_fu_1039_p00;
wire   [23:0] ret_V_4_mid2_fu_763_p10;
wire   [19:0] ret_V_4_mid2_v_v_fu_734_p10;
wire   [15:0] ret_V_4_mid2_v_v_v_v_fu_705_p10;
wire   [31:0] ret_V_7_fu_1033_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 60'd1;
#0 ap_reg_ioackin_gmem_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem_WREADY = 1'b0;
end

Conv2D_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
Conv2D_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .in_channel_V(in_channel_V),
    .out_channel_V(out_channel_V),
    .kernel_size_V(kernel_size_V),
    .stride_V(stride_V),
    .padding_V(padding_V),
    .input_width_V(input_width_V),
    .input_height_V(input_height_V),
    .in_data(in_data),
    .weights(weights),
    .biases(biases),
    .out_data(out_data)
);

Conv2D_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
Conv2D_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_reg_1307),
    .I_AWID(1'd0),
    .I_AWLEN(tmp_12_reg_1254),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(tmp_s_reg_1461),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

Conv2D_fadd_32ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Conv2D_fadd_32ns_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_438_p0),
    .din1(grp_fu_438_p1),
    .ce(1'b1),
    .dout(grp_fu_438_p2)
);

Conv2D_fmul_32ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Conv2D_fmul_32ns_cud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(gmem_addr_2_read_reg_1436),
    .din1(gmem_addr_3_read_reg_1441),
    .ce(1'b1),
    .dout(grp_fu_444_p2)
);

Conv2D_sdiv_15s_5dEe #(
    .ID( 1 ),
    .NUM_STAGE( 19 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 15 ))
Conv2D_sdiv_15s_5dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_532_ap_start),
    .done(grp_fu_532_ap_done),
    .din0(grp_fu_532_p0),
    .din1(grp_fu_532_p1),
    .ce(1'b1),
    .dout(grp_fu_532_p2)
);

Conv2D_sdiv_15s_5dEe #(
    .ID( 1 ),
    .NUM_STAGE( 19 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 15 ))
Conv2D_sdiv_15s_5dEe_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_562_ap_start),
    .done(grp_fu_562_ap_done),
    .din0(grp_fu_562_p0),
    .din1(grp_fu_562_p1),
    .ce(1'b1),
    .dout(grp_fu_562_p2)
);

Conv2D_mul_mul_16eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
Conv2D_mul_mul_16eOg_U5(
    .din0(bound_fu_1008_p0),
    .din1(bound_fu_1008_p1),
    .dout(bound_fu_1008_p2)
);

Conv2D_mac_muladdfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 15 ),
    .dout_WIDTH( 23 ))
Conv2D_mac_muladdfYi_U6(
    .din0(grp_fu_1014_p0),
    .din1(grp_fu_1014_p1),
    .din2(grp_fu_1014_p2),
    .dout(grp_fu_1014_p3)
);

Conv2D_mac_mul_sug8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 19 ))
Conv2D_mac_mul_sug8j_U7(
    .din0(grp_fu_1021_p0),
    .din1(grp_fu_1021_p1),
    .din2(grp_fu_1021_p2),
    .dout(grp_fu_1021_p3)
);

Conv2D_mul_mul_16hbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 23 ),
    .dout_WIDTH( 32 ))
Conv2D_mul_mul_16hbi_U8(
    .din0(tmp_7_fu_1027_p0),
    .din1(tmp_6_reg_1287),
    .dout(tmp_7_fu_1027_p2)
);

Conv2D_mul_mul_20ibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 32 ))
Conv2D_mul_mul_20ibs_U9(
    .din0(ret_V_7_fu_1033_p0),
    .din1(ret_V_7_fu_1033_p1),
    .dout(ret_V_7_fu_1033_p2)
);

Conv2D_mac_muladdjbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
Conv2D_mac_muladdjbC_U10(
    .din0(grp_fu_1039_p0),
    .din1(grp_fu_1039_p1),
    .din2(ret_V_4_mid2_reg_1313),
    .dout(grp_fu_1039_p3)
);

Conv2D_mac_muladdkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 19 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 33 ))
Conv2D_mac_muladdkbM_U11(
    .din0(grp_fu_1045_p0),
    .din1(ih_fu_871_p2),
    .din2(grp_fu_1045_p2),
    .dout(grp_fu_1045_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_ARREADY <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_state25_io) & (1'b1 == ap_CS_fsm_state25) & (exitcond2_fu_829_p2 == 1'd1)) | ((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b0;
        end else if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25) & (exitcond2_fu_829_p2 == 1'd1)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state23)) begin
            if ((ap_sig_ioackin_gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b0;
            end else if ((gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state56)) begin
            if ((ap_sig_ioackin_gmem_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b0;
            end else if ((gmem_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state60))) begin
        i_op_assign_4_reg_276 <= tmp_3_mid2_v_reg_1277;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        i_op_assign_4_reg_276 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) & (exitcond_fu_906_p2 == 1'd1))) begin
        i_op_assign_5_reg_378 <= kh_reg_1383;
    end else if (((1'b0 == ap_block_state25_io) & (1'b1 == ap_CS_fsm_state25) & (exitcond2_fu_829_p2 == 1'd0))) begin
        i_op_assign_5_reg_378 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        i_op_assign_6_reg_412 <= kw_reg_1410;
    end else if (((exitcond1_fu_860_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        i_op_assign_6_reg_412 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state60))) begin
        i_op_assign_7_reg_287 <= oh_reg_1342;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        i_op_assign_7_reg_287 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        i_op_assign_8_reg_299 <= 15'd0;
    end else if (((ap_sig_ioackin_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state56))) begin
        i_op_assign_8_reg_299 <= ow_reg_1332;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (tmp_8_fu_790_p2 == 1'd1))) begin
        i_op_assign_reg_333 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state26) & (exitcond1_fu_860_p2 == 1'd1))) begin
        i_op_assign_reg_333 <= ic_reg_1360;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state60))) begin
        indvar_flatten_reg_265 <= indvar_flatten_next_reg_1272;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        indvar_flatten_reg_265 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        phi_mul1_reg_310 <= 18'd0;
    end else if (((ap_sig_ioackin_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state56))) begin
        phi_mul1_reg_310 <= next_mul1_reg_1324;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (tmp_8_fu_790_p2 == 1'd1))) begin
        ret_V_10_reg_355 <= 12'd0;
    end else if (((1'b1 == ap_CS_fsm_state26) & (exitcond1_fu_860_p2 == 1'd1))) begin
        ret_V_10_reg_355 <= next_mul2_reg_1347;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) & (exitcond_fu_906_p2 == 1'd1))) begin
        ret_V_12_reg_389 <= next_mul_reg_1375;
    end else if (((1'b0 == ap_block_state25_io) & (1'b1 == ap_CS_fsm_state25) & (exitcond2_fu_829_p2 == 1'd0))) begin
        ret_V_12_reg_389 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (tmp_8_fu_790_p2 == 1'd1))) begin
        ret_V_5_reg_344 <= 20'd0;
    end else if (((1'b1 == ap_CS_fsm_state26) & (exitcond1_fu_860_p2 == 1'd1))) begin
        ret_V_5_reg_344 <= next_mul3_reg_1352;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) & (exitcond_fu_906_p2 == 1'd1))) begin
        sum_1_reg_366 <= sum_2_reg_400;
    end else if (((1'b0 == ap_block_state25_io) & (1'b1 == ap_CS_fsm_state25) & (exitcond2_fu_829_p2 == 1'd0))) begin
        sum_1_reg_366 <= sum_reg_321;
    end
end

always @ (posedge ap_clk) begin
    if ((((exitcond_fu_906_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state27) & (tmp_15_reg_1388 == 1'd1)) | ((exitcond_fu_906_p2 == 1'd0) & (or_cond5_fu_951_p2 == 1'd0) & (tmp_15_reg_1388 == 1'd0) & (1'b1 == ap_CS_fsm_state27)))) begin
        sum_2_be_reg_423 <= sum_2_reg_400;
    end else if (((tmp_15_reg_1388 == 1'd0) & (1'b1 == ap_CS_fsm_state44) & (or_cond5_reg_1415 == 1'd1))) begin
        sum_2_be_reg_423 <= sum_3_reg_1451;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        sum_2_reg_400 <= ap_phi_mux_sum_2_be_phi_fu_427_p6;
    end else if (((exitcond1_fu_860_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        sum_2_reg_400 <= sum_1_reg_366;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (tmp_8_fu_790_p2 == 1'd1))) begin
        sum_reg_321 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state26) & (exitcond1_fu_860_p2 == 1'd1))) begin
        sum_reg_321 <= sum_1_reg_366;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        biases6_sum_reg_1297 <= biases6_sum_fu_726_p2;
        ret_V_4_mid2_v_v_v_v_reg_1282 <= ret_V_4_mid2_v_v_v_v_fu_705_p2;
        tmp_11_reg_1292 <= grp_fu_1021_p3;
        tmp_3_mid2_v_reg_1277 <= tmp_3_mid2_v_fu_685_p3;
        tmp_6_reg_1287 <= grp_fu_1014_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        bound_reg_1259 <= bound_fu_1008_p2;
        output_height_cast_c_reg_1178 <= output_height_cast_c_fu_602_p1;
        output_height_reg_1173 <= output_height_fu_596_p2;
        output_width_cast_reg_1168 <= output_width_cast_fu_589_p1;
        output_width_reg_1163 <= output_width_fu_583_p2;
        rhs_V_10_cast_reg_1249[3 : 0] <= rhs_V_10_cast_fu_645_p1[3 : 0];
        rhs_V_13_cast_reg_1234[3 : 0] <= rhs_V_13_cast_fu_636_p1[3 : 0];
        rhs_V_2_cast1_reg_1239[3 : 0] <= rhs_V_2_cast1_fu_639_p1[3 : 0];
        rhs_V_2_cast_reg_1244[3 : 0] <= rhs_V_2_cast_fu_642_p1[3 : 0];
        rhs_V_3_cast_reg_1209[11 : 0] <= rhs_V_3_cast_fu_621_p1[11 : 0];
        rhs_V_4_cast_reg_1214[11 : 0] <= rhs_V_4_cast_fu_624_p1[11 : 0];
        rhs_V_5_cast_cast_reg_1219[11 : 0] <= rhs_V_5_cast_cast_fu_627_p1[11 : 0];
        rhs_V_8_cast_reg_1224[7 : 0] <= rhs_V_8_cast_fu_630_p1[7 : 0];
        rhs_V_9_cast_reg_1229[3 : 0] <= rhs_V_9_cast_fu_633_p1[3 : 0];
        tmp_12_cast_cast_reg_1188[3 : 0] <= tmp_12_cast_cast_fu_609_p1[3 : 0];
        tmp_12_cast_reg_1183[3 : 0] <= tmp_12_cast_fu_606_p1[3 : 0];
        tmp_12_reg_1254[15 : 0] <= tmp_12_fu_648_p1[15 : 0];
        tmp_14_cast_reg_1193[3 : 0] <= tmp_14_cast_fu_612_p1[3 : 0];
        tmp_18_cast_reg_1199[11 : 0] <= tmp_18_cast_fu_615_p1[11 : 0];
        tmp_19_cast_reg_1204[11 : 0] <= tmp_19_cast_fu_618_p1[11 : 0];
        tmp_3_cast_reg_1148[29 : 0] <= tmp_3_cast_fu_571_p1[29 : 0];
        tmp_4_cast_reg_1153[29 : 0] <= tmp_4_cast_fu_574_p1[29 : 0];
        tmp_9_cast1_reg_1158[29 : 0] <= tmp_9_cast1_fu_577_p1[29 : 0];
        tmp_cast1_reg_1143[29 : 0] <= tmp_cast1_fu_568_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state51))) begin
        gmem_addr_1_read_reg_1456 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        gmem_addr_1_reg_1318[30 : 0] <= biases6_sum_cast_fu_768_p1[30 : 0];
        ret_V_4_mid2_reg_1313 <= ret_V_4_mid2_fu_763_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
        gmem_addr_2_read_reg_1436 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_906_p2 == 1'd0) & (tmp_15_reg_1388 == 1'd0) & (1'b1 == ap_CS_fsm_state27) & (or_cond5_fu_951_p2 == 1'd1))) begin
        gmem_addr_2_reg_1419 <= in_data2_sum_cast_fu_970_p1;
        weights4_sum_reg_1425 <= weights4_sum_fu_993_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state36))) begin
        gmem_addr_3_read_reg_1441 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        gmem_addr_reg_1307 <= out_data8_sum_cast_fu_750_p1;
        ret_V_4_mid2_v_v_reg_1302 <= ret_V_4_mid2_v_v_fu_734_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state25_io) & (1'b1 == ap_CS_fsm_state25))) begin
        ic_reg_1360 <= ic_fu_834_p2;
        next_mul2_reg_1347 <= next_mul2_fu_819_p2;
        next_mul3_reg_1352 <= next_mul3_fu_824_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_channel_V_read_reg_1091 <= in_channel_V;
        input_height_V_read_reg_1051 <= input_height_V;
        input_width_V_read_reg_1057 <= input_width_V;
        kernel_size_V_read_reg_1075 <= kernel_size_V;
        out_channel_V_read_reg_1086 <= out_channel_V;
        padding_V_read_reg_1064 <= padding_V;
        stride_V_read_reg_1069 <= stride_V;
        tmp_3_reg_1102 <= {{biases[31:2]}};
        tmp_4_reg_1107 <= {{weights[31:2]}};
        tmp_9_reg_1112 <= {{in_data[31:2]}};
        tmp_reg_1097 <= {{out_data[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        indvar_flatten_next_reg_1272 <= indvar_flatten_next_fu_673_p2;
        tmp_5_reg_1264 <= tmp_5_fu_663_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        kh_reg_1383 <= kh_fu_865_p2;
        next_mul_reg_1375 <= next_mul_fu_851_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        kw_reg_1410 <= kw_fu_911_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state25_io) & (1'b1 == ap_CS_fsm_state25) & (exitcond2_fu_829_p2 == 1'd0))) begin
        lhs_V_7_cast_reg_1365[31 : 0] <= lhs_V_7_cast_fu_844_p1[31 : 0];
        ret_V_11_reg_1370 <= grp_fu_1039_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        next_mul1_reg_1324 <= next_mul1_fu_781_p2;
        ow_reg_1332 <= ow_fu_795_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_8_fu_790_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        oh_reg_1342 <= oh_fu_812_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_906_p2 == 1'd0) & (tmp_15_reg_1388 == 1'd0) & (1'b1 == ap_CS_fsm_state27))) begin
        or_cond5_reg_1415 <= or_cond5_fu_951_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_860_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        ret_V_3_reg_1397 <= grp_fu_1045_p3;
        ret_V_4_reg_1402 <= ret_V_4_fu_897_p2;
        tmp_15_reg_1388 <= ih_fu_871_p2[32'd18];
        tmp_16_reg_1392 <= tmp_16_fu_884_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        sum_3_reg_1451 <= grp_fu_438_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (tmp_8_fu_790_p2 == 1'd1))) begin
        tmp_13_reg_1337 <= tmp_13_fu_801_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        tmp_19_reg_1446 <= grp_fu_444_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tmp_1_reg_1133 <= grp_fu_532_p2;
        tmp_2_reg_1138 <= grp_fu_562_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        tmp_s_reg_1461 <= grp_fu_438_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) & (exitcond_flatten_fu_668_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_15_reg_1388 == 1'd0) & (1'b1 == ap_CS_fsm_state44) & (or_cond5_reg_1415 == 1'd1))) begin
        ap_phi_mux_sum_2_be_phi_fu_427_p6 = sum_3_reg_1451;
    end else begin
        ap_phi_mux_sum_2_be_phi_fu_427_p6 = sum_2_be_reg_423;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) & (exitcond_flatten_fu_668_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_AWREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_WREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY;
    end else begin
        ap_sig_ioackin_gmem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state29)) begin
            gmem_ARADDR = weights4_sum_cast_fu_998_p1;
        end else if ((1'b1 == ap_CS_fsm_state28)) begin
            gmem_ARADDR = gmem_addr_2_reg_1419;
        end else if (((1'b1 == ap_CS_fsm_state25) & (exitcond2_fu_829_p2 == 1'd1))) begin
            gmem_ARADDR = gmem_addr_1_reg_1318;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state25) & (exitcond2_fu_829_p2 == 1'd1)) | ((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state29)) | ((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state28)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state23))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state60))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state51)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state36)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state35)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state56))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | ((1'b1 == ap_CS_fsm_state25) & (exitcond2_fu_829_p2 == 1'd1)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        grp_fu_438_p0 = sum_reg_321;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_438_p0 = sum_2_reg_400;
    end else begin
        grp_fu_438_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        grp_fu_438_p1 = gmem_addr_1_read_reg_1456;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_438_p1 = tmp_19_reg_1446;
    end else begin
        grp_fu_438_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_532_ap_start = 1'b1;
    end else begin
        grp_fu_532_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_562_ap_start = 1'b1;
    end else begin
        grp_fu_562_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (exitcond_flatten_fu_668_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((ap_sig_ioackin_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (tmp_8_fu_790_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b0 == ap_block_state25_io) & (1'b1 == ap_CS_fsm_state25) & (exitcond2_fu_829_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else if (((1'b0 == ap_block_state25_io) & (1'b1 == ap_CS_fsm_state25) & (exitcond2_fu_829_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (exitcond1_fu_860_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (exitcond_fu_906_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else if (((exitcond_fu_906_p2 == 1'd0) & (tmp_15_reg_1388 == 1'd0) & (1'b1 == ap_CS_fsm_state27) & (or_cond5_fu_951_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            if (((ap_sig_ioackin_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state56))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state60))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

always @ (*) begin
    ap_block_state25_io = ((ap_sig_ioackin_gmem_ARREADY == 1'b0) & (exitcond2_fu_829_p2 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign biases6_sum_cast_fu_768_p1 = biases6_sum_reg_1297;

assign biases6_sum_fu_726_p2 = (tmp_3_mid2_cast_fu_693_p1 + tmp_3_cast_reg_1148);

assign bound_fu_1008_p0 = bound_fu_1008_p00;

assign bound_fu_1008_p00 = $unsigned(output_height_fu_596_p2);

assign bound_fu_1008_p1 = bound_fu_1008_p10;

assign bound_fu_1008_p10 = out_channel_V_read_reg_1086;

assign exitcond1_fu_860_p2 = ((i_op_assign_5_reg_378 == kernel_size_V_read_reg_1075) ? 1'b1 : 1'b0);

assign exitcond2_fu_829_p2 = ((i_op_assign_reg_333 == in_channel_V_read_reg_1091) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_668_p2 = ((indvar_flatten_reg_265 == bound_reg_1259) ? 1'b1 : 1'b0);

assign exitcond_fu_906_p2 = ((i_op_assign_6_reg_412 == kernel_size_V_read_reg_1075) ? 1'b1 : 1'b0);

assign grp_fu_1014_p0 = grp_fu_1014_p00;

assign grp_fu_1014_p00 = tmp_3_mid2_v_fu_685_p3;

assign grp_fu_1014_p1 = output_height_cast_c_reg_1178;

assign grp_fu_1014_p2 = grp_fu_1014_p20;

assign grp_fu_1014_p20 = i_op_assign_7_cast1_s_fu_710_p3;

assign grp_fu_1021_p0 = tmp_12_cast_reg_1183;

assign grp_fu_1021_p1 = grp_fu_1021_p10;

assign grp_fu_1021_p10 = i_op_assign_7_cast1_s_fu_710_p3;

assign grp_fu_1021_p2 = tmp_14_cast_reg_1193;

assign grp_fu_1039_p0 = grp_fu_1039_p00;

assign grp_fu_1039_p00 = ret_V_10_reg_355;

assign grp_fu_1039_p1 = rhs_V_10_cast_reg_1249;

assign grp_fu_1045_p0 = rhs_V_5_cast_cast_reg_1219;

assign grp_fu_1045_p2 = lhs_V_7_cast_reg_1365;

assign grp_fu_532_p0 = $signed(ret_V_2_tr_fu_518_p2);

assign grp_fu_532_p1 = tmp_tr4_fu_528_p1;

assign grp_fu_562_p0 = $signed(ret_V_5_tr_fu_552_p2);

assign grp_fu_562_p1 = tmp_tr4_fu_528_p1;

assign i_op_assign_5_cast5_fu_856_p1 = i_op_assign_5_reg_378;

assign i_op_assign_6_cast3_fu_902_p1 = i_op_assign_6_reg_412;

assign i_op_assign_7_cast1_s_fu_710_p3 = ((tmp_5_fu_663_p2[0:0] === 1'b1) ? i_op_assign_7_reg_287 : 15'd0);

assign i_op_assign_7_cast_fu_659_p1 = i_op_assign_7_reg_287;

assign i_op_assign_7_op_fu_806_p2 = (i_op_assign_7_reg_287 + 15'd1);

assign i_op_assign_8_cast_fu_786_p1 = i_op_assign_8_reg_299;

assign ic_fu_834_p2 = (i_op_assign_reg_333 + 8'd1);

assign ih_fu_871_p2 = (i_op_assign_5_cast5_fu_856_p1 + tmp_11_reg_1292);

assign in_data2_sum_cast_fu_970_p1 = in_data2_sum_fu_965_p2;

assign in_data2_sum_fu_965_p2 = (ret_V_9_fu_960_p2 + tmp_9_cast1_reg_1158);

assign indvar_flatten_next_fu_673_p2 = (indvar_flatten_reg_265 + 24'd1);

assign iw_cast_fu_922_p1 = iw_fu_917_p2;

assign iw_fu_917_p2 = (i_op_assign_6_cast3_fu_902_p1 + tmp_13_reg_1337);

assign kh_fu_865_p2 = (i_op_assign_5_reg_378 + 4'd1);

assign kw_fu_911_p2 = (i_op_assign_6_reg_412 + 4'd1);

assign lhs_V_1_fu_538_p1 = input_height_V;

assign lhs_V_7_cast_fu_844_p1 = ret_V_7_fu_1033_p2;

assign lhs_V_fu_488_p1 = input_width_V;

assign next_mul1_fu_781_p2 = (phi_mul1_reg_310 + tmp_12_cast_cast_reg_1188);

assign next_mul2_fu_819_p2 = (ret_V_10_reg_355 + rhs_V_2_cast_reg_1244);

assign next_mul3_fu_824_p2 = (ret_V_5_reg_344 + rhs_V_3_cast_reg_1209);

assign next_mul_fu_851_p2 = (ret_V_12_reg_389 + rhs_V_2_cast1_reg_1239);

assign oc_fu_679_p2 = (i_op_assign_4_reg_276 + 8'd1);

assign oh_fu_812_p3 = ((tmp_5_reg_1264[0:0] === 1'b1) ? i_op_assign_7_op_fu_806_p2 : 15'd1);

assign or_cond5_fu_951_p2 = (tmp_16_reg_1392 & tmp1_fu_945_p2);

assign out_data8_sum_cast_fu_750_p1 = $signed(out_data8_sum_fu_745_p2);

assign out_data8_sum_fu_745_p2 = ($signed(tmp_13_cast_fu_742_p1) + $signed(tmp_cast1_reg_1143));

assign output_height_cast_c_fu_602_p1 = output_height_fu_596_p2;

assign output_height_fu_596_p2 = ($signed(tmp_9_cast_fu_593_p1) + $signed(16'd1));

assign output_width_cast_fu_589_p1 = output_width_fu_583_p2;

assign output_width_fu_583_p2 = ($signed(tmp_2_cast_fu_580_p1) + $signed(16'd1));

assign ow_fu_795_p2 = (i_op_assign_8_reg_299 + 15'd1);

assign phi_mul17_cast_fu_777_p1 = phi_mul1_reg_310;

assign ret_V_13_fu_984_p2 = (rhs_V_14_cast_fu_980_p1 + ret_V_4_reg_1402);

assign ret_V_1_cast_fu_510_p1 = ret_V_1_fu_502_p3;

assign ret_V_1_fu_502_p3 = {{padding_V}, {1'd0}};

assign ret_V_2_fu_542_p2 = (lhs_V_1_fu_538_p1 - rhs_V_fu_492_p1);

assign ret_V_2_tr_fu_518_p2 = ($signed(ret_V_1_cast_fu_510_p1) + $signed(tmp_cast_fu_514_p1));

assign ret_V_4_fu_897_p2 = (rhs_V_12_cast_fu_893_p1 + ret_V_11_reg_1370);

assign ret_V_4_mid2_fu_763_p0 = rhs_V_13_cast_reg_1234;

assign ret_V_4_mid2_fu_763_p1 = ret_V_4_mid2_fu_763_p10;

assign ret_V_4_mid2_fu_763_p10 = ret_V_4_mid2_v_v_reg_1302;

assign ret_V_4_mid2_fu_763_p2 = (ret_V_4_mid2_fu_763_p0 * ret_V_4_mid2_fu_763_p1);

assign ret_V_4_mid2_v_v_fu_734_p0 = rhs_V_9_cast_reg_1229;

assign ret_V_4_mid2_v_v_fu_734_p1 = ret_V_4_mid2_v_v_fu_734_p10;

assign ret_V_4_mid2_v_v_fu_734_p10 = ret_V_4_mid2_v_v_v_v_reg_1282;

assign ret_V_4_mid2_v_v_fu_734_p2 = (ret_V_4_mid2_v_v_fu_734_p0 * ret_V_4_mid2_v_v_fu_734_p1);

assign ret_V_4_mid2_v_v_v_v_fu_705_p0 = rhs_V_8_cast_reg_1224;

assign ret_V_4_mid2_v_v_v_v_fu_705_p1 = ret_V_4_mid2_v_v_v_v_fu_705_p10;

assign ret_V_4_mid2_v_v_v_v_fu_705_p10 = tmp_3_mid2_v_fu_685_p3;

assign ret_V_4_mid2_v_v_v_v_fu_705_p2 = (ret_V_4_mid2_v_v_v_v_fu_705_p0 * ret_V_4_mid2_v_v_v_v_fu_705_p1);

assign ret_V_5_tr_fu_552_p2 = ($signed(ret_V_1_cast_fu_510_p1) + $signed(tmp_10_cast_fu_548_p1));

assign ret_V_7_fu_1033_p0 = ret_V_7_fu_1033_p00;

assign ret_V_7_fu_1033_p00 = ret_V_5_reg_344;

assign ret_V_7_fu_1033_p1 = rhs_V_4_cast_reg_1214;

assign ret_V_9_fu_960_p2 = ($signed(rhs_V_7_cast_fu_956_p1) + $signed(ret_V_3_reg_1397));

assign ret_V_fu_496_p2 = (lhs_V_fu_488_p1 - rhs_V_fu_492_p1);

assign rev_fu_934_p2 = (tmp_17_fu_926_p3 ^ 1'd1);

assign rhs_V_10_cast_fu_645_p1 = kernel_size_V_read_reg_1075;

assign rhs_V_12_cast_fu_893_p1 = ret_V_12_reg_389;

assign rhs_V_13_cast_fu_636_p1 = kernel_size_V_read_reg_1075;

assign rhs_V_14_cast_fu_980_p1 = i_op_assign_6_reg_412;

assign rhs_V_2_cast1_fu_639_p1 = kernel_size_V_read_reg_1075;

assign rhs_V_2_cast_fu_642_p1 = kernel_size_V_read_reg_1075;

assign rhs_V_3_cast_fu_621_p1 = input_height_V_read_reg_1051;

assign rhs_V_4_cast_fu_624_p1 = input_width_V_read_reg_1057;

assign rhs_V_5_cast_cast_fu_627_p1 = input_width_V_read_reg_1057;

assign rhs_V_7_cast_fu_956_p1 = $unsigned(iw_cast_fu_922_p1);

assign rhs_V_8_cast_fu_630_p1 = in_channel_V_read_reg_1091;

assign rhs_V_9_cast_fu_633_p1 = kernel_size_V_read_reg_1075;

assign rhs_V_fu_492_p1 = kernel_size_V;

assign tmp1_fu_945_p2 = (tmp_18_fu_940_p2 & rev_fu_934_p2);

assign tmp_10_cast_fu_548_p1 = $signed(ret_V_2_fu_542_p2);

assign tmp_12_cast_cast_fu_609_p1 = stride_V_read_reg_1069;

assign tmp_12_cast_fu_606_p1 = stride_V_read_reg_1069;

assign tmp_12_fu_648_p1 = $unsigned(output_width_fu_583_p2);

assign tmp_13_cast_fu_742_p1 = tmp_7_fu_1027_p2;

assign tmp_13_fu_801_p2 = (phi_mul17_cast_fu_777_p1 - tmp_14_cast_reg_1193);

assign tmp_14_cast_fu_612_p1 = padding_V_read_reg_1064;

assign tmp_16_fu_884_p2 = (($signed(ih_fu_871_p2) < $signed(tmp_18_cast_reg_1199)) ? 1'b1 : 1'b0);

assign tmp_17_fu_926_p3 = iw_fu_917_p2[32'd18];

assign tmp_18_cast_fu_615_p1 = input_height_V_read_reg_1051;

assign tmp_18_fu_940_p2 = (($signed(iw_fu_917_p2) < $signed(tmp_19_cast_reg_1204)) ? 1'b1 : 1'b0);

assign tmp_19_cast_fu_618_p1 = input_width_V_read_reg_1057;

assign tmp_24_cast_fu_989_p1 = ret_V_13_fu_984_p2;

assign tmp_2_cast_fu_580_p1 = $signed(tmp_1_reg_1133);

assign tmp_3_cast_fu_571_p1 = tmp_3_reg_1102;

assign tmp_3_mid2_cast_fu_693_p1 = tmp_3_mid2_v_fu_685_p3;

assign tmp_3_mid2_v_fu_685_p3 = ((tmp_5_fu_663_p2[0:0] === 1'b1) ? i_op_assign_4_reg_276 : oc_fu_679_p2);

assign tmp_4_cast_fu_574_p1 = tmp_4_reg_1107;

assign tmp_5_fu_663_p2 = (($signed(i_op_assign_7_cast_fu_659_p1) < $signed(output_height_reg_1173)) ? 1'b1 : 1'b0);

assign tmp_7_fu_1027_p0 = output_width_cast_reg_1168;

assign tmp_8_fu_790_p2 = (($signed(i_op_assign_8_cast_fu_786_p1) < $signed(output_width_reg_1163)) ? 1'b1 : 1'b0);

assign tmp_9_cast1_fu_577_p1 = tmp_9_reg_1112;

assign tmp_9_cast_fu_593_p1 = $signed(tmp_2_reg_1138);

assign tmp_cast1_fu_568_p1 = tmp_reg_1097;

assign tmp_cast_fu_514_p1 = $signed(ret_V_fu_496_p2);

assign tmp_tr4_fu_528_p1 = stride_V;

assign weights4_sum_cast_fu_998_p1 = weights4_sum_reg_1425;

assign weights4_sum_fu_993_p2 = (tmp_24_cast_fu_989_p1 + tmp_4_cast_reg_1153);

always @ (posedge ap_clk) begin
    tmp_cast1_reg_1143[32:30] <= 3'b000;
    tmp_3_cast_reg_1148[30] <= 1'b0;
    tmp_4_cast_reg_1153[30] <= 1'b0;
    tmp_9_cast1_reg_1158[32:30] <= 3'b000;
    tmp_12_cast_reg_1183[18:4] <= 15'b000000000000000;
    tmp_12_cast_cast_reg_1188[17:4] <= 14'b00000000000000;
    tmp_14_cast_reg_1193[18:4] <= 15'b000000000000000;
    tmp_18_cast_reg_1199[18:12] <= 7'b0000000;
    tmp_19_cast_reg_1204[18:12] <= 7'b0000000;
    rhs_V_3_cast_reg_1209[19:12] <= 8'b00000000;
    rhs_V_4_cast_reg_1214[31:12] <= 20'b00000000000000000000;
    rhs_V_5_cast_cast_reg_1219[30:12] <= 19'b0000000000000000000;
    rhs_V_8_cast_reg_1224[15:8] <= 8'b00000000;
    rhs_V_9_cast_reg_1229[19:4] <= 16'b0000000000000000;
    rhs_V_13_cast_reg_1234[23:4] <= 20'b00000000000000000000;
    rhs_V_2_cast1_reg_1239[7:4] <= 4'b0000;
    rhs_V_2_cast_reg_1244[11:4] <= 8'b00000000;
    rhs_V_10_cast_reg_1249[15:4] <= 12'b000000000000;
    tmp_12_reg_1254[31:16] <= 16'b0000000000000000;
    gmem_addr_1_reg_1318[31] <= 1'b0;
    lhs_V_7_cast_reg_1365[32] <= 1'b0;
end

endmodule //Conv2D
