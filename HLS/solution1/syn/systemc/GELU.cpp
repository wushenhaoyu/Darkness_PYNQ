// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "GELU.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic GELU::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic GELU::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<30> GELU::ap_ST_fsm_state1 = "1";
const sc_lv<30> GELU::ap_ST_fsm_state2 = "10";
const sc_lv<30> GELU::ap_ST_fsm_state3 = "100";
const sc_lv<30> GELU::ap_ST_fsm_state4 = "1000";
const sc_lv<30> GELU::ap_ST_fsm_state5 = "10000";
const sc_lv<30> GELU::ap_ST_fsm_state6 = "100000";
const sc_lv<30> GELU::ap_ST_fsm_state7 = "1000000";
const sc_lv<30> GELU::ap_ST_fsm_state8 = "10000000";
const sc_lv<30> GELU::ap_ST_fsm_state9 = "100000000";
const sc_lv<30> GELU::ap_ST_fsm_state10 = "1000000000";
const sc_lv<30> GELU::ap_ST_fsm_state11 = "10000000000";
const sc_lv<30> GELU::ap_ST_fsm_state12 = "100000000000";
const sc_lv<30> GELU::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<30> GELU::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<30> GELU::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<30> GELU::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<30> GELU::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<30> GELU::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<30> GELU::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<30> GELU::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<30> GELU::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<30> GELU::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<30> GELU::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<30> GELU::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<30> GELU::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<30> GELU::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<30> GELU::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<30> GELU::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<30> GELU::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<30> GELU::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<32> GELU::ap_const_lv32_0 = "00000000000000000000000000000000";
const int GELU::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> GELU::ap_const_lv32_3 = "11";
const sc_lv<32> GELU::ap_const_lv32_6 = "110";
const sc_lv<32> GELU::ap_const_lv32_9 = "1001";
const sc_lv<32> GELU::ap_const_lv32_10 = "10000";
const sc_lv<32> GELU::ap_const_lv32_D = "1101";
const sc_lv<32> GELU::ap_const_lv32_16 = "10110";
const sc_lv<32> GELU::ap_const_lv32_12 = "10010";
const sc_lv<32> GELU::ap_const_lv32_17 = "10111";
const sc_lv<32> GELU::ap_const_lv32_1C = "11100";
const sc_lv<32> GELU::ap_const_lv32_11 = "10001";
const sc_lv<32> GELU::ap_const_lv32_1D = "11101";
const sc_lv<32> GELU::ap_const_lv32_3F800000 = "111111100000000000000000000000";
const sc_lv<32> GELU::ap_const_lv32_A = "1010";
const sc_lv<32> GELU::ap_const_lv32_13 = "10011";
const sc_lv<32> GELU::ap_const_lv32_3D372713 = "111101001101110010011100010011";
const sc_lv<32> GELU::ap_const_lv32_3F4C422A = "111111010011000100001000101010";
const sc_lv<32> GELU::ap_const_lv32_1 = "1";
const sc_lv<32> GELU::ap_const_lv32_4 = "100";
const sc_lv<32> GELU::ap_const_lv32_7 = "111";
const sc_lv<32> GELU::ap_const_lv32_E = "1110";
const sc_lv<64> GELU::ap_const_lv64_3FE0000000000000 = "11111111100000000000000000000000000000000000000000000000000000";
const sc_lv<32> GELU::ap_const_lv32_18 = "11000";
const bool GELU::ap_const_boolean_1 = true;

GELU::GELU(sc_module_name name) : sc_module(name), mVcdFile(0) {
    GELU_AXILiteS_s_axi_U = new GELU_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("GELU_AXILiteS_s_axi_U");
    GELU_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    GELU_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    GELU_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    GELU_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    GELU_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    GELU_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    GELU_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    GELU_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    GELU_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    GELU_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    GELU_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    GELU_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    GELU_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    GELU_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    GELU_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    GELU_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    GELU_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    GELU_AXILiteS_s_axi_U->ACLK(ap_clk);
    GELU_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    GELU_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    GELU_AXILiteS_s_axi_U->ap_start(ap_start);
    GELU_AXILiteS_s_axi_U->interrupt(interrupt);
    GELU_AXILiteS_s_axi_U->ap_ready(ap_ready);
    GELU_AXILiteS_s_axi_U->ap_done(ap_done);
    GELU_AXILiteS_s_axi_U->ap_idle(ap_idle);
    GELU_AXILiteS_s_axi_U->x(x);
    GELU_AXILiteS_s_axi_U->out_r(tmp_40_fu_73_p1);
    GELU_AXILiteS_s_axi_U->out_r_ap_vld(out_r_ap_vld);
    grp_generic_tanh_float_s_fu_51 = new generic_tanh_float_s("grp_generic_tanh_float_s_fu_51");
    grp_generic_tanh_float_s_fu_51->ap_clk(ap_clk);
    grp_generic_tanh_float_s_fu_51->ap_rst(ap_rst_n_inv);
    grp_generic_tanh_float_s_fu_51->ap_start(grp_generic_tanh_float_s_fu_51_ap_start);
    grp_generic_tanh_float_s_fu_51->ap_done(grp_generic_tanh_float_s_fu_51_ap_done);
    grp_generic_tanh_float_s_fu_51->ap_idle(grp_generic_tanh_float_s_fu_51_ap_idle);
    grp_generic_tanh_float_s_fu_51->ap_ready(grp_generic_tanh_float_s_fu_51_ap_ready);
    grp_generic_tanh_float_s_fu_51->t_in(reg_85);
    grp_generic_tanh_float_s_fu_51->ap_return(grp_generic_tanh_float_s_fu_51_ap_return);
    GELU_fadd_32ns_32ncg_U24 = new GELU_fadd_32ns_32ncg<1,4,32,32,32>("GELU_fadd_32ns_32ncg_U24");
    GELU_fadd_32ns_32ncg_U24->clk(ap_clk);
    GELU_fadd_32ns_32ncg_U24->reset(ap_rst_n_inv);
    GELU_fadd_32ns_32ncg_U24->din0(grp_fu_62_p0);
    GELU_fadd_32ns_32ncg_U24->din1(grp_fu_62_p1);
    GELU_fadd_32ns_32ncg_U24->ce(ap_var_for_const0);
    GELU_fadd_32ns_32ncg_U24->dout(grp_fu_62_p2);
    GELU_fmul_32ns_32hbi_U25 = new GELU_fmul_32ns_32hbi<1,3,32,32,32>("GELU_fmul_32ns_32hbi_U25");
    GELU_fmul_32ns_32hbi_U25->clk(ap_clk);
    GELU_fmul_32ns_32hbi_U25->reset(ap_rst_n_inv);
    GELU_fmul_32ns_32hbi_U25->din0(grp_fu_67_p0);
    GELU_fmul_32ns_32hbi_U25->din1(grp_fu_67_p1);
    GELU_fmul_32ns_32hbi_U25->ce(ap_var_for_const0);
    GELU_fmul_32ns_32hbi_U25->dout(grp_fu_67_p2);
    GELU_fptrunc_64nsjbC_U26 = new GELU_fptrunc_64nsjbC<1,1,64,32>("GELU_fptrunc_64nsjbC_U26");
    GELU_fptrunc_64nsjbC_U26->din0(reg_104);
    GELU_fptrunc_64nsjbC_U26->dout(tmp_40_fu_73_p1);
    GELU_fpext_32ns_6kbM_U27 = new GELU_fpext_32ns_6kbM<1,1,32,64>("GELU_fpext_32ns_6kbM_U27");
    GELU_fpext_32ns_6kbM_U27->din0(grp_fu_77_p0);
    GELU_fpext_32ns_6kbM_U27->dout(grp_fu_77_p1);
    GELU_dmul_64ns_64ocq_U28 = new GELU_dmul_64ns_64ocq<1,5,64,64,64>("GELU_dmul_64ns_64ocq_U28");
    GELU_dmul_64ns_64ocq_U28->clk(ap_clk);
    GELU_dmul_64ns_64ocq_U28->reset(ap_rst_n_inv);
    GELU_dmul_64ns_64ocq_U28->din0(grp_fu_80_p0);
    GELU_dmul_64ns_64ocq_U28->din1(grp_fu_80_p1);
    GELU_dmul_64ns_64ocq_U28->ce(ap_var_for_const0);
    GELU_dmul_64ns_64ocq_U28->dout(grp_fu_80_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state30 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state30 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_grp_fu_62_p0);
    sensitive << ( reg_85 );
    sensitive << ( tanh_val_reg_118 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_grp_fu_62_p1);
    sensitive << ( x_read_reg_110 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_grp_fu_67_p0);
    sensitive << ( reg_85 );
    sensitive << ( reg_92 );
    sensitive << ( x_read_reg_110 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_grp_fu_67_p1);
    sensitive << ( x_read_reg_110 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_grp_fu_77_p0);
    sensitive << ( reg_92 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( x_read_reg_110 );

    SC_METHOD(thread_grp_fu_80_p0);
    sensitive << ( reg_98 );
    sensitive << ( reg_104 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_grp_fu_80_p1);
    sensitive << ( reg_98 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_grp_generic_tanh_float_s_fu_51_ap_start);
    sensitive << ( grp_generic_tanh_float_s_fu_51_ap_start_reg );

    SC_METHOD(thread_out_r_ap_vld);
    sensitive << ( ap_CS_fsm_state30 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( grp_generic_tanh_float_s_fu_51_ap_done );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000000000000000000000000001";
    grp_generic_tanh_float_s_fu_51_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "GELU_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, x, "x");
    sc_trace(mVcdFile, out_r_ap_vld, "out_r_ap_vld");
    sc_trace(mVcdFile, grp_fu_67_p2, "grp_fu_67_p2");
    sc_trace(mVcdFile, reg_85, "reg_85");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, grp_fu_62_p2, "grp_fu_62_p2");
    sc_trace(mVcdFile, reg_92, "reg_92");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, grp_fu_77_p1, "grp_fu_77_p1");
    sc_trace(mVcdFile, reg_98, "reg_98");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, grp_generic_tanh_float_s_fu_51_ap_ready, "grp_generic_tanh_float_s_fu_51_ap_ready");
    sc_trace(mVcdFile, grp_generic_tanh_float_s_fu_51_ap_done, "grp_generic_tanh_float_s_fu_51_ap_done");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, grp_fu_80_p2, "grp_fu_80_p2");
    sc_trace(mVcdFile, reg_104, "reg_104");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, x_read_reg_110, "x_read_reg_110");
    sc_trace(mVcdFile, grp_generic_tanh_float_s_fu_51_ap_return, "grp_generic_tanh_float_s_fu_51_ap_return");
    sc_trace(mVcdFile, tanh_val_reg_118, "tanh_val_reg_118");
    sc_trace(mVcdFile, grp_generic_tanh_float_s_fu_51_ap_start, "grp_generic_tanh_float_s_fu_51_ap_start");
    sc_trace(mVcdFile, grp_generic_tanh_float_s_fu_51_ap_idle, "grp_generic_tanh_float_s_fu_51_ap_idle");
    sc_trace(mVcdFile, grp_generic_tanh_float_s_fu_51_ap_start_reg, "grp_generic_tanh_float_s_fu_51_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, tmp_40_fu_73_p1, "tmp_40_fu_73_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, grp_fu_62_p0, "grp_fu_62_p0");
    sc_trace(mVcdFile, grp_fu_62_p1, "grp_fu_62_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, grp_fu_67_p0, "grp_fu_67_p0");
    sc_trace(mVcdFile, grp_fu_67_p1, "grp_fu_67_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, grp_fu_77_p0, "grp_fu_77_p0");
    sc_trace(mVcdFile, grp_fu_80_p0, "grp_fu_80_p0");
    sc_trace(mVcdFile, grp_fu_80_p1, "grp_fu_80_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("GELU.hdltvin.dat");
    mHdltvoutHandle.open("GELU.hdltvout.dat");
}

GELU::~GELU() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete GELU_AXILiteS_s_axi_U;
    delete grp_generic_tanh_float_s_fu_51;
    delete GELU_fadd_32ns_32ncg_U24;
    delete GELU_fmul_32ns_32hbi_U25;
    delete GELU_fptrunc_64nsjbC_U26;
    delete GELU_fpext_32ns_6kbM_U27;
    delete GELU_dmul_64ns_64ocq_U28;
}

void GELU::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void GELU::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_generic_tanh_float_s_fu_51_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
            grp_generic_tanh_float_s_fu_51_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_generic_tanh_float_s_fu_51_ap_ready.read())) {
            grp_generic_tanh_float_s_fu_51_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()))) {
        reg_104 = grp_fu_80_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        reg_85 = grp_fu_67_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        reg_92 = grp_fu_62_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
  esl_seteq<1,1,1>(grp_generic_tanh_float_s_fu_51_ap_done.read(), ap_const_logic_1)) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        reg_98 = grp_fu_77_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(grp_generic_tanh_float_s_fu_51_ap_done.read(), ap_const_logic_1))) {
        tanh_val_reg_118 = grp_generic_tanh_float_s_fu_51_ap_return.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        x_read_reg_110 = x.read();
    }
}

void GELU::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void GELU::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void GELU::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void GELU::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void GELU::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void GELU::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void GELU::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void GELU::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void GELU::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void GELU::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void GELU::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void GELU::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void GELU::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void GELU::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[28];
}

void GELU::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void GELU::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void GELU::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void GELU::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void GELU::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void GELU::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void GELU::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void GELU::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void GELU::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void GELU::thread_grp_fu_62_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        grp_fu_62_p0 = tanh_val_reg_118.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        grp_fu_62_p0 = reg_85.read();
    } else {
        grp_fu_62_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void GELU::thread_grp_fu_62_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        grp_fu_62_p1 = ap_const_lv32_3F800000;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        grp_fu_62_p1 = x_read_reg_110.read();
    } else {
        grp_fu_62_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void GELU::thread_grp_fu_67_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        grp_fu_67_p0 = reg_92.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        grp_fu_67_p0 = reg_85.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_fu_67_p0 = x_read_reg_110.read();
    } else {
        grp_fu_67_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void GELU::thread_grp_fu_67_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        grp_fu_67_p1 = ap_const_lv32_3F4C422A;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_67_p1 = ap_const_lv32_3D372713;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        grp_fu_67_p1 = x_read_reg_110.read();
    } else {
        grp_fu_67_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void GELU::thread_grp_fu_77_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        grp_fu_77_p0 = reg_92.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        grp_fu_77_p0 = x_read_reg_110.read();
    } else {
        grp_fu_77_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void GELU::thread_grp_fu_80_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        grp_fu_80_p0 = reg_104.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        grp_fu_80_p0 = reg_98.read();
    } else {
        grp_fu_80_p0 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void GELU::thread_grp_fu_80_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        grp_fu_80_p1 = reg_98.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        grp_fu_80_p1 = ap_const_lv64_3FE0000000000000;
    } else {
        grp_fu_80_p1 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void GELU::thread_grp_generic_tanh_float_s_fu_51_ap_start() {
    grp_generic_tanh_float_s_fu_51_ap_start = grp_generic_tanh_float_s_fu_51_ap_start_reg.read();
}

void GELU::thread_out_r_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        out_r_ap_vld = ap_const_logic_1;
    } else {
        out_r_ap_vld = ap_const_logic_0;
    }
}

void GELU::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(grp_generic_tanh_float_s_fu_51_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state20;
            } else {
                ap_NS_fsm = ap_ST_fsm_state19;
            }
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<30>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void GELU::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

