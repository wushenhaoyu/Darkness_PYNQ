// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _GELU_HH_
#define _GELU_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "generic_tanh_float_s.h"
#include "GELU_fadd_32ns_32ncg.h"
#include "GELU_fmul_32ns_32hbi.h"
#include "GELU_fptrunc_64nsjbC.h"
#include "GELU_fpext_32ns_6kbM.h"
#include "GELU_dmul_64ns_64ocq.h"
#include "GELU_AXILiteS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct GELU : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    GELU(sc_module_name name);
    SC_HAS_PROCESS(GELU);

    ~GELU();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    GELU_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* GELU_AXILiteS_s_axi_U;
    generic_tanh_float_s* grp_generic_tanh_float_s_fu_51;
    GELU_fadd_32ns_32ncg<1,4,32,32,32>* GELU_fadd_32ns_32ncg_U24;
    GELU_fmul_32ns_32hbi<1,3,32,32,32>* GELU_fmul_32ns_32hbi_U25;
    GELU_fptrunc_64nsjbC<1,1,64,32>* GELU_fptrunc_64nsjbC_U26;
    GELU_fpext_32ns_6kbM<1,1,32,64>* GELU_fpext_32ns_6kbM_U27;
    GELU_dmul_64ns_64ocq<1,5,64,64,64>* GELU_dmul_64ns_64ocq_U28;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<30> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > x;
    sc_signal< sc_logic > out_r_ap_vld;
    sc_signal< sc_lv<32> > grp_fu_67_p2;
    sc_signal< sc_lv<32> > reg_85;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_logic > ap_CS_fsm_state17;
    sc_signal< sc_lv<32> > grp_fu_62_p2;
    sc_signal< sc_lv<32> > reg_92;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_logic > ap_CS_fsm_state23;
    sc_signal< sc_lv<64> > grp_fu_77_p1;
    sc_signal< sc_lv<64> > reg_98;
    sc_signal< sc_logic > ap_CS_fsm_state19;
    sc_signal< sc_logic > grp_generic_tanh_float_s_fu_51_ap_ready;
    sc_signal< sc_logic > grp_generic_tanh_float_s_fu_51_ap_done;
    sc_signal< sc_logic > ap_CS_fsm_state24;
    sc_signal< sc_lv<64> > grp_fu_80_p2;
    sc_signal< sc_lv<64> > reg_104;
    sc_signal< sc_logic > ap_CS_fsm_state29;
    sc_signal< sc_lv<32> > x_read_reg_110;
    sc_signal< sc_lv<32> > grp_generic_tanh_float_s_fu_51_ap_return;
    sc_signal< sc_lv<32> > tanh_val_reg_118;
    sc_signal< sc_logic > grp_generic_tanh_float_s_fu_51_ap_start;
    sc_signal< sc_logic > grp_generic_tanh_float_s_fu_51_ap_idle;
    sc_signal< sc_logic > grp_generic_tanh_float_s_fu_51_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state18;
    sc_signal< sc_lv<32> > tmp_40_fu_73_p1;
    sc_signal< sc_logic > ap_CS_fsm_state30;
    sc_signal< sc_lv<32> > grp_fu_62_p0;
    sc_signal< sc_lv<32> > grp_fu_62_p1;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_logic > ap_CS_fsm_state20;
    sc_signal< sc_lv<32> > grp_fu_67_p0;
    sc_signal< sc_lv<32> > grp_fu_67_p1;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_lv<32> > grp_fu_77_p0;
    sc_signal< sc_lv<64> > grp_fu_80_p0;
    sc_signal< sc_lv<64> > grp_fu_80_p1;
    sc_signal< sc_logic > ap_CS_fsm_state25;
    sc_signal< sc_lv<30> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<30> ap_ST_fsm_state1;
    static const sc_lv<30> ap_ST_fsm_state2;
    static const sc_lv<30> ap_ST_fsm_state3;
    static const sc_lv<30> ap_ST_fsm_state4;
    static const sc_lv<30> ap_ST_fsm_state5;
    static const sc_lv<30> ap_ST_fsm_state6;
    static const sc_lv<30> ap_ST_fsm_state7;
    static const sc_lv<30> ap_ST_fsm_state8;
    static const sc_lv<30> ap_ST_fsm_state9;
    static const sc_lv<30> ap_ST_fsm_state10;
    static const sc_lv<30> ap_ST_fsm_state11;
    static const sc_lv<30> ap_ST_fsm_state12;
    static const sc_lv<30> ap_ST_fsm_state13;
    static const sc_lv<30> ap_ST_fsm_state14;
    static const sc_lv<30> ap_ST_fsm_state15;
    static const sc_lv<30> ap_ST_fsm_state16;
    static const sc_lv<30> ap_ST_fsm_state17;
    static const sc_lv<30> ap_ST_fsm_state18;
    static const sc_lv<30> ap_ST_fsm_state19;
    static const sc_lv<30> ap_ST_fsm_state20;
    static const sc_lv<30> ap_ST_fsm_state21;
    static const sc_lv<30> ap_ST_fsm_state22;
    static const sc_lv<30> ap_ST_fsm_state23;
    static const sc_lv<30> ap_ST_fsm_state24;
    static const sc_lv<30> ap_ST_fsm_state25;
    static const sc_lv<30> ap_ST_fsm_state26;
    static const sc_lv<30> ap_ST_fsm_state27;
    static const sc_lv<30> ap_ST_fsm_state28;
    static const sc_lv<30> ap_ST_fsm_state29;
    static const sc_lv<30> ap_ST_fsm_state30;
    static const sc_lv<32> ap_const_lv32_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_16;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1C;
    static const sc_lv<32> ap_const_lv32_11;
    static const sc_lv<32> ap_const_lv32_1D;
    static const sc_lv<32> ap_const_lv32_3F800000;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_13;
    static const sc_lv<32> ap_const_lv32_3D372713;
    static const sc_lv<32> ap_const_lv32_3F4C422A;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<64> ap_const_lv64_3FE0000000000000;
    static const sc_lv<32> ap_const_lv32_18;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state17();
    void thread_ap_CS_fsm_state18();
    void thread_ap_CS_fsm_state19();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state20();
    void thread_ap_CS_fsm_state23();
    void thread_ap_CS_fsm_state24();
    void thread_ap_CS_fsm_state25();
    void thread_ap_CS_fsm_state29();
    void thread_ap_CS_fsm_state30();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_grp_fu_62_p0();
    void thread_grp_fu_62_p1();
    void thread_grp_fu_67_p0();
    void thread_grp_fu_67_p1();
    void thread_grp_fu_77_p0();
    void thread_grp_fu_80_p0();
    void thread_grp_fu_80_p1();
    void thread_grp_generic_tanh_float_s_fu_51_ap_start();
    void thread_out_r_ap_vld();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
