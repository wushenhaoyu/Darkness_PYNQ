// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="LayerNorm,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=4,HLS_SYN_FF=2962,HLS_SYN_LUT=3372,HLS_VERSION=2018_3}" *)

module LayerNorm (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 78'd1;
parameter    ap_ST_fsm_state2 = 78'd2;
parameter    ap_ST_fsm_state3 = 78'd4;
parameter    ap_ST_fsm_state4 = 78'd8;
parameter    ap_ST_fsm_state5 = 78'd16;
parameter    ap_ST_fsm_state6 = 78'd32;
parameter    ap_ST_fsm_state7 = 78'd64;
parameter    ap_ST_fsm_state8 = 78'd128;
parameter    ap_ST_fsm_state9 = 78'd256;
parameter    ap_ST_fsm_state10 = 78'd512;
parameter    ap_ST_fsm_state11 = 78'd1024;
parameter    ap_ST_fsm_state12 = 78'd2048;
parameter    ap_ST_fsm_state13 = 78'd4096;
parameter    ap_ST_fsm_state14 = 78'd8192;
parameter    ap_ST_fsm_state15 = 78'd16384;
parameter    ap_ST_fsm_state16 = 78'd32768;
parameter    ap_ST_fsm_state17 = 78'd65536;
parameter    ap_ST_fsm_state18 = 78'd131072;
parameter    ap_ST_fsm_state19 = 78'd262144;
parameter    ap_ST_fsm_state20 = 78'd524288;
parameter    ap_ST_fsm_state21 = 78'd1048576;
parameter    ap_ST_fsm_state22 = 78'd2097152;
parameter    ap_ST_fsm_state23 = 78'd4194304;
parameter    ap_ST_fsm_state24 = 78'd8388608;
parameter    ap_ST_fsm_state25 = 78'd16777216;
parameter    ap_ST_fsm_state26 = 78'd33554432;
parameter    ap_ST_fsm_state27 = 78'd67108864;
parameter    ap_ST_fsm_state28 = 78'd134217728;
parameter    ap_ST_fsm_state29 = 78'd268435456;
parameter    ap_ST_fsm_state30 = 78'd536870912;
parameter    ap_ST_fsm_state31 = 78'd1073741824;
parameter    ap_ST_fsm_state32 = 78'd2147483648;
parameter    ap_ST_fsm_state33 = 78'd4294967296;
parameter    ap_ST_fsm_state34 = 78'd8589934592;
parameter    ap_ST_fsm_state35 = 78'd17179869184;
parameter    ap_ST_fsm_state36 = 78'd34359738368;
parameter    ap_ST_fsm_state37 = 78'd68719476736;
parameter    ap_ST_fsm_state38 = 78'd137438953472;
parameter    ap_ST_fsm_state39 = 78'd274877906944;
parameter    ap_ST_fsm_state40 = 78'd549755813888;
parameter    ap_ST_fsm_state41 = 78'd1099511627776;
parameter    ap_ST_fsm_state42 = 78'd2199023255552;
parameter    ap_ST_fsm_state43 = 78'd4398046511104;
parameter    ap_ST_fsm_state44 = 78'd8796093022208;
parameter    ap_ST_fsm_state45 = 78'd17592186044416;
parameter    ap_ST_fsm_state46 = 78'd35184372088832;
parameter    ap_ST_fsm_state47 = 78'd70368744177664;
parameter    ap_ST_fsm_state48 = 78'd140737488355328;
parameter    ap_ST_fsm_state49 = 78'd281474976710656;
parameter    ap_ST_fsm_state50 = 78'd562949953421312;
parameter    ap_ST_fsm_state51 = 78'd1125899906842624;
parameter    ap_ST_fsm_state52 = 78'd2251799813685248;
parameter    ap_ST_fsm_state53 = 78'd4503599627370496;
parameter    ap_ST_fsm_state54 = 78'd9007199254740992;
parameter    ap_ST_fsm_state55 = 78'd18014398509481984;
parameter    ap_ST_fsm_state56 = 78'd36028797018963968;
parameter    ap_ST_fsm_state57 = 78'd72057594037927936;
parameter    ap_ST_fsm_state58 = 78'd144115188075855872;
parameter    ap_ST_fsm_state59 = 78'd288230376151711744;
parameter    ap_ST_fsm_state60 = 78'd576460752303423488;
parameter    ap_ST_fsm_state61 = 78'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 78'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 78'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 78'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 78'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 78'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 78'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 78'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 78'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 78'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 78'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 78'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 78'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 78'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 78'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 78'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 78'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 78'd151115727451828646838272;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [77:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [15:0] num_features_V;
wire   [15:0] height_V;
wire   [15:0] width_V;
wire   [31:0] in_data_V;
wire   [31:0] out_data_V;
wire   [31:0] gamma_V;
wire   [31:0] beta_V;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state5;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state71;
reg    gmem_blk_n_AW;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state73;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state78;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [15:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [15:0] width_V_read_reg_719;
reg   [15:0] height_V_read_reg_724;
reg   [15:0] num_features_V_read_reg_729;
wire   [31:0] tmp_34_cast_fu_327_p1;
reg   [31:0] tmp_34_cast_reg_735;
wire   [31:0] tmp_36_cast_fu_341_p1;
reg   [31:0] tmp_36_cast_reg_740;
wire   [48:0] tmp_38_cast_fu_355_p1;
reg   [48:0] tmp_38_cast_reg_745;
wire   [48:0] tmp_39_cast_fu_369_p1;
reg   [48:0] tmp_39_cast_reg_750;
wire   [31:0] rhs_V_fu_373_p1;
reg   [31:0] rhs_V_reg_756;
wire   [47:0] rhs_V_1_cast_fu_381_p1;
reg   [47:0] rhs_V_1_cast_reg_761;
wire   [16:0] p_tr4_fu_384_p1;
reg   [16:0] p_tr4_reg_767;
wire   [31:0] next_mul1_fu_388_p2;
reg   [31:0] next_mul1_reg_773;
wire    ap_CS_fsm_state2;
wire   [15:0] h_fu_398_p2;
reg   [15:0] h_reg_781;
wire   [15:0] w_fu_413_p2;
reg   [15:0] w_reg_789;
wire    ap_CS_fsm_state3;
wire   [47:0] tmp_19_cast_fu_425_p1;
reg   [47:0] tmp_19_cast_reg_794;
wire   [0:0] exitcond2_fu_408_p2;
wire   [15:0] c_fu_434_p2;
reg   [15:0] c_reg_803;
wire    ap_CS_fsm_state4;
wire   [47:0] next_mul_fu_440_p2;
reg   [47:0] next_mul_reg_808;
wire   [0:0] exitcond_fu_429_p2;
reg   [31:0] gmem_addr_reg_813;
reg  signed [15:0] x_V_reg_829;
wire   [15:0] sum_V_fu_487_p2;
wire    ap_CS_fsm_state13;
reg   [15:0] variance_V_reg_845;
wire    ap_CS_fsm_state33;
wire  signed [16:0] rhs_V_1_fu_541_p1;
reg  signed [16:0] rhs_V_1_reg_850;
wire   [15:0] c_1_fu_550_p2;
reg   [15:0] c_1_reg_858;
wire    ap_CS_fsm_state34;
wire   [47:0] next_mul2_fu_560_p2;
reg   [47:0] next_mul2_reg_863;
wire   [0:0] exitcond1_fu_545_p2;
reg   [31:0] gmem_addr_1_reg_868;
reg   [31:0] gmem_addr_2_reg_874;
reg   [31:0] gmem_addr_3_reg_880;
reg   [31:0] gmem_addr_4_reg_886;
wire   [12:0] grp_sqrt_fixed_17_9_s_fu_312_ap_return;
reg   [12:0] agg_result_V_i_reg_892;
wire    ap_CS_fsm_state41;
reg  signed [15:0] x_V_1_reg_897;
wire    ap_CS_fsm_state43;
reg  signed [15:0] gmem_addr_2_read_reg_912;
wire   [15:0] grp_fu_653_p2;
reg   [15:0] tmp_27_reg_917;
reg   [15:0] p_Val2_13_reg_922;
reg   [15:0] tmp_28_reg_927;
wire    ap_CS_fsm_state72;
reg   [15:0] i_op_assign_reg_210;
reg   [31:0] ret_V_3_reg_221;
reg   [15:0] i_op_assign_1_reg_233;
wire   [0:0] exitcond3_fu_393_p2;
reg  signed [15:0] p_Val2_4_reg_244;
reg  signed [15:0] p_Val2_6_reg_256;
reg   [15:0] i_op_assign_2_reg_268;
reg   [47:0] ret_V_2_reg_279;
reg   [15:0] i_op_assign_3_reg_290;
reg   [47:0] ret_V_5_reg_301;
wire   [63:0] in_data_V2_sum_cast_fu_459_p1;
wire   [63:0] in_data_V2_sum9_cast_fu_579_p1;
wire   [63:0] gamma_V6_sum_cast_fu_594_p1;
wire   [63:0] beta_V8_sum_cast_fu_609_p1;
wire   [63:0] out_data_V4_sum_cast_fu_624_p1;
reg    ap_reg_ioackin_gmem_ARREADY;
reg    ap_sig_ioackin_gmem_ARREADY;
reg    ap_sig_ioackin_gmem_AWREADY;
reg    ap_block_state63_io;
reg    ap_reg_ioackin_gmem_AWREADY;
reg    ap_reg_ioackin_gmem_WREADY;
reg    ap_sig_ioackin_gmem_WREADY;
wire   [30:0] tmp_43_fu_317_p4;
wire   [30:0] tmp_44_fu_331_p4;
wire   [30:0] tmp_45_fu_345_p4;
wire   [30:0] tmp_46_fu_359_p4;
wire   [31:0] ret_V_fu_685_p2;
wire   [31:0] i_op_assign_1_cast3_fu_404_p1;
wire   [31:0] tmp_19_fu_419_p2;
wire   [47:0] tmp_20_fu_445_p2;
wire   [48:0] tmp_20_cast_cast_fu_450_p1;
wire   [48:0] in_data_V2_sum_fu_454_p2;
wire  signed [16:0] grp_fu_473_p0;
wire  signed [16:0] grp_fu_482_p0;
wire  signed [23:0] grp_fu_692_p3;
wire   [15:0] grp_fu_473_p2;
wire  signed [15:0] r_V_fu_512_p1;
wire   [15:0] grp_fu_482_p2;
wire   [15:0] tmp_48_fu_520_p1;
wire  signed [23:0] grp_fu_701_p3;
wire   [47:0] tmp_24_fu_565_p2;
wire   [48:0] tmp_24_cast_cast_fu_570_p1;
wire   [48:0] in_data_V2_sum9_fu_574_p2;
wire   [31:0] lhs_V_3_cast_fu_556_p1;
wire   [31:0] gamma_V6_sum_fu_589_p2;
wire   [31:0] beta_V8_sum_fu_604_p2;
wire   [48:0] out_data_V4_sum_fu_619_p2;
wire  signed [16:0] lhs_V_3_fu_634_p1;
wire   [16:0] ret_V_10_fu_637_p2;
wire   [24:0] grp_fu_653_p0;
wire   [13:0] grp_fu_653_p1;
wire  signed [15:0] normalized_V_fu_659_p1;
wire  signed [23:0] grp_fu_710_p3;
wire   [15:0] ret_V_fu_685_p0;
wire   [15:0] ret_V_fu_685_p1;
wire  signed [15:0] grp_fu_692_p0;
wire  signed [23:0] tmp_26_fu_492_p1;
wire  signed [15:0] grp_fu_692_p1;
wire   [23:0] grp_fu_692_p2;
wire  signed [15:0] grp_fu_701_p0;
wire  signed [23:0] tmp_fu_516_p1;
wire  signed [15:0] grp_fu_701_p1;
wire   [23:0] grp_fu_701_p2;
wire   [23:0] grp_fu_710_p2;
reg    grp_fu_473_ap_start;
wire    grp_fu_473_ap_done;
reg    grp_fu_482_ap_start;
wire    grp_fu_482_ap_done;
reg    grp_fu_653_ap_start;
wire    grp_fu_653_ap_done;
reg    grp_fu_653_ce;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state69;
reg   [77:0] ap_NS_fsm;
wire   [24:0] grp_fu_653_p10;
wire   [31:0] ret_V_fu_685_p00;
wire   [31:0] ret_V_fu_685_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 78'd1;
#0 ap_reg_ioackin_gmem_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_WREADY = 1'b0;
end

LayerNorm_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
LayerNorm_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .num_features_V(num_features_V),
    .height_V(height_V),
    .width_V(width_V),
    .in_data_V(in_data_V),
    .out_data_V(out_data_V),
    .gamma_V(gamma_V),
    .beta_V(beta_V)
);

LayerNorm_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
LayerNorm_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_4_reg_886),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(tmp_28_reg_927),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

sqrt_fixed_17_9_s grp_sqrt_fixed_17_9_s_fu_312(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .x_V(variance_V_reg_845),
    .ap_return(grp_sqrt_fixed_17_9_s_fu_312_ap_return)
);

LayerNorm_sdiv_17bkb #(
    .ID( 1 ),
    .NUM_STAGE( 21 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 16 ))
LayerNorm_sdiv_17bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_473_ap_start),
    .done(grp_fu_473_ap_done),
    .din0(grp_fu_473_p0),
    .din1(p_tr4_reg_767),
    .ce(1'b1),
    .dout(grp_fu_473_p2)
);

LayerNorm_sdiv_17bkb #(
    .ID( 1 ),
    .NUM_STAGE( 21 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 16 ))
LayerNorm_sdiv_17bkb_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_482_ap_start),
    .done(grp_fu_482_ap_done),
    .din0(grp_fu_482_p0),
    .din1(p_tr4_reg_767),
    .ce(1'b1),
    .dout(grp_fu_482_p2)
);

LayerNorm_sdiv_25cud #(
    .ID( 1 ),
    .NUM_STAGE( 29 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 16 ))
LayerNorm_sdiv_25cud_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_653_ap_start),
    .done(grp_fu_653_ap_done),
    .din0(grp_fu_653_p0),
    .din1(grp_fu_653_p1),
    .ce(grp_fu_653_ce),
    .dout(grp_fu_653_p2)
);

LayerNorm_mul_muldEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
LayerNorm_mul_muldEe_U5(
    .din0(ret_V_fu_685_p0),
    .din1(ret_V_fu_685_p1),
    .dout(ret_V_fu_685_p2)
);

LayerNorm_mac_muleOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
LayerNorm_mac_muleOg_U6(
    .din0(grp_fu_692_p0),
    .din1(grp_fu_692_p1),
    .din2(grp_fu_692_p2),
    .dout(grp_fu_692_p3)
);

LayerNorm_mac_mulfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
LayerNorm_mac_mulfYi_U7(
    .din0(grp_fu_701_p0),
    .din1(grp_fu_701_p1),
    .din2(grp_fu_701_p2),
    .dout(grp_fu_701_p3)
);

LayerNorm_mac_muleOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
LayerNorm_mac_muleOg_U8(
    .din0(gmem_addr_2_read_reg_912),
    .din1(normalized_V_fu_659_p1),
    .din2(grp_fu_710_p2),
    .dout(grp_fu_710_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_ARREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state64)) | ((1'b0 == ap_block_state63_io) & (1'b1 == ap_CS_fsm_state63)) | ((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b0;
        end else if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state64)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state63)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state63)) begin
            if ((1'b0 == ap_block_state63_io)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b0;
            end else if ((gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state73)) begin
            if ((ap_sig_ioackin_gmem_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b0;
            end else if ((gmem_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_393_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_op_assign_1_reg_233 <= 16'd0;
    end else if (((exitcond1_fu_545_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
        i_op_assign_1_reg_233 <= w_reg_789;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_408_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_op_assign_2_reg_268 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        i_op_assign_2_reg_268 <= c_reg_803;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state78))) begin
        i_op_assign_3_reg_290 <= c_1_reg_858;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        i_op_assign_3_reg_290 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_408_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_op_assign_reg_210 <= h_reg_781;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_op_assign_reg_210 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_408_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_Val2_4_reg_244 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        p_Val2_4_reg_244 <= sum_V_fu_487_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_408_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_Val2_6_reg_256 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        p_Val2_6_reg_256 <= {{grp_fu_692_p3[23:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_408_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ret_V_2_reg_279 <= 48'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        ret_V_2_reg_279 <= next_mul_reg_808;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_408_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ret_V_3_reg_221 <= next_mul1_reg_773;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ret_V_3_reg_221 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state78))) begin
        ret_V_5_reg_301 <= next_mul2_reg_863;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        ret_V_5_reg_301 <= 48'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        agg_result_V_i_reg_892 <= grp_sqrt_fixed_17_9_s_fu_312_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        c_1_reg_858 <= c_1_fu_550_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_reg_803 <= c_fu_434_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_545_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state34))) begin
        gmem_addr_1_reg_868 <= in_data_V2_sum9_cast_fu_579_p1;
        gmem_addr_2_reg_874 <= gamma_V6_sum_cast_fu_594_p1;
        gmem_addr_3_reg_880 <= beta_V8_sum_cast_fu_609_p1;
        gmem_addr_4_reg_886 <= out_data_V4_sum_cast_fu_624_p1;
        next_mul2_reg_863 <= next_mul2_fu_560_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state70))) begin
        gmem_addr_2_read_reg_912 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_429_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        gmem_addr_reg_813 <= in_data_V2_sum_cast_fu_459_p1;
        next_mul_reg_808 <= next_mul_fu_440_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        h_reg_781 <= h_fu_398_p2;
        next_mul1_reg_773 <= next_mul1_fu_388_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        height_V_read_reg_724 <= height_V;
        num_features_V_read_reg_729 <= num_features_V;
        p_tr4_reg_767[15 : 0] <= p_tr4_fu_384_p1[15 : 0];
        rhs_V_1_cast_reg_761[31 : 0] <= rhs_V_1_cast_fu_381_p1[31 : 0];
        rhs_V_reg_756[15 : 0] <= rhs_V_fu_373_p1[15 : 0];
        tmp_34_cast_reg_735[30 : 0] <= tmp_34_cast_fu_327_p1[30 : 0];
        tmp_36_cast_reg_740[30 : 0] <= tmp_36_cast_fu_341_p1[30 : 0];
        tmp_38_cast_reg_745[30 : 0] <= tmp_38_cast_fu_355_p1[30 : 0];
        tmp_39_cast_reg_750[30 : 0] <= tmp_39_cast_fu_369_p1[30 : 0];
        width_V_read_reg_719 <= width_V;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state71))) begin
        p_Val2_13_reg_922 <= gmem_RDATA;
        tmp_27_reg_917 <= grp_fu_653_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        rhs_V_1_reg_850 <= rhs_V_1_fu_541_p1;
        variance_V_reg_845 <= {{grp_fu_701_p3[23:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_408_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_19_cast_reg_794[31 : 0] <= tmp_19_cast_fu_425_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        tmp_28_reg_927 <= {{grp_fu_710_p3[23:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        w_reg_789 <= w_fu_413_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
        x_V_1_reg_897 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        x_V_reg_829 <= gmem_RDATA;
    end
end

always @ (*) begin
    if (((exitcond3_fu_393_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_fu_393_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_AWREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_WREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY;
    end else begin
        ap_sig_ioackin_gmem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state64)) begin
            gmem_ARADDR = gmem_addr_3_reg_880;
        end else if ((1'b1 == ap_CS_fsm_state63)) begin
            gmem_ARADDR = gmem_addr_2_reg_874;
        end else if ((1'b1 == ap_CS_fsm_state35)) begin
            gmem_ARADDR = gmem_addr_1_reg_868;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            gmem_ARADDR = gmem_addr_reg_813;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state64)) | ((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state63)) | ((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state35)) | ((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state63))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state78))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state71)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state70)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state42)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state73))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state5))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state12))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_fu_429_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        grp_fu_473_ap_start = 1'b1;
    end else begin
        grp_fu_473_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_429_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        grp_fu_482_ap_start = 1'b1;
    end else begin
        grp_fu_482_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_653_ap_start = 1'b1;
    end else begin
        grp_fu_653_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state63))) begin
        grp_fu_653_ce = 1'b1;
    end else begin
        grp_fu_653_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond3_fu_393_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond2_fu_408_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_fu_429_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            if (((exitcond1_fu_545_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            if (((1'b0 == ap_block_state63_io) & (1'b1 == ap_CS_fsm_state63))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_state64 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state64))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state70))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end
        end
        ap_ST_fsm_state71 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state71))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            if (((ap_sig_ioackin_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state73))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state78))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

always @ (*) begin
    ap_block_state63_io = ((ap_sig_ioackin_gmem_AWREADY == 1'b0) | (ap_sig_ioackin_gmem_ARREADY == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign beta_V8_sum_cast_fu_609_p1 = beta_V8_sum_fu_604_p2;

assign beta_V8_sum_fu_604_p2 = (tmp_34_cast_reg_735 + lhs_V_3_cast_fu_556_p1);

assign c_1_fu_550_p2 = (i_op_assign_3_reg_290 + 16'd1);

assign c_fu_434_p2 = (i_op_assign_2_reg_268 + 16'd1);

assign exitcond1_fu_545_p2 = ((i_op_assign_3_reg_290 == num_features_V_read_reg_729) ? 1'b1 : 1'b0);

assign exitcond2_fu_408_p2 = ((i_op_assign_1_reg_233 == width_V_read_reg_719) ? 1'b1 : 1'b0);

assign exitcond3_fu_393_p2 = ((i_op_assign_reg_210 == height_V_read_reg_724) ? 1'b1 : 1'b0);

assign exitcond_fu_429_p2 = ((i_op_assign_2_reg_268 == num_features_V_read_reg_729) ? 1'b1 : 1'b0);

assign gamma_V6_sum_cast_fu_594_p1 = gamma_V6_sum_fu_589_p2;

assign gamma_V6_sum_fu_589_p2 = (tmp_36_cast_reg_740 + lhs_V_3_cast_fu_556_p1);

assign grp_fu_473_p0 = p_Val2_4_reg_244;

assign grp_fu_482_p0 = p_Val2_6_reg_256;

assign grp_fu_653_p0 = {{ret_V_10_fu_637_p2}, {8'd0}};

assign grp_fu_653_p1 = grp_fu_653_p10;

assign grp_fu_653_p10 = agg_result_V_i_reg_892;

assign grp_fu_692_p0 = tmp_26_fu_492_p1;

assign grp_fu_692_p1 = tmp_26_fu_492_p1;

assign grp_fu_692_p2 = {{p_Val2_6_reg_256}, {8'd0}};

assign grp_fu_701_p0 = tmp_fu_516_p1;

assign grp_fu_701_p1 = tmp_fu_516_p1;

assign grp_fu_701_p2 = {{tmp_48_fu_520_p1}, {8'd0}};

assign grp_fu_710_p2 = {{p_Val2_13_reg_922}, {8'd0}};

assign h_fu_398_p2 = (i_op_assign_reg_210 + 16'd1);

assign i_op_assign_1_cast3_fu_404_p1 = i_op_assign_1_reg_233;

assign in_data_V2_sum9_cast_fu_579_p1 = in_data_V2_sum9_fu_574_p2;

assign in_data_V2_sum9_fu_574_p2 = (tmp_39_cast_reg_750 + tmp_24_cast_cast_fu_570_p1);

assign in_data_V2_sum_cast_fu_459_p1 = in_data_V2_sum_fu_454_p2;

assign in_data_V2_sum_fu_454_p2 = (tmp_20_cast_cast_fu_450_p1 + tmp_39_cast_reg_750);

assign lhs_V_3_cast_fu_556_p1 = i_op_assign_3_reg_290;

assign lhs_V_3_fu_634_p1 = x_V_1_reg_897;

assign next_mul1_fu_388_p2 = (ret_V_3_reg_221 + rhs_V_reg_756);

assign next_mul2_fu_560_p2 = (ret_V_5_reg_301 + rhs_V_1_cast_reg_761);

assign next_mul_fu_440_p2 = (rhs_V_1_cast_reg_761 + ret_V_2_reg_279);

assign normalized_V_fu_659_p1 = tmp_27_reg_917[15:0];

assign out_data_V4_sum_cast_fu_624_p1 = out_data_V4_sum_fu_619_p2;

assign out_data_V4_sum_fu_619_p2 = (tmp_38_cast_reg_745 + tmp_24_cast_cast_fu_570_p1);

assign p_tr4_fu_384_p1 = num_features_V;

assign r_V_fu_512_p1 = grp_fu_473_p2[15:0];

assign ret_V_10_fu_637_p2 = ($signed(lhs_V_3_fu_634_p1) - $signed(rhs_V_1_reg_850));

assign ret_V_fu_685_p0 = ret_V_fu_685_p00;

assign ret_V_fu_685_p00 = width_V;

assign ret_V_fu_685_p1 = ret_V_fu_685_p10;

assign ret_V_fu_685_p10 = height_V;

assign rhs_V_1_cast_fu_381_p1 = ret_V_fu_685_p2;

assign rhs_V_1_fu_541_p1 = r_V_fu_512_p1;

assign rhs_V_fu_373_p1 = width_V;

assign sum_V_fu_487_p2 = ($signed(x_V_reg_829) + $signed(p_Val2_4_reg_244));

assign tmp_19_cast_fu_425_p1 = tmp_19_fu_419_p2;

assign tmp_19_fu_419_p2 = (ret_V_3_reg_221 + i_op_assign_1_cast3_fu_404_p1);

assign tmp_20_cast_cast_fu_450_p1 = tmp_20_fu_445_p2;

assign tmp_20_fu_445_p2 = (ret_V_2_reg_279 + tmp_19_cast_reg_794);

assign tmp_24_cast_cast_fu_570_p1 = tmp_24_fu_565_p2;

assign tmp_24_fu_565_p2 = (tmp_19_cast_reg_794 + ret_V_5_reg_301);

assign tmp_26_fu_492_p1 = x_V_reg_829;

assign tmp_34_cast_fu_327_p1 = tmp_43_fu_317_p4;

assign tmp_36_cast_fu_341_p1 = tmp_44_fu_331_p4;

assign tmp_38_cast_fu_355_p1 = tmp_45_fu_345_p4;

assign tmp_39_cast_fu_369_p1 = tmp_46_fu_359_p4;

assign tmp_43_fu_317_p4 = {{beta_V[31:1]}};

assign tmp_44_fu_331_p4 = {{gamma_V[31:1]}};

assign tmp_45_fu_345_p4 = {{out_data_V[31:1]}};

assign tmp_46_fu_359_p4 = {{in_data_V[31:1]}};

assign tmp_48_fu_520_p1 = grp_fu_482_p2[15:0];

assign tmp_fu_516_p1 = r_V_fu_512_p1;

assign w_fu_413_p2 = (i_op_assign_1_reg_233 + 16'd1);

always @ (posedge ap_clk) begin
    tmp_34_cast_reg_735[31] <= 1'b0;
    tmp_36_cast_reg_740[31] <= 1'b0;
    tmp_38_cast_reg_745[48:31] <= 18'b000000000000000000;
    tmp_39_cast_reg_750[48:31] <= 18'b000000000000000000;
    rhs_V_reg_756[31:16] <= 16'b0000000000000000;
    rhs_V_1_cast_reg_761[47:32] <= 16'b0000000000000000;
    p_tr4_reg_767[16] <= 1'b0;
    tmp_19_cast_reg_794[47:32] <= 16'b0000000000000000;
end

endmodule //LayerNorm
