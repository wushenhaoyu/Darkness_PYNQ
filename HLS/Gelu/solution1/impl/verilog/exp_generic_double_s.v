// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module exp_generic_double_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] x;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
reg    ap_block_pp0_stage0_11001;
wire   [7:0] table_exp_Z1_array_s_address0;
reg    table_exp_Z1_array_s_ce0;
wire   [57:0] table_exp_Z1_array_s_q0;
wire   [7:0] table_f_Z3_array_V_address0;
reg    table_f_Z3_array_V_ce0;
wire   [25:0] table_f_Z3_array_V_q0;
wire   [7:0] table_f_Z3_array_V_address1;
reg    table_f_Z3_array_V_ce1;
wire   [25:0] table_f_Z3_array_V_q1;
wire   [7:0] table_f_Z2_array_V_address0;
reg    table_f_Z2_array_V_ce0;
wire   [41:0] table_f_Z2_array_V_q0;
wire   [0:0] p_Result_23_fu_265_p3;
reg   [0:0] p_Result_23_reg_1189;
reg   [0:0] p_Result_23_reg_1189_pp0_iter1_reg;
reg   [0:0] p_Result_23_reg_1189_pp0_iter2_reg;
reg   [0:0] p_Result_23_reg_1189_pp0_iter3_reg;
reg   [0:0] p_Result_23_reg_1189_pp0_iter4_reg;
reg   [0:0] p_Result_23_reg_1189_pp0_iter5_reg;
reg   [0:0] p_Result_23_reg_1189_pp0_iter6_reg;
reg   [0:0] p_Result_23_reg_1189_pp0_iter7_reg;
reg   [0:0] p_Result_23_reg_1189_pp0_iter8_reg;
reg   [0:0] p_Result_23_reg_1189_pp0_iter9_reg;
reg   [0:0] p_Result_23_reg_1189_pp0_iter10_reg;
reg   [0:0] p_Result_23_reg_1189_pp0_iter11_reg;
wire   [0:0] not_demorgan_fu_299_p2;
reg   [0:0] not_demorgan_reg_1196;
reg   [0:0] not_demorgan_reg_1196_pp0_iter1_reg;
reg   [0:0] not_demorgan_reg_1196_pp0_iter2_reg;
reg   [0:0] not_demorgan_reg_1196_pp0_iter3_reg;
reg   [0:0] not_demorgan_reg_1196_pp0_iter4_reg;
reg   [0:0] not_demorgan_reg_1196_pp0_iter5_reg;
reg   [0:0] not_demorgan_reg_1196_pp0_iter6_reg;
reg   [0:0] not_demorgan_reg_1196_pp0_iter7_reg;
reg   [0:0] not_demorgan_reg_1196_pp0_iter8_reg;
reg   [0:0] not_demorgan_reg_1196_pp0_iter9_reg;
reg   [0:0] not_demorgan_reg_1196_pp0_iter10_reg;
wire   [0:0] tmp_4_i_fu_311_p2;
reg   [0:0] tmp_4_i_reg_1202;
reg   [0:0] tmp_4_i_reg_1202_pp0_iter1_reg;
reg   [0:0] tmp_4_i_reg_1202_pp0_iter2_reg;
reg   [0:0] tmp_4_i_reg_1202_pp0_iter3_reg;
reg   [0:0] tmp_4_i_reg_1202_pp0_iter4_reg;
reg   [0:0] tmp_4_i_reg_1202_pp0_iter5_reg;
reg   [0:0] tmp_4_i_reg_1202_pp0_iter6_reg;
reg   [0:0] tmp_4_i_reg_1202_pp0_iter7_reg;
reg   [0:0] tmp_4_i_reg_1202_pp0_iter8_reg;
reg   [0:0] tmp_4_i_reg_1202_pp0_iter9_reg;
reg   [0:0] tmp_4_i_reg_1202_pp0_iter10_reg;
reg   [0:0] tmp_4_i_reg_1202_pp0_iter11_reg;
wire  signed [70:0] m_frac_l_V_2_cast_fu_357_p1;
reg  signed [70:0] m_frac_l_V_2_cast_reg_1209;
wire   [0:0] isNeg_fu_361_p3;
reg   [0:0] isNeg_reg_1214;
wire  signed [31:0] m_exp_1_cast_fu_387_p1;
reg  signed [31:0] m_exp_1_cast_reg_1219;
wire  signed [70:0] r_V_13_fu_415_p3;
reg  signed [70:0] r_V_13_reg_1224;
reg  signed [70:0] r_V_13_reg_1224_pp0_iter1_reg;
reg  signed [70:0] r_V_13_reg_1224_pp0_iter2_reg;
reg  signed [70:0] r_V_13_reg_1224_pp0_iter3_reg;
reg   [63:0] m_fix_l_V_reg_1229;
reg  signed [15:0] m_fix_hi_V_reg_1235;
reg   [0:0] p_Result_24_reg_1240;
wire   [0:0] tmp_23_fu_451_p2;
reg   [0:0] tmp_23_reg_1245;
reg   [0:0] tmp_23_reg_1245_pp0_iter1_reg;
reg   [0:0] tmp_23_reg_1245_pp0_iter2_reg;
reg   [0:0] tmp_23_reg_1245_pp0_iter3_reg;
reg   [0:0] tmp_23_reg_1245_pp0_iter4_reg;
reg   [0:0] tmp_23_reg_1245_pp0_iter5_reg;
reg   [0:0] tmp_23_reg_1245_pp0_iter6_reg;
reg   [0:0] tmp_23_reg_1245_pp0_iter7_reg;
reg   [0:0] tmp_23_reg_1245_pp0_iter8_reg;
reg   [0:0] tmp_23_reg_1245_pp0_iter9_reg;
reg   [0:0] tmp_23_reg_1245_pp0_iter10_reg;
reg   [0:0] tmp_47_reg_1253;
reg   [0:0] tmp_47_reg_1253_pp0_iter1_reg;
reg   [0:0] tmp_47_reg_1253_pp0_iter2_reg;
reg   [0:0] tmp_47_reg_1253_pp0_iter3_reg;
reg   [0:0] tmp_47_reg_1253_pp0_iter4_reg;
reg   [0:0] tmp_47_reg_1253_pp0_iter5_reg;
reg   [0:0] tmp_47_reg_1253_pp0_iter6_reg;
reg   [0:0] tmp_47_reg_1253_pp0_iter7_reg;
reg   [0:0] tmp_47_reg_1253_pp0_iter8_reg;
reg   [0:0] tmp_47_reg_1253_pp0_iter9_reg;
reg   [0:0] tmp_47_reg_1253_pp0_iter10_reg;
reg   [0:0] tmp_47_reg_1253_pp0_iter11_reg;
wire  signed [12:0] r_exp_V_3_fu_531_p3;
reg  signed [12:0] r_exp_V_3_reg_1259;
reg  signed [12:0] r_exp_V_3_reg_1259_pp0_iter2_reg;
reg  signed [12:0] r_exp_V_3_reg_1259_pp0_iter3_reg;
reg  signed [12:0] r_exp_V_3_reg_1259_pp0_iter4_reg;
reg  signed [12:0] r_exp_V_3_reg_1259_pp0_iter5_reg;
reg  signed [12:0] r_exp_V_3_reg_1259_pp0_iter6_reg;
reg  signed [12:0] r_exp_V_3_reg_1259_pp0_iter7_reg;
reg  signed [12:0] r_exp_V_3_reg_1259_pp0_iter8_reg;
reg  signed [12:0] r_exp_V_3_reg_1259_pp0_iter9_reg;
reg  signed [12:0] r_exp_V_3_reg_1259_pp0_iter10_reg;
wire   [0:0] tmp_25_fu_554_p2;
reg   [0:0] tmp_25_reg_1266;
reg   [0:0] tmp_25_reg_1266_pp0_iter2_reg;
reg   [0:0] tmp_25_reg_1266_pp0_iter3_reg;
reg   [0:0] tmp_25_reg_1266_pp0_iter4_reg;
reg   [0:0] tmp_25_reg_1266_pp0_iter5_reg;
reg   [0:0] tmp_25_reg_1266_pp0_iter6_reg;
reg   [0:0] tmp_25_reg_1266_pp0_iter7_reg;
reg   [0:0] tmp_25_reg_1266_pp0_iter8_reg;
reg   [0:0] tmp_25_reg_1266_pp0_iter9_reg;
reg   [0:0] tmp_25_reg_1266_pp0_iter10_reg;
reg   [70:0] tmp_2_reg_1276;
reg   [7:0] m_diff_hi_V_reg_1281;
reg   [7:0] m_diff_hi_V_reg_1281_pp0_iter5_reg;
reg   [7:0] m_diff_hi_V_reg_1281_pp0_iter6_reg;
reg   [7:0] m_diff_hi_V_reg_1281_pp0_iter7_reg;
reg   [7:0] Z2_V_reg_1286;
reg   [7:0] Z2_V_reg_1286_pp0_iter5_reg;
reg   [7:0] Z2_V_reg_1286_pp0_iter6_reg;
reg   [7:0] Z2_V_reg_1286_pp0_iter7_reg;
reg   [7:0] Z2_V_reg_1286_pp0_iter8_reg;
wire   [7:0] Z3_V_fu_618_p4;
reg   [7:0] Z3_V_reg_1293;
reg   [7:0] Z3_V_reg_1293_pp0_iter5_reg;
wire   [34:0] Z4_V_fu_628_p1;
reg   [34:0] Z4_V_reg_1298;
wire   [35:0] ret_V_5_fu_669_p2;
reg   [35:0] ret_V_5_reg_1313;
reg   [35:0] ret_V_5_reg_1313_pp0_iter6_reg;
reg   [25:0] p_Val2_19_reg_1319;
wire   [42:0] tmp_1_i1_fu_675_p4;
reg   [42:0] tmp_1_i1_reg_1324;
reg   [19:0] tmp_3_reg_1329;
wire   [43:0] exp_Z2P_m_1_V_fu_725_p2;
reg   [43:0] exp_Z2P_m_1_V_reg_1339;
reg   [43:0] exp_Z2P_m_1_V_reg_1339_pp0_iter8_reg;
reg   [39:0] tmp_4_reg_1345;
reg   [39:0] tmp_4_reg_1345_pp0_iter8_reg;
reg   [35:0] tmp_5_reg_1356;
reg   [57:0] exp_Z1_V_reg_1361;
reg   [49:0] exp_Z1P_m_1_V_reg_1366;
reg   [49:0] exp_Z1_hi_V_reg_1371;
wire   [58:0] ret_V_7_fu_831_p2;
reg   [58:0] ret_V_7_reg_1376;
wire   [99:0] r_V_18_fu_843_p2;
reg   [99:0] r_V_18_reg_1381;
wire   [57:0] tmp_44_fu_849_p1;
reg   [57:0] tmp_44_reg_1387;
wire   [0:0] sel_tmp1_fu_985_p2;
reg   [0:0] sel_tmp1_reg_1392;
wire   [0:0] sel_tmp9_fu_1017_p2;
reg   [0:0] sel_tmp9_reg_1398;
wire   [0:0] tmp13_fu_1051_p2;
reg   [0:0] tmp13_reg_1404;
wire   [63:0] tmp_32_fu_1074_p3;
reg   [63:0] tmp_32_reg_1409;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] tmp_16_i_fu_642_p1;
wire   [63:0] tmp_17_i_fu_647_p1;
wire   [63:0] tmp_23_i_fu_706_p1;
wire   [63:0] tmp_19_fu_741_p1;
wire   [63:0] p_Val2_s_fu_261_p1;
wire   [10:0] tmp_V_fu_273_p4;
wire   [51:0] tmp_V_3_fu_283_p1;
wire   [0:0] tmp_i_fu_287_p2;
wire   [0:0] tmp_1_i_fu_293_p2;
wire   [0:0] tmp_3_i_fu_305_p2;
wire   [11:0] tmp_i1_cast_fu_317_p1;
wire   [53:0] p_Result_s_fu_327_p3;
wire   [53:0] e_frac_V_fu_335_p2;
wire   [53:0] tmp_1_fu_341_p3;
wire  signed [60:0] m_frac_l_V_fu_349_p3;
wire   [11:0] m_exp_fu_321_p2;
wire   [10:0] tmp_s_fu_369_p2;
wire  signed [11:0] tmp_cast_fu_375_p1;
wire   [11:0] m_exp_2_fu_379_p3;
wire   [60:0] tmp_13_cast_fu_395_p1;
wire   [60:0] r_V_fu_399_p2;
wire   [70:0] tmp_13_fu_391_p1;
wire  signed [70:0] r_V_cast_fu_405_p1;
wire   [70:0] r_V_1_fu_409_p2;
wire   [63:0] tmp_14_fu_465_p1;
wire  signed [18:0] rhs_V_fu_481_p3;
wire  signed [30:0] grp_fu_1178_p3;
wire   [17:0] tmp_42_fu_508_p1;
wire   [12:0] tmp_15_fu_492_p4;
wire   [0:0] tmp_16_fu_511_p2;
wire   [12:0] tmp_17_fu_517_p2;
wire   [0:0] p_Result_16_fu_501_p3;
wire   [12:0] tmp_18_fu_523_p3;
wire   [63:0] r_V_3_fu_468_p2;
wire   [63:0] r_V_4_fu_473_p2;
wire   [63:0] tmp_8_fu_539_p3;
wire   [70:0] tmp_24_fu_546_p3;
wire   [71:0] grp_fu_562_p0;
wire   [83:0] grp_fu_562_p2;
wire   [71:0] rhs_V_1_fu_581_p3;
wire  signed [72:0] lhs_V_fu_578_p1;
wire  signed [72:0] rhs_V_3_cast_fu_588_p1;
wire   [72:0] ret_V_4_fu_592_p2;
wire   [7:0] Z4_ind_V_fu_632_p4;
wire   [9:0] f_Z4_V_fu_652_p4;
wire   [35:0] rhs_V_2_fu_665_p1;
wire   [35:0] lhs_V_1_fu_662_p1;
wire   [35:0] r_V_16_fu_690_p0;
wire   [42:0] r_V_16_fu_690_p1;
wire   [78:0] r_V_16_fu_690_p2;
wire   [35:0] tmp_21_i_cast_fu_713_p1;
wire   [35:0] tmp_fu_716_p2;
wire   [43:0] ret_V_6_fu_710_p1;
wire   [43:0] tmp_cast_31_fu_721_p1;
wire   [48:0] tmp_24_i_fu_745_p4;
wire   [43:0] r_V_17_fu_760_p0;
wire   [48:0] r_V_17_fu_760_p1;
wire   [92:0] r_V_17_fu_760_p2;
wire   [50:0] lhs_V_2_fu_776_p5;
wire   [43:0] tmp_27_i_cast_fu_790_p1;
wire   [43:0] tmp6_fu_793_p2;
wire   [51:0] lhs_V_7_cast_fu_786_p1;
wire   [51:0] tmp51_cast_fu_798_p1;
wire   [51:0] exp_Z1P_m_1_l_V_fu_802_p2;
wire   [58:0] lhs_V_3_fu_828_p1;
wire   [49:0] r_V_18_fu_843_p0;
wire   [49:0] r_V_18_fu_843_p1;
wire   [107:0] rhs_V_5_cast_fu_865_p1;
wire   [107:0] lhs_V_4_fu_858_p3;
wire   [106:0] tmp_22_fu_871_p3;
wire   [106:0] tmp_21_fu_868_p1;
wire   [106:0] ret_V_20_cast_fu_884_p2;
wire   [0:0] tmp_45_fu_890_p3;
wire   [12:0] r_exp_V_fu_898_p2;
wire   [12:0] r_exp_V_2_fu_903_p3;
wire   [2:0] tmp_46_fu_910_p4;
wire   [0:0] icmp_fu_920_p2;
wire   [107:0] ret_V_8_fu_878_p2;
wire   [51:0] tmp_27_fu_937_p4;
wire   [51:0] tmp_28_fu_947_p4;
wire   [10:0] tmp_48_fu_965_p1;
wire   [10:0] out_exp_V_fu_969_p2;
wire   [51:0] tmp_V_4_fu_957_p3;
wire   [0:0] not_Val2_i_fu_853_p2;
wire   [0:0] tmp9_fu_990_p2;
wire   [0:0] or_cond_fu_926_p2;
wire   [0:0] sel_tmp6_fu_1006_p2;
wire   [0:0] sel_tmp5_fu_1001_p2;
wire   [0:0] sel_tmp8_fu_1011_p2;
wire   [0:0] sel_tmp11_fu_1023_p2;
wire   [0:0] sel_tmp44_demorgan_fu_1034_p2;
wire   [0:0] sel_tmp12_fu_1029_p2;
wire   [0:0] sel_tmp13_fu_1039_p2;
wire   [0:0] tmp_26_fu_931_p2;
wire   [0:0] sel_tmp14_fu_1045_p2;
wire   [63:0] p_Result_25_fu_975_p4;
wire   [0:0] sel_tmp2_fu_996_p2;
wire   [0:0] tmp_31_fu_1069_p2;
wire   [63:0] tmp_30_fu_1061_p3;
wire   [63:0] tmp_29_fu_1057_p1;
wire   [0:0] x_is_ninf_fu_1082_p2;
wire   [0:0] tmp_4_i_not_fu_1096_p2;
wire   [0:0] sel_tmp3_fu_1106_p2;
wire   [0:0] tmp10_fu_1112_p2;
wire   [0:0] sel_tmp_fu_1101_p2;
wire   [0:0] rev_fu_1086_p2;
wire   [0:0] tmp11_fu_1123_p2;
wire   [0:0] sel_tmp4_fu_1117_p2;
wire   [0:0] sel_tmp10_fu_1128_p2;
wire   [0:0] sel_tmp7_fu_1091_p2;
wire   [0:0] tmp_34_fu_1146_p2;
wire   [63:0] tmp_33_fu_1138_p3;
wire   [0:0] tmp12_fu_1134_p2;
wire   [0:0] sel_tmp15_fu_1159_p2;
wire   [0:0] tmp_36_fu_1164_p2;
wire   [63:0] tmp_35_fu_1152_p3;
wire   [15:0] grp_fu_1178_p0;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to11;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [78:0] r_V_16_fu_690_p00;
wire   [78:0] r_V_16_fu_690_p10;
wire   [92:0] r_V_17_fu_760_p00;
wire   [92:0] r_V_17_fu_760_p10;
wire   [99:0] r_V_18_fu_843_p00;
wire   [99:0] r_V_18_fu_843_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
end

exp_generic_doublbkb #(
    .DataWidth( 58 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
table_exp_Z1_array_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(table_exp_Z1_array_s_address0),
    .ce0(table_exp_Z1_array_s_ce0),
    .q0(table_exp_Z1_array_s_q0)
);

exp_generic_doublcud #(
    .DataWidth( 26 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
table_f_Z3_array_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(table_f_Z3_array_V_address0),
    .ce0(table_f_Z3_array_V_ce0),
    .q0(table_f_Z3_array_V_q0),
    .address1(table_f_Z3_array_V_address1),
    .ce1(table_f_Z3_array_V_ce1),
    .q1(table_f_Z3_array_V_q1)
);

exp_generic_doubldEe #(
    .DataWidth( 42 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
table_f_Z2_array_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(table_f_Z2_array_V_address0),
    .ce0(table_f_Z2_array_V_ce0),
    .q0(table_f_Z2_array_V_q0)
);

GELU_mul_72ns_13seOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 72 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 84 ))
GELU_mul_72ns_13seOg_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_562_p0),
    .din1(r_exp_V_3_reg_1259),
    .ce(1'b1),
    .dout(grp_fu_562_p2)
);

GELU_mac_muladd_1fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 19 ),
    .dout_WIDTH( 31 ))
GELU_mac_muladd_1fYi_U2(
    .din0(grp_fu_1178_p0),
    .din1(m_fix_hi_V_reg_1235),
    .din2(rhs_V_fu_481_p3),
    .dout(grp_fu_1178_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        Z2_V_reg_1286 <= {{ret_V_4_fu_592_p2[50:43]}};
        Z2_V_reg_1286_pp0_iter5_reg <= Z2_V_reg_1286;
        Z2_V_reg_1286_pp0_iter6_reg <= Z2_V_reg_1286_pp0_iter5_reg;
        Z2_V_reg_1286_pp0_iter7_reg <= Z2_V_reg_1286_pp0_iter6_reg;
        Z2_V_reg_1286_pp0_iter8_reg <= Z2_V_reg_1286_pp0_iter7_reg;
        Z3_V_reg_1293 <= {{ret_V_4_fu_592_p2[42:35]}};
        Z3_V_reg_1293_pp0_iter5_reg <= Z3_V_reg_1293;
        Z4_V_reg_1298 <= Z4_V_fu_628_p1;
        exp_Z1P_m_1_V_reg_1366 <= {{exp_Z1P_m_1_l_V_fu_802_p2[51:2]}};
        exp_Z1_V_reg_1361 <= table_exp_Z1_array_s_q0;
        exp_Z1_hi_V_reg_1371 <= {{table_exp_Z1_array_s_q0[57:8]}};
        exp_Z2P_m_1_V_reg_1339 <= exp_Z2P_m_1_V_fu_725_p2;
        exp_Z2P_m_1_V_reg_1339_pp0_iter8_reg <= exp_Z2P_m_1_V_reg_1339;
        m_diff_hi_V_reg_1281 <= {{ret_V_4_fu_592_p2[58:51]}};
        m_diff_hi_V_reg_1281_pp0_iter5_reg <= m_diff_hi_V_reg_1281;
        m_diff_hi_V_reg_1281_pp0_iter6_reg <= m_diff_hi_V_reg_1281_pp0_iter5_reg;
        m_diff_hi_V_reg_1281_pp0_iter7_reg <= m_diff_hi_V_reg_1281_pp0_iter6_reg;
        not_demorgan_reg_1196_pp0_iter10_reg <= not_demorgan_reg_1196_pp0_iter9_reg;
        not_demorgan_reg_1196_pp0_iter2_reg <= not_demorgan_reg_1196_pp0_iter1_reg;
        not_demorgan_reg_1196_pp0_iter3_reg <= not_demorgan_reg_1196_pp0_iter2_reg;
        not_demorgan_reg_1196_pp0_iter4_reg <= not_demorgan_reg_1196_pp0_iter3_reg;
        not_demorgan_reg_1196_pp0_iter5_reg <= not_demorgan_reg_1196_pp0_iter4_reg;
        not_demorgan_reg_1196_pp0_iter6_reg <= not_demorgan_reg_1196_pp0_iter5_reg;
        not_demorgan_reg_1196_pp0_iter7_reg <= not_demorgan_reg_1196_pp0_iter6_reg;
        not_demorgan_reg_1196_pp0_iter8_reg <= not_demorgan_reg_1196_pp0_iter7_reg;
        not_demorgan_reg_1196_pp0_iter9_reg <= not_demorgan_reg_1196_pp0_iter8_reg;
        p_Result_23_reg_1189_pp0_iter10_reg <= p_Result_23_reg_1189_pp0_iter9_reg;
        p_Result_23_reg_1189_pp0_iter11_reg <= p_Result_23_reg_1189_pp0_iter10_reg;
        p_Result_23_reg_1189_pp0_iter2_reg <= p_Result_23_reg_1189_pp0_iter1_reg;
        p_Result_23_reg_1189_pp0_iter3_reg <= p_Result_23_reg_1189_pp0_iter2_reg;
        p_Result_23_reg_1189_pp0_iter4_reg <= p_Result_23_reg_1189_pp0_iter3_reg;
        p_Result_23_reg_1189_pp0_iter5_reg <= p_Result_23_reg_1189_pp0_iter4_reg;
        p_Result_23_reg_1189_pp0_iter6_reg <= p_Result_23_reg_1189_pp0_iter5_reg;
        p_Result_23_reg_1189_pp0_iter7_reg <= p_Result_23_reg_1189_pp0_iter6_reg;
        p_Result_23_reg_1189_pp0_iter8_reg <= p_Result_23_reg_1189_pp0_iter7_reg;
        p_Result_23_reg_1189_pp0_iter9_reg <= p_Result_23_reg_1189_pp0_iter8_reg;
        r_V_13_reg_1224_pp0_iter2_reg <= r_V_13_reg_1224_pp0_iter1_reg;
        r_V_13_reg_1224_pp0_iter3_reg <= r_V_13_reg_1224_pp0_iter2_reg;
        r_V_18_reg_1381 <= r_V_18_fu_843_p2;
        r_exp_V_3_reg_1259_pp0_iter10_reg <= r_exp_V_3_reg_1259_pp0_iter9_reg;
        r_exp_V_3_reg_1259_pp0_iter2_reg <= r_exp_V_3_reg_1259;
        r_exp_V_3_reg_1259_pp0_iter3_reg <= r_exp_V_3_reg_1259_pp0_iter2_reg;
        r_exp_V_3_reg_1259_pp0_iter4_reg <= r_exp_V_3_reg_1259_pp0_iter3_reg;
        r_exp_V_3_reg_1259_pp0_iter5_reg <= r_exp_V_3_reg_1259_pp0_iter4_reg;
        r_exp_V_3_reg_1259_pp0_iter6_reg <= r_exp_V_3_reg_1259_pp0_iter5_reg;
        r_exp_V_3_reg_1259_pp0_iter7_reg <= r_exp_V_3_reg_1259_pp0_iter6_reg;
        r_exp_V_3_reg_1259_pp0_iter8_reg <= r_exp_V_3_reg_1259_pp0_iter7_reg;
        r_exp_V_3_reg_1259_pp0_iter9_reg <= r_exp_V_3_reg_1259_pp0_iter8_reg;
        ret_V_5_reg_1313 <= ret_V_5_fu_669_p2;
        ret_V_5_reg_1313_pp0_iter6_reg <= ret_V_5_reg_1313;
        ret_V_7_reg_1376 <= ret_V_7_fu_831_p2;
        sel_tmp1_reg_1392 <= sel_tmp1_fu_985_p2;
        sel_tmp9_reg_1398 <= sel_tmp9_fu_1017_p2;
        tmp13_reg_1404 <= tmp13_fu_1051_p2;
        tmp_1_i1_reg_1324[25 : 0] <= tmp_1_i1_fu_675_p4[25 : 0];
tmp_1_i1_reg_1324[42 : 35] <= tmp_1_i1_fu_675_p4[42 : 35];
        tmp_23_reg_1245_pp0_iter10_reg <= tmp_23_reg_1245_pp0_iter9_reg;
        tmp_23_reg_1245_pp0_iter2_reg <= tmp_23_reg_1245_pp0_iter1_reg;
        tmp_23_reg_1245_pp0_iter3_reg <= tmp_23_reg_1245_pp0_iter2_reg;
        tmp_23_reg_1245_pp0_iter4_reg <= tmp_23_reg_1245_pp0_iter3_reg;
        tmp_23_reg_1245_pp0_iter5_reg <= tmp_23_reg_1245_pp0_iter4_reg;
        tmp_23_reg_1245_pp0_iter6_reg <= tmp_23_reg_1245_pp0_iter5_reg;
        tmp_23_reg_1245_pp0_iter7_reg <= tmp_23_reg_1245_pp0_iter6_reg;
        tmp_23_reg_1245_pp0_iter8_reg <= tmp_23_reg_1245_pp0_iter7_reg;
        tmp_23_reg_1245_pp0_iter9_reg <= tmp_23_reg_1245_pp0_iter8_reg;
        tmp_25_reg_1266_pp0_iter10_reg <= tmp_25_reg_1266_pp0_iter9_reg;
        tmp_25_reg_1266_pp0_iter2_reg <= tmp_25_reg_1266;
        tmp_25_reg_1266_pp0_iter3_reg <= tmp_25_reg_1266_pp0_iter2_reg;
        tmp_25_reg_1266_pp0_iter4_reg <= tmp_25_reg_1266_pp0_iter3_reg;
        tmp_25_reg_1266_pp0_iter5_reg <= tmp_25_reg_1266_pp0_iter4_reg;
        tmp_25_reg_1266_pp0_iter6_reg <= tmp_25_reg_1266_pp0_iter5_reg;
        tmp_25_reg_1266_pp0_iter7_reg <= tmp_25_reg_1266_pp0_iter6_reg;
        tmp_25_reg_1266_pp0_iter8_reg <= tmp_25_reg_1266_pp0_iter7_reg;
        tmp_25_reg_1266_pp0_iter9_reg <= tmp_25_reg_1266_pp0_iter8_reg;
        tmp_2_reg_1276 <= {{grp_fu_562_p2[83:13]}};
        tmp_32_reg_1409[62 : 0] <= tmp_32_fu_1074_p3[62 : 0];
        tmp_3_reg_1329 <= {{r_V_16_fu_690_p2[78:59]}};
        tmp_44_reg_1387 <= tmp_44_fu_849_p1;
        tmp_47_reg_1253_pp0_iter10_reg <= tmp_47_reg_1253_pp0_iter9_reg;
        tmp_47_reg_1253_pp0_iter11_reg <= tmp_47_reg_1253_pp0_iter10_reg;
        tmp_47_reg_1253_pp0_iter2_reg <= tmp_47_reg_1253_pp0_iter1_reg;
        tmp_47_reg_1253_pp0_iter3_reg <= tmp_47_reg_1253_pp0_iter2_reg;
        tmp_47_reg_1253_pp0_iter4_reg <= tmp_47_reg_1253_pp0_iter3_reg;
        tmp_47_reg_1253_pp0_iter5_reg <= tmp_47_reg_1253_pp0_iter4_reg;
        tmp_47_reg_1253_pp0_iter6_reg <= tmp_47_reg_1253_pp0_iter5_reg;
        tmp_47_reg_1253_pp0_iter7_reg <= tmp_47_reg_1253_pp0_iter6_reg;
        tmp_47_reg_1253_pp0_iter8_reg <= tmp_47_reg_1253_pp0_iter7_reg;
        tmp_47_reg_1253_pp0_iter9_reg <= tmp_47_reg_1253_pp0_iter8_reg;
        tmp_4_i_reg_1202_pp0_iter10_reg <= tmp_4_i_reg_1202_pp0_iter9_reg;
        tmp_4_i_reg_1202_pp0_iter11_reg <= tmp_4_i_reg_1202_pp0_iter10_reg;
        tmp_4_i_reg_1202_pp0_iter2_reg <= tmp_4_i_reg_1202_pp0_iter1_reg;
        tmp_4_i_reg_1202_pp0_iter3_reg <= tmp_4_i_reg_1202_pp0_iter2_reg;
        tmp_4_i_reg_1202_pp0_iter4_reg <= tmp_4_i_reg_1202_pp0_iter3_reg;
        tmp_4_i_reg_1202_pp0_iter5_reg <= tmp_4_i_reg_1202_pp0_iter4_reg;
        tmp_4_i_reg_1202_pp0_iter6_reg <= tmp_4_i_reg_1202_pp0_iter5_reg;
        tmp_4_i_reg_1202_pp0_iter7_reg <= tmp_4_i_reg_1202_pp0_iter6_reg;
        tmp_4_i_reg_1202_pp0_iter8_reg <= tmp_4_i_reg_1202_pp0_iter7_reg;
        tmp_4_i_reg_1202_pp0_iter9_reg <= tmp_4_i_reg_1202_pp0_iter8_reg;
        tmp_4_reg_1345 <= {{table_f_Z2_array_V_q0[41:2]}};
        tmp_4_reg_1345_pp0_iter8_reg <= tmp_4_reg_1345;
        tmp_5_reg_1356 <= {{r_V_17_fu_760_p2[92:57]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        isNeg_reg_1214 <= m_exp_fu_321_p2[32'd11];
        m_exp_1_cast_reg_1219 <= m_exp_1_cast_fu_387_p1;
        m_fix_hi_V_reg_1235 <= {{r_V_13_fu_415_p3[70:55]}};
        m_fix_l_V_reg_1229 <= {{r_V_13_fu_415_p3[70:7]}};
        m_frac_l_V_2_cast_reg_1209[70 : 7] <= m_frac_l_V_2_cast_fu_357_p1[70 : 7];
        not_demorgan_reg_1196 <= not_demorgan_fu_299_p2;
        not_demorgan_reg_1196_pp0_iter1_reg <= not_demorgan_reg_1196;
        p_Result_23_reg_1189 <= p_Val2_s_fu_261_p1[32'd63];
        p_Result_23_reg_1189_pp0_iter1_reg <= p_Result_23_reg_1189;
        p_Result_24_reg_1240 <= r_V_13_fu_415_p3[32'd70];
        r_V_13_reg_1224 <= r_V_13_fu_415_p3;
        r_V_13_reg_1224_pp0_iter1_reg <= r_V_13_reg_1224;
        r_exp_V_3_reg_1259 <= r_exp_V_3_fu_531_p3;
        tmp_23_reg_1245 <= tmp_23_fu_451_p2;
        tmp_23_reg_1245_pp0_iter1_reg <= tmp_23_reg_1245;
        tmp_25_reg_1266 <= tmp_25_fu_554_p2;
        tmp_47_reg_1253 <= tmp_1_fu_341_p3[32'd53];
        tmp_47_reg_1253_pp0_iter1_reg <= tmp_47_reg_1253;
        tmp_4_i_reg_1202 <= tmp_4_i_fu_311_p2;
        tmp_4_i_reg_1202_pp0_iter1_reg <= tmp_4_i_reg_1202;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        p_Val2_19_reg_1319 <= table_f_Z3_array_V_q1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to11 = 1'b1;
    end else begin
        ap_idle_pp0_0to11 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to11 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        table_exp_Z1_array_s_ce0 = 1'b1;
    end else begin
        table_exp_Z1_array_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        table_f_Z2_array_V_ce0 = 1'b1;
    end else begin
        table_f_Z2_array_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        table_f_Z3_array_V_ce0 = 1'b1;
    end else begin
        table_f_Z3_array_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        table_f_Z3_array_V_ce1 = 1'b1;
    end else begin
        table_f_Z3_array_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Z3_V_fu_618_p4 = {{ret_V_4_fu_592_p2[42:35]}};

assign Z4_V_fu_628_p1 = ret_V_4_fu_592_p2[34:0];

assign Z4_ind_V_fu_632_p4 = {{ret_V_4_fu_592_p2[34:27]}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((tmp_36_fu_1164_p2[0:0] === 1'b1) ? 64'd0 : tmp_35_fu_1152_p3);

assign e_frac_V_fu_335_p2 = (54'd0 - p_Result_s_fu_327_p3);

assign exp_Z1P_m_1_l_V_fu_802_p2 = (lhs_V_7_cast_fu_786_p1 + tmp51_cast_fu_798_p1);

assign exp_Z2P_m_1_V_fu_725_p2 = (ret_V_6_fu_710_p1 + tmp_cast_31_fu_721_p1);

assign f_Z4_V_fu_652_p4 = {{table_f_Z3_array_V_q0[25:16]}};

assign grp_fu_1178_p0 = 31'd23637;

assign grp_fu_562_p0 = 84'd1636647506585939924452;

assign icmp_fu_920_p2 = (($signed(tmp_46_fu_910_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign isNeg_fu_361_p3 = m_exp_fu_321_p2[32'd11];

assign lhs_V_1_fu_662_p1 = Z4_V_reg_1298;

assign lhs_V_2_fu_776_p5 = {{{{Z2_V_reg_1286_pp0_iter8_reg}, {1'd0}}, {tmp_4_reg_1345_pp0_iter8_reg}}, {2'd0}};

assign lhs_V_3_fu_828_p1 = exp_Z1_V_reg_1361;

assign lhs_V_4_fu_858_p3 = {{ret_V_7_reg_1376}, {49'd0}};

assign lhs_V_7_cast_fu_786_p1 = lhs_V_2_fu_776_p5;

assign lhs_V_fu_578_p1 = r_V_13_reg_1224_pp0_iter3_reg;

assign m_exp_1_cast_fu_387_p1 = $signed(m_exp_2_fu_379_p3);

assign m_exp_2_fu_379_p3 = ((isNeg_fu_361_p3[0:0] === 1'b1) ? tmp_cast_fu_375_p1 : m_exp_fu_321_p2);

assign m_exp_fu_321_p2 = ($signed(12'd3073) + $signed(tmp_i1_cast_fu_317_p1));

assign m_frac_l_V_2_cast_fu_357_p1 = m_frac_l_V_fu_349_p3;

assign m_frac_l_V_fu_349_p3 = {{tmp_1_fu_341_p3}, {7'd0}};

assign not_Val2_i_fu_853_p2 = (p_Result_23_reg_1189_pp0_iter10_reg ^ 1'd1);

assign not_demorgan_fu_299_p2 = (tmp_i_fu_287_p2 & tmp_1_i_fu_293_p2);

assign or_cond_fu_926_p2 = (tmp_25_reg_1266_pp0_iter10_reg | icmp_fu_920_p2);

assign out_exp_V_fu_969_p2 = (11'd1023 + tmp_48_fu_965_p1);

assign p_Result_16_fu_501_p3 = grp_fu_1178_p3[32'd30];

assign p_Result_23_fu_265_p3 = p_Val2_s_fu_261_p1[32'd63];

assign p_Result_25_fu_975_p4 = {{{{1'd0}, {out_exp_V_fu_969_p2}}}, {tmp_V_4_fu_957_p3}};

assign p_Result_s_fu_327_p3 = {{2'd1}, {tmp_V_3_fu_283_p1}};

assign p_Val2_s_fu_261_p1 = x;

assign r_V_13_fu_415_p3 = ((isNeg_fu_361_p3[0:0] === 1'b1) ? r_V_cast_fu_405_p1 : r_V_1_fu_409_p2);

assign r_V_16_fu_690_p0 = r_V_16_fu_690_p00;

assign r_V_16_fu_690_p00 = ret_V_5_reg_1313;

assign r_V_16_fu_690_p1 = r_V_16_fu_690_p10;

assign r_V_16_fu_690_p10 = tmp_1_i1_fu_675_p4;

assign r_V_16_fu_690_p2 = (r_V_16_fu_690_p0 * r_V_16_fu_690_p1);

assign r_V_17_fu_760_p0 = r_V_17_fu_760_p00;

assign r_V_17_fu_760_p00 = exp_Z2P_m_1_V_reg_1339;

assign r_V_17_fu_760_p1 = r_V_17_fu_760_p10;

assign r_V_17_fu_760_p10 = tmp_24_i_fu_745_p4;

assign r_V_17_fu_760_p2 = (r_V_17_fu_760_p0 * r_V_17_fu_760_p1);

assign r_V_18_fu_843_p0 = r_V_18_fu_843_p00;

assign r_V_18_fu_843_p00 = exp_Z1P_m_1_V_reg_1366;

assign r_V_18_fu_843_p1 = r_V_18_fu_843_p10;

assign r_V_18_fu_843_p10 = exp_Z1_hi_V_reg_1371;

assign r_V_18_fu_843_p2 = (r_V_18_fu_843_p0 * r_V_18_fu_843_p1);

assign r_V_1_fu_409_p2 = m_frac_l_V_2_cast_fu_357_p1 << tmp_13_fu_391_p1;

assign r_V_3_fu_468_p2 = m_fix_l_V_reg_1229 << tmp_14_fu_465_p1;

assign r_V_4_fu_473_p2 = $signed(m_fix_l_V_reg_1229) >>> tmp_14_fu_465_p1;

assign r_V_cast_fu_405_p1 = $signed(r_V_fu_399_p2);

assign r_V_fu_399_p2 = $signed(m_frac_l_V_fu_349_p3) >>> tmp_13_cast_fu_395_p1;

assign r_exp_V_2_fu_903_p3 = ((tmp_45_fu_890_p3[0:0] === 1'b1) ? r_exp_V_3_reg_1259_pp0_iter10_reg : r_exp_V_fu_898_p2);

assign r_exp_V_3_fu_531_p3 = ((p_Result_16_fu_501_p3[0:0] === 1'b1) ? tmp_18_fu_523_p3 : tmp_15_fu_492_p4);

assign r_exp_V_fu_898_p2 = ($signed(13'd8191) + $signed(r_exp_V_3_reg_1259_pp0_iter10_reg));

assign ret_V_20_cast_fu_884_p2 = (tmp_22_fu_871_p3 + tmp_21_fu_868_p1);

assign ret_V_4_fu_592_p2 = ($signed(lhs_V_fu_578_p1) - $signed(rhs_V_3_cast_fu_588_p1));

assign ret_V_5_fu_669_p2 = (rhs_V_2_fu_665_p1 + lhs_V_1_fu_662_p1);

assign ret_V_6_fu_710_p1 = tmp_1_i1_reg_1324;

assign ret_V_7_fu_831_p2 = (59'd16 + lhs_V_3_fu_828_p1);

assign ret_V_8_fu_878_p2 = (rhs_V_5_cast_fu_865_p1 + lhs_V_4_fu_858_p3);

assign rev_fu_1086_p2 = (tmp_47_reg_1253_pp0_iter11_reg ^ 1'd1);

assign rhs_V_1_fu_581_p3 = {{tmp_2_reg_1276}, {1'd0}};

assign rhs_V_2_fu_665_p1 = f_Z4_V_fu_652_p4;

assign rhs_V_3_cast_fu_588_p1 = $signed(rhs_V_1_fu_581_p3);

assign rhs_V_5_cast_fu_865_p1 = r_V_18_reg_1381;

assign rhs_V_fu_481_p3 = {{p_Result_24_reg_1240}, {18'd131072}};

assign sel_tmp10_fu_1128_p2 = (tmp11_fu_1123_p2 & sel_tmp4_fu_1117_p2);

assign sel_tmp11_fu_1023_p2 = (or_cond_fu_926_p2 ^ 1'd1);

assign sel_tmp12_fu_1029_p2 = (tmp_23_reg_1245_pp0_iter10_reg & sel_tmp11_fu_1023_p2);

assign sel_tmp13_fu_1039_p2 = (sel_tmp44_demorgan_fu_1034_p2 ^ 1'd1);

assign sel_tmp14_fu_1045_p2 = (sel_tmp13_fu_1039_p2 | sel_tmp12_fu_1029_p2);

assign sel_tmp15_fu_1159_p2 = (tmp13_reg_1404 | tmp12_fu_1134_p2);

assign sel_tmp1_fu_985_p2 = (not_demorgan_reg_1196_pp0_iter10_reg ^ 1'd1);

assign sel_tmp2_fu_996_p2 = (tmp_4_i_reg_1202_pp0_iter10_reg & tmp9_fu_990_p2);

assign sel_tmp3_fu_1106_p2 = (x_is_ninf_fu_1082_p2 ^ 1'd1);

assign sel_tmp44_demorgan_fu_1034_p2 = (tmp_23_reg_1245_pp0_iter10_reg | icmp_fu_920_p2);

assign sel_tmp4_fu_1117_p2 = (tmp10_fu_1112_p2 & sel_tmp_fu_1101_p2);

assign sel_tmp5_fu_1001_p2 = (tmp_23_reg_1245_pp0_iter10_reg & or_cond_fu_926_p2);

assign sel_tmp6_fu_1006_p2 = (tmp_23_reg_1245_pp0_iter10_reg ^ 1'd1);

assign sel_tmp7_fu_1091_p2 = (x_is_ninf_fu_1082_p2 & sel_tmp1_reg_1392);

assign sel_tmp8_fu_1011_p2 = (sel_tmp6_fu_1006_p2 & icmp_fu_920_p2);

assign sel_tmp9_fu_1017_p2 = (sel_tmp8_fu_1011_p2 | sel_tmp5_fu_1001_p2);

assign sel_tmp_fu_1101_p2 = (tmp_4_i_not_fu_1096_p2 | p_Result_23_reg_1189_pp0_iter11_reg);

assign table_exp_Z1_array_s_address0 = tmp_19_fu_741_p1;

assign table_f_Z2_array_V_address0 = tmp_23_i_fu_706_p1;

assign table_f_Z3_array_V_address0 = tmp_16_i_fu_642_p1;

assign table_f_Z3_array_V_address1 = tmp_17_i_fu_647_p1;

assign tmp10_fu_1112_p2 = (sel_tmp3_fu_1106_p2 & sel_tmp1_reg_1392);

assign tmp11_fu_1123_p2 = (sel_tmp9_reg_1398 & rev_fu_1086_p2);

assign tmp12_fu_1134_p2 = (tmp_47_reg_1253_pp0_iter11_reg & sel_tmp9_reg_1398);

assign tmp13_fu_1051_p2 = (tmp_26_fu_931_p2 & sel_tmp14_fu_1045_p2);

assign tmp51_cast_fu_798_p1 = tmp6_fu_793_p2;

assign tmp6_fu_793_p2 = (tmp_27_i_cast_fu_790_p1 + exp_Z2P_m_1_V_reg_1339_pp0_iter8_reg);

assign tmp9_fu_990_p2 = (sel_tmp1_fu_985_p2 & not_Val2_i_fu_853_p2);

assign tmp_13_cast_fu_395_p1 = $unsigned(m_exp_1_cast_fu_387_p1);

assign tmp_13_fu_391_p1 = $unsigned(m_exp_1_cast_fu_387_p1);

assign tmp_14_fu_465_p1 = $unsigned(m_exp_1_cast_reg_1219);

assign tmp_15_fu_492_p4 = {{grp_fu_1178_p3[30:18]}};

assign tmp_16_fu_511_p2 = ((tmp_42_fu_508_p1 == 18'd0) ? 1'b1 : 1'b0);

assign tmp_16_i_fu_642_p1 = Z4_ind_V_fu_632_p4;

assign tmp_17_fu_517_p2 = (13'd1 + tmp_15_fu_492_p4);

assign tmp_17_i_fu_647_p1 = Z3_V_fu_618_p4;

assign tmp_18_fu_523_p3 = ((tmp_16_fu_511_p2[0:0] === 1'b1) ? tmp_15_fu_492_p4 : tmp_17_fu_517_p2);

assign tmp_19_fu_741_p1 = m_diff_hi_V_reg_1281_pp0_iter7_reg;

assign tmp_1_fu_341_p3 = ((p_Result_23_fu_265_p3[0:0] === 1'b1) ? e_frac_V_fu_335_p2 : p_Result_s_fu_327_p3);

assign tmp_1_i1_fu_675_p4 = {{{Z3_V_reg_1293_pp0_iter5_reg}, {9'd0}}, {p_Val2_19_reg_1319}};

assign tmp_1_i_fu_293_p2 = ((tmp_V_3_fu_283_p1 != 52'd0) ? 1'b1 : 1'b0);

assign tmp_21_fu_868_p1 = r_V_18_reg_1381;

assign tmp_21_i_cast_fu_713_p1 = tmp_3_reg_1329;

assign tmp_22_fu_871_p3 = {{tmp_44_reg_1387}, {49'd0}};

assign tmp_23_fu_451_p2 = (($signed(m_exp_fu_321_p2) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign tmp_23_i_fu_706_p1 = Z2_V_reg_1286_pp0_iter5_reg;

assign tmp_24_fu_546_p3 = {{tmp_8_fu_539_p3}, {7'd0}};

assign tmp_24_i_fu_745_p4 = {{{Z2_V_reg_1286_pp0_iter7_reg}, {1'd0}}, {tmp_4_reg_1345}};

assign tmp_25_fu_554_p2 = ((tmp_24_fu_546_p3 != m_frac_l_V_2_cast_reg_1209) ? 1'b1 : 1'b0);

assign tmp_26_fu_931_p2 = (($signed(r_exp_V_2_fu_903_p3) < $signed(13'd7170)) ? 1'b1 : 1'b0);

assign tmp_27_fu_937_p4 = {{ret_V_8_fu_878_p2[105:54]}};

assign tmp_27_i_cast_fu_790_p1 = tmp_5_reg_1356;

assign tmp_28_fu_947_p4 = {{ret_V_8_fu_878_p2[104:53]}};

assign tmp_29_fu_1057_p1 = p_Result_25_fu_975_p4;

assign tmp_30_fu_1061_p3 = ((sel_tmp2_fu_996_p2[0:0] === 1'b1) ? 64'd9218868437227405312 : 64'd9223372036854775807);

assign tmp_31_fu_1069_p2 = (sel_tmp2_fu_996_p2 | not_demorgan_reg_1196_pp0_iter10_reg);

assign tmp_32_fu_1074_p3 = ((tmp_31_fu_1069_p2[0:0] === 1'b1) ? tmp_30_fu_1061_p3 : tmp_29_fu_1057_p1);

assign tmp_33_fu_1138_p3 = ((sel_tmp10_fu_1128_p2[0:0] === 1'b1) ? 64'd9218868437227405312 : 64'd0);

assign tmp_34_fu_1146_p2 = (sel_tmp7_fu_1091_p2 | sel_tmp10_fu_1128_p2);

assign tmp_35_fu_1152_p3 = ((tmp_34_fu_1146_p2[0:0] === 1'b1) ? tmp_33_fu_1138_p3 : tmp_32_reg_1409);

assign tmp_36_fu_1164_p2 = (sel_tmp4_fu_1117_p2 & sel_tmp15_fu_1159_p2);

assign tmp_3_i_fu_305_p2 = ((tmp_V_3_fu_283_p1 == 52'd0) ? 1'b1 : 1'b0);

assign tmp_42_fu_508_p1 = grp_fu_1178_p3[17:0];

assign tmp_44_fu_849_p1 = ret_V_7_fu_831_p2[57:0];

assign tmp_45_fu_890_p3 = ret_V_20_cast_fu_884_p2[32'd106];

assign tmp_46_fu_910_p4 = {{r_exp_V_2_fu_903_p3[12:10]}};

assign tmp_48_fu_965_p1 = r_exp_V_2_fu_903_p3[10:0];

assign tmp_4_i_fu_311_p2 = (tmp_i_fu_287_p2 & tmp_3_i_fu_305_p2);

assign tmp_4_i_not_fu_1096_p2 = (tmp_4_i_reg_1202_pp0_iter11_reg ^ 1'd1);

assign tmp_8_fu_539_p3 = ((isNeg_reg_1214[0:0] === 1'b1) ? r_V_3_fu_468_p2 : r_V_4_fu_473_p2);

assign tmp_V_3_fu_283_p1 = p_Val2_s_fu_261_p1[51:0];

assign tmp_V_4_fu_957_p3 = ((tmp_45_fu_890_p3[0:0] === 1'b1) ? tmp_27_fu_937_p4 : tmp_28_fu_947_p4);

assign tmp_V_fu_273_p4 = {{p_Val2_s_fu_261_p1[62:52]}};

assign tmp_cast_31_fu_721_p1 = tmp_fu_716_p2;

assign tmp_cast_fu_375_p1 = $signed(tmp_s_fu_369_p2);

assign tmp_fu_716_p2 = (tmp_21_i_cast_fu_713_p1 + ret_V_5_reg_1313_pp0_iter6_reg);

assign tmp_i1_cast_fu_317_p1 = tmp_V_fu_273_p4;

assign tmp_i_fu_287_p2 = ((tmp_V_fu_273_p4 == 11'd2047) ? 1'b1 : 1'b0);

assign tmp_s_fu_369_p2 = (11'd1023 - tmp_V_fu_273_p4);

assign x_is_ninf_fu_1082_p2 = (tmp_4_i_reg_1202_pp0_iter11_reg & p_Result_23_reg_1189_pp0_iter11_reg);

always @ (posedge ap_clk) begin
    m_frac_l_V_2_cast_reg_1209[6:0] <= 7'b0000000;
    tmp_1_i1_reg_1324[34:26] <= 9'b000000000;
    tmp_32_reg_1409[63] <= 1'b0;
end

endmodule //exp_generic_double_s
