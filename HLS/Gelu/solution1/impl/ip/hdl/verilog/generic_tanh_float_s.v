// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module generic_tanh_float_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        t_in,
        ap_return
);

parameter    ap_ST_fsm_state1 = 68'd1;
parameter    ap_ST_fsm_state2 = 68'd2;
parameter    ap_ST_fsm_state3 = 68'd4;
parameter    ap_ST_fsm_state4 = 68'd8;
parameter    ap_ST_fsm_state5 = 68'd16;
parameter    ap_ST_fsm_state6 = 68'd32;
parameter    ap_ST_fsm_state7 = 68'd64;
parameter    ap_ST_fsm_state8 = 68'd128;
parameter    ap_ST_fsm_state9 = 68'd256;
parameter    ap_ST_fsm_state10 = 68'd512;
parameter    ap_ST_fsm_state11 = 68'd1024;
parameter    ap_ST_fsm_state12 = 68'd2048;
parameter    ap_ST_fsm_state13 = 68'd4096;
parameter    ap_ST_fsm_state14 = 68'd8192;
parameter    ap_ST_fsm_state15 = 68'd16384;
parameter    ap_ST_fsm_state16 = 68'd32768;
parameter    ap_ST_fsm_state17 = 68'd65536;
parameter    ap_ST_fsm_state18 = 68'd131072;
parameter    ap_ST_fsm_state19 = 68'd262144;
parameter    ap_ST_fsm_state20 = 68'd524288;
parameter    ap_ST_fsm_state21 = 68'd1048576;
parameter    ap_ST_fsm_state22 = 68'd2097152;
parameter    ap_ST_fsm_state23 = 68'd4194304;
parameter    ap_ST_fsm_state24 = 68'd8388608;
parameter    ap_ST_fsm_state25 = 68'd16777216;
parameter    ap_ST_fsm_state26 = 68'd33554432;
parameter    ap_ST_fsm_state27 = 68'd67108864;
parameter    ap_ST_fsm_state28 = 68'd134217728;
parameter    ap_ST_fsm_state29 = 68'd268435456;
parameter    ap_ST_fsm_state30 = 68'd536870912;
parameter    ap_ST_fsm_state31 = 68'd1073741824;
parameter    ap_ST_fsm_state32 = 68'd2147483648;
parameter    ap_ST_fsm_state33 = 68'd4294967296;
parameter    ap_ST_fsm_state34 = 68'd8589934592;
parameter    ap_ST_fsm_state35 = 68'd17179869184;
parameter    ap_ST_fsm_state36 = 68'd34359738368;
parameter    ap_ST_fsm_state37 = 68'd68719476736;
parameter    ap_ST_fsm_state38 = 68'd137438953472;
parameter    ap_ST_fsm_state39 = 68'd274877906944;
parameter    ap_ST_fsm_state40 = 68'd549755813888;
parameter    ap_ST_fsm_state41 = 68'd1099511627776;
parameter    ap_ST_fsm_state42 = 68'd2199023255552;
parameter    ap_ST_fsm_state43 = 68'd4398046511104;
parameter    ap_ST_fsm_state44 = 68'd8796093022208;
parameter    ap_ST_fsm_state45 = 68'd17592186044416;
parameter    ap_ST_fsm_state46 = 68'd35184372088832;
parameter    ap_ST_fsm_state47 = 68'd70368744177664;
parameter    ap_ST_fsm_state48 = 68'd140737488355328;
parameter    ap_ST_fsm_state49 = 68'd281474976710656;
parameter    ap_ST_fsm_state50 = 68'd562949953421312;
parameter    ap_ST_fsm_state51 = 68'd1125899906842624;
parameter    ap_ST_fsm_state52 = 68'd2251799813685248;
parameter    ap_ST_fsm_state53 = 68'd4503599627370496;
parameter    ap_ST_fsm_state54 = 68'd9007199254740992;
parameter    ap_ST_fsm_state55 = 68'd18014398509481984;
parameter    ap_ST_fsm_state56 = 68'd36028797018963968;
parameter    ap_ST_fsm_state57 = 68'd72057594037927936;
parameter    ap_ST_fsm_state58 = 68'd144115188075855872;
parameter    ap_ST_fsm_state59 = 68'd288230376151711744;
parameter    ap_ST_fsm_state60 = 68'd576460752303423488;
parameter    ap_ST_fsm_state61 = 68'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 68'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 68'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 68'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 68'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 68'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 68'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 68'd147573952589676412928;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] t_in;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [67:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_100_p2;
reg   [31:0] reg_143;
wire    ap_CS_fsm_state5;
reg   [0:0] tmp_3_reg_348;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state64;
wire   [31:0] grp_fu_112_p2;
reg   [31:0] reg_150;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state61;
reg   [0:0] p_Result_s_reg_320;
wire   [31:0] abst_in_fu_196_p1;
reg   [31:0] abst_in_reg_325;
wire   [0:0] tmp_fu_202_p2;
reg   [0:0] tmp_reg_332;
wire   [0:0] tmp_7_fu_208_p2;
reg   [0:0] tmp_7_reg_336;
wire   [0:0] or_cond_fu_220_p2;
reg   [0:0] or_cond_reg_340;
wire   [0:0] tmp_1_fu_123_p2;
reg   [0:0] tmp_1_reg_344;
wire   [0:0] tmp_3_fu_226_p2;
wire   [31:0] tmp_4_neg_fu_232_p2;
reg   [31:0] tmp_4_neg_reg_353;
wire   [31:0] p_1_fu_238_p3;
wire   [31:0] tmp_4_fu_246_p1;
wire    ap_CS_fsm_state2;
wire   [31:0] x_2_fu_250_p3;
wire    ap_CS_fsm_state6;
wire   [63:0] xd_fu_120_p1;
reg   [63:0] xd_reg_379;
wire   [0:0] tmp_i_fu_272_p2;
wire   [0:0] tmp_i_30_fu_278_p2;
wire   [63:0] grp_exp_generic_double_s_fu_89_ap_return;
reg   [63:0] tmp_13_i_reg_384;
wire    ap_CS_fsm_state19;
wire   [63:0] grp_fu_128_p2;
reg   [63:0] tmp_14_i_reg_389;
wire    ap_CS_fsm_state24;
wire   [31:0] tmp_15_i_fu_117_p1;
wire    ap_CS_fsm_state25;
reg   [31:0] tmp_8_reg_399;
wire    ap_CS_fsm_state49;
wire   [31:0] tmp_5_fu_315_p1;
wire    ap_CS_fsm_state50;
wire   [31:0] grp_fu_108_p2;
reg   [31:0] resultf_reg_409;
wire    ap_CS_fsm_state67;
wire    grp_exp_generic_double_s_fu_89_ap_start;
wire    grp_exp_generic_double_s_fu_89_ap_done;
wire    grp_exp_generic_double_s_fu_89_ap_idle;
wire    grp_exp_generic_double_s_fu_89_ap_ready;
reg   [31:0] expx_reg_58;
reg   [31:0] ap_phi_mux_resultf_4_phi_fu_76_p10;
reg   [31:0] resultf_4_reg_72;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state46;
reg    grp_exp_generic_double_s_fu_89_ap_start_reg;
reg   [67:0] ap_NS_fsm;
wire    ap_NS_fsm_state7;
wire    ap_CS_fsm_state7;
reg   [31:0] grp_fu_100_p0;
reg   [31:0] grp_fu_100_p1;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state65;
reg   [31:0] grp_fu_112_p0;
reg   [31:0] grp_fu_112_p1;
wire    ap_CS_fsm_state30;
wire   [31:0] tmp_1_fu_123_p0;
wire    ap_CS_fsm_state20;
wire   [22:0] tmp_V_1_fu_178_p1;
wire   [31:0] p_Val2_s_fu_156_p1;
wire   [30:0] tmp_15_fu_184_p1;
wire   [31:0] p_Result_9_fu_188_p3;
wire   [7:0] tmp_V_fu_168_p4;
wire   [0:0] tmp_9_fu_214_p2;
wire   [0:0] tmp_s_fu_133_p2;
wire   [0:0] tmp_6_fu_138_p2;
wire   [31:0] p_Val2_3_fu_258_p1;
wire   [7:0] tmp_V_2_fu_262_p4;
wire   [31:0] tmp_12_to_int_fu_284_p1;
wire   [31:0] tmp_12_neg_fu_288_p2;
wire   [31:0] tmp_12_fu_294_p1;
wire   [31:0] tmp_5_to_int_fu_305_p1;
wire   [31:0] tmp_5_neg_fu_309_p2;
reg   [1:0] grp_fu_100_opcode;
wire   [31:0] p_s_fu_298_p3;
reg   [31:0] ap_return_preg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 68'd1;
#0 grp_exp_generic_double_s_fu_89_ap_start_reg = 1'b0;
#0 ap_return_preg = 32'd0;
end

exp_generic_double_s grp_exp_generic_double_s_fu_89(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_exp_generic_double_s_fu_89_ap_start),
    .ap_done(grp_exp_generic_double_s_fu_89_ap_done),
    .ap_idle(grp_exp_generic_double_s_fu_89_ap_idle),
    .ap_ready(grp_exp_generic_double_s_fu_89_ap_ready),
    .x(xd_reg_379),
    .ap_return(grp_exp_generic_double_s_fu_89_ap_return)
);

GELU_faddfsub_32ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
GELU_faddfsub_32ng8j_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_100_p0),
    .din1(grp_fu_100_p1),
    .opcode(grp_fu_100_opcode),
    .ce(1'b1),
    .dout(grp_fu_100_p2)
);

GELU_fmul_32ns_32hbi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
GELU_fmul_32ns_32hbi_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(abst_in_reg_325),
    .din1(reg_143),
    .ce(1'b1),
    .dout(grp_fu_108_p2)
);

GELU_fdiv_32ns_32ibs #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
GELU_fdiv_32ns_32ibs_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_112_p0),
    .din1(grp_fu_112_p1),
    .ce(1'b1),
    .dout(grp_fu_112_p2)
);

GELU_fptrunc_64nsjbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
GELU_fptrunc_64nsjbC_U12(
    .din0(tmp_14_i_reg_389),
    .dout(tmp_15_i_fu_117_p1)
);

GELU_fpext_32ns_6kbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
GELU_fpext_32ns_6kbM_U13(
    .din0(x_2_fu_250_p3),
    .dout(xd_fu_120_p1)
);

GELU_fcmp_32ns_32lbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
GELU_fcmp_32ns_32lbW_U14(
    .din0(tmp_1_fu_123_p0),
    .din1(32'd1102053376),
    .opcode(5'd4),
    .dout(tmp_1_fu_123_p2)
);

GELU_dadd_64ns_64mb6 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
GELU_dadd_64ns_64mb6_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_13_i_reg_384),
    .din1(64'd13830554455654793216),
    .ce(1'b1),
    .dout(grp_fu_128_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state46)) begin
            ap_return_preg <= p_s_fu_298_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_exp_generic_double_s_fu_89_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state7) & (1'b1 == ap_CS_fsm_state6))) begin
            grp_exp_generic_double_s_fu_89_ap_start_reg <= 1'b1;
        end else if ((grp_exp_generic_double_s_fu_89_ap_ready == 1'b1)) begin
            grp_exp_generic_double_s_fu_89_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_30_fu_278_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6) & (tmp_i_fu_272_p2 == 1'd0))) begin
        expx_reg_58 <= x_2_fu_250_p3;
    end else if (((tmp_i_fu_272_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        expx_reg_58 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        expx_reg_58 <= tmp_15_i_fu_117_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_202_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        resultf_4_reg_72 <= p_1_fu_238_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (tmp_1_fu_123_p2 == 1'd0) & (or_cond_fu_220_p2 == 1'd0) & (tmp_7_fu_208_p2 == 1'd0) & (tmp_fu_202_p2 == 1'd0))) begin
        resultf_4_reg_72 <= 32'd1065353216;
    end else if (((tmp_1_reg_344 == 1'd1) & (tmp_3_reg_348 == 1'd0) & (1'b1 == ap_CS_fsm_state46) & (or_cond_reg_340 == 1'd0) & (tmp_7_reg_336 == 1'd0) & (tmp_reg_332 == 1'd0))) begin
        resultf_4_reg_72 <= reg_143;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        resultf_4_reg_72 <= grp_fu_112_p2;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        resultf_4_reg_72 <= resultf_reg_409;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        abst_in_reg_325[30 : 0] <= abst_in_fu_196_p1[30 : 0];
        p_Result_s_reg_320 <= p_Val2_s_fu_156_p1[32'd31];
        tmp_reg_332 <= tmp_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (tmp_7_fu_208_p2 == 1'd0) & (tmp_fu_202_p2 == 1'd0))) begin
        or_cond_reg_340 <= or_cond_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state29) | ((tmp_3_reg_348 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((tmp_3_reg_348 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        reg_143 <= grp_fu_100_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state41))) begin
        reg_150 <= grp_fu_112_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        resultf_reg_409 <= grp_fu_108_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tmp_13_i_reg_384 <= grp_exp_generic_double_s_fu_89_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        tmp_14_i_reg_389 <= grp_fu_128_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (or_cond_fu_220_p2 == 1'd0) & (tmp_7_fu_208_p2 == 1'd0) & (tmp_fu_202_p2 == 1'd0))) begin
        tmp_1_reg_344 <= tmp_1_fu_123_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_123_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (or_cond_fu_220_p2 == 1'd0) & (tmp_7_fu_208_p2 == 1'd0) & (tmp_fu_202_p2 == 1'd0))) begin
        tmp_3_reg_348 <= tmp_3_fu_226_p2;
        tmp_4_neg_reg_353 <= tmp_4_neg_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (tmp_fu_202_p2 == 1'd0))) begin
        tmp_7_reg_336 <= tmp_7_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        tmp_8_reg_399 <= grp_fu_100_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_i_30_fu_278_p2 == 1'd0) & (tmp_i_fu_272_p2 == 1'd0))) begin
        xd_reg_379 <= xd_fu_120_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_reg_344 == 1'd1) & (tmp_3_reg_348 == 1'd0) & (1'b1 == ap_CS_fsm_state46) & (or_cond_reg_340 == 1'd0) & (tmp_7_reg_336 == 1'd0) & (tmp_reg_332 == 1'd0))) begin
        ap_phi_mux_resultf_4_phi_fu_76_p10 = reg_143;
    end else begin
        ap_phi_mux_resultf_4_phi_fu_76_p10 = resultf_4_reg_72;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        ap_return = p_s_fu_298_p3;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | ((tmp_3_reg_348 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        grp_fu_100_opcode = 2'd1;
    end else if ((((tmp_3_reg_348 == 1'd1) & (1'b1 == ap_CS_fsm_state26)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (((tmp_7_fu_208_p2 == 1'd1) & (tmp_fu_202_p2 == 1'd0)) | ((or_cond_fu_220_p2 == 1'd1) & (tmp_fu_202_p2 == 1'd0)))) | ((tmp_3_reg_348 == 1'd0) & (1'b1 == ap_CS_fsm_state26)) | ((tmp_3_reg_348 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        grp_fu_100_opcode = 2'd0;
    end else begin
        grp_fu_100_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_100_p0 = 32'd1065353216;
    end else if ((((tmp_3_reg_348 == 1'd1) & (1'b1 == ap_CS_fsm_state26)) | ((tmp_3_reg_348 == 1'd0) & (1'b1 == ap_CS_fsm_state26)))) begin
        grp_fu_100_p0 = expx_reg_58;
    end else if (((tmp_3_reg_348 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        grp_fu_100_p0 = abst_in_reg_325;
    end else if (((tmp_3_reg_348 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        grp_fu_100_p0 = tmp_4_fu_246_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_100_p0 = abst_in_fu_196_p1;
    end else begin
        grp_fu_100_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_100_p1 = reg_150;
    end else if ((((tmp_3_reg_348 == 1'd1) & (1'b1 == ap_CS_fsm_state26)) | ((tmp_3_reg_348 == 1'd0) & (1'b1 == ap_CS_fsm_state26)))) begin
        grp_fu_100_p1 = 32'd1073741824;
    end else if ((((tmp_3_reg_348 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_3_reg_348 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        grp_fu_100_p1 = abst_in_reg_325;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_100_p1 = 32'd1065353216;
    end else begin
        grp_fu_100_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_112_p0 = tmp_5_fu_315_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_112_p0 = 32'd1073741824;
    end else begin
        grp_fu_112_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_112_p1 = tmp_8_reg_399;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_112_p1 = reg_143;
    end else begin
        grp_fu_112_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & ((tmp_fu_202_p2 == 1'd1) | ((tmp_1_fu_123_p2 == 1'd0) & (or_cond_fu_220_p2 == 1'd0) & (tmp_7_fu_208_p2 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else if (((tmp_1_fu_123_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (or_cond_fu_220_p2 == 1'd0) & (tmp_7_fu_208_p2 == 1'd0) & (tmp_fu_202_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (((tmp_7_fu_208_p2 == 1'd1) & (tmp_fu_202_p2 == 1'd0)) | ((or_cond_fu_220_p2 == 1'd1) & (tmp_fu_202_p2 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (tmp_i_30_fu_278_p2 == 1'd0) & (tmp_i_fu_272_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((tmp_3_reg_348 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abst_in_fu_196_p1 = p_Result_9_fu_188_p3;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_NS_fsm_state7 = ap_NS_fsm[32'd6];

assign grp_exp_generic_double_s_fu_89_ap_start = grp_exp_generic_double_s_fu_89_ap_start_reg;

assign or_cond_fu_220_p2 = (tmp_s_fu_133_p2 & tmp_9_fu_214_p2);

assign p_1_fu_238_p3 = ((tmp_6_fu_138_p2[0:0] === 1'b1) ? 32'd1065353216 : 32'd2147483647);

assign p_Result_9_fu_188_p3 = {{1'd0}, {tmp_15_fu_184_p1}};

assign p_Val2_3_fu_258_p1 = x_2_fu_250_p3;

assign p_Val2_s_fu_156_p1 = t_in;

assign p_s_fu_298_p3 = ((p_Result_s_reg_320[0:0] === 1'b1) ? tmp_12_fu_294_p1 : ap_phi_mux_resultf_4_phi_fu_76_p10);

assign tmp_12_fu_294_p1 = tmp_12_neg_fu_288_p2;

assign tmp_12_neg_fu_288_p2 = (tmp_12_to_int_fu_284_p1 ^ 32'd2147483648);

assign tmp_12_to_int_fu_284_p1 = ap_phi_mux_resultf_4_phi_fu_76_p10;

assign tmp_15_fu_184_p1 = p_Val2_s_fu_156_p1[30:0];

assign tmp_1_fu_123_p0 = p_Result_9_fu_188_p3;

assign tmp_3_fu_226_p2 = ((tmp_V_fu_168_p4 < 8'd127) ? 1'b1 : 1'b0);

assign tmp_4_fu_246_p1 = tmp_4_neg_reg_353;

assign tmp_4_neg_fu_232_p2 = (p_Result_9_fu_188_p3 ^ 32'd2147483648);

assign tmp_5_fu_315_p1 = tmp_5_neg_fu_309_p2;

assign tmp_5_neg_fu_309_p2 = (tmp_5_to_int_fu_305_p1 ^ 32'd2147483648);

assign tmp_5_to_int_fu_305_p1 = expx_reg_58;

assign tmp_6_fu_138_p2 = ((tmp_V_1_fu_178_p1 == 23'd0) ? 1'b1 : 1'b0);

assign tmp_7_fu_208_p2 = ((tmp_V_fu_168_p4 < 8'd72) ? 1'b1 : 1'b0);

assign tmp_9_fu_214_p2 = ((tmp_V_fu_168_p4 == 8'd72) ? 1'b1 : 1'b0);

assign tmp_V_1_fu_178_p1 = p_Val2_s_fu_156_p1[22:0];

assign tmp_V_2_fu_262_p4 = {{p_Val2_3_fu_258_p1[30:23]}};

assign tmp_V_fu_168_p4 = {{p_Val2_s_fu_156_p1[30:23]}};

assign tmp_fu_202_p2 = ((tmp_V_fu_168_p4 == 8'd255) ? 1'b1 : 1'b0);

assign tmp_i_30_fu_278_p2 = ((tmp_V_2_fu_262_p4 < 8'd96) ? 1'b1 : 1'b0);

assign tmp_i_fu_272_p2 = ((tmp_V_2_fu_262_p4 == 8'd0) ? 1'b1 : 1'b0);

assign tmp_s_fu_133_p2 = ((tmp_V_1_fu_178_p1 == 23'd0) ? 1'b1 : 1'b0);

assign x_2_fu_250_p3 = ((tmp_3_reg_348[0:0] === 1'b1) ? reg_143 : reg_143);

always @ (posedge ap_clk) begin
    abst_in_reg_325[31] <= 1'b0;
end

endmodule //generic_tanh_float_s
