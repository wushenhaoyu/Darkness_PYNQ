// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Aff_channel.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Aff_channel::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Aff_channel::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<30> Aff_channel::ap_ST_fsm_state1 = "1";
const sc_lv<30> Aff_channel::ap_ST_fsm_state2 = "10";
const sc_lv<30> Aff_channel::ap_ST_fsm_state3 = "100";
const sc_lv<30> Aff_channel::ap_ST_fsm_state4 = "1000";
const sc_lv<30> Aff_channel::ap_ST_fsm_state5 = "10000";
const sc_lv<30> Aff_channel::ap_ST_fsm_state6 = "100000";
const sc_lv<30> Aff_channel::ap_ST_fsm_state7 = "1000000";
const sc_lv<30> Aff_channel::ap_ST_fsm_state8 = "10000000";
const sc_lv<30> Aff_channel::ap_ST_fsm_state9 = "100000000";
const sc_lv<30> Aff_channel::ap_ST_fsm_state10 = "1000000000";
const sc_lv<30> Aff_channel::ap_ST_fsm_state11 = "10000000000";
const sc_lv<30> Aff_channel::ap_ST_fsm_state12 = "100000000000";
const sc_lv<30> Aff_channel::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<30> Aff_channel::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<30> Aff_channel::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<30> Aff_channel::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<30> Aff_channel::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<30> Aff_channel::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<30> Aff_channel::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<30> Aff_channel::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<30> Aff_channel::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<30> Aff_channel::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<30> Aff_channel::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<30> Aff_channel::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<30> Aff_channel::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<30> Aff_channel::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<30> Aff_channel::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<30> Aff_channel::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<30> Aff_channel::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<30> Aff_channel::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<32> Aff_channel::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Aff_channel::ap_const_lv32_4 = "100";
const sc_lv<32> Aff_channel::ap_const_lv32_B = "1011";
const sc_lv<32> Aff_channel::ap_const_lv32_5 = "101";
const sc_lv<32> Aff_channel::ap_const_lv32_C = "1100";
const sc_lv<1> Aff_channel::ap_const_lv1_0 = "0";
const sc_lv<32> Aff_channel::ap_const_lv32_E = "1110";
const sc_lv<32> Aff_channel::ap_const_lv32_15 = "10101";
const sc_lv<32> Aff_channel::ap_const_lv32_F = "1111";
const sc_lv<32> Aff_channel::ap_const_lv32_16 = "10110";
const sc_lv<32> Aff_channel::ap_const_lv32_18 = "11000";
const sc_lv<32> Aff_channel::ap_const_lv32_1D = "11101";
const int Aff_channel::C_S_AXI_DATA_WIDTH = "100000";
const int Aff_channel::C_M_AXI_GMEM_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int Aff_channel::C_M_AXI_GMEM_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int Aff_channel::C_M_AXI_GMEM_CACHE_VALUE = "11";
const int Aff_channel::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> Aff_channel::ap_const_lv32_1 = "1";
const sc_lv<32> Aff_channel::ap_const_lv32_2 = "10";
const sc_lv<32> Aff_channel::ap_const_lv32_3 = "11";
const sc_lv<1> Aff_channel::ap_const_lv1_1 = "1";
const sc_lv<32> Aff_channel::ap_const_lv32_D = "1101";
const sc_lv<32> Aff_channel::ap_const_lv32_17 = "10111";
const sc_lv<16> Aff_channel::ap_const_lv16_0 = "0000000000000000";
const sc_lv<8> Aff_channel::ap_const_lv8_0 = "00000000";
const sc_lv<24> Aff_channel::ap_const_lv24_0 = "000000000000000000000000";
const sc_lv<5> Aff_channel::ap_const_lv5_0 = "00000";
const sc_lv<3> Aff_channel::ap_const_lv3_0 = "000";
const sc_lv<2> Aff_channel::ap_const_lv2_0 = "00";
const sc_lv<4> Aff_channel::ap_const_lv4_0 = "0000";
const sc_lv<32> Aff_channel::ap_const_lv32_10 = "10000";
const sc_lv<2> Aff_channel::ap_const_lv2_3 = "11";
const sc_lv<32> Aff_channel::ap_const_lv32_1F = "11111";
const sc_lv<16> Aff_channel::ap_const_lv16_1 = "1";
const sc_lv<8> Aff_channel::ap_const_lv8_1 = "1";
const sc_lv<5> Aff_channel::ap_const_lv5_10 = "10000";
const sc_lv<5> Aff_channel::ap_const_lv5_1 = "1";
const sc_lv<32> Aff_channel::ap_const_lv32_8 = "1000";
const bool Aff_channel::ap_const_boolean_1 = true;

Aff_channel::Aff_channel(sc_module_name name) : sc_module(name), mVcdFile(0) {
    Aff_channel_AXILiteS_s_axi_U = new Aff_channel_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("Aff_channel_AXILiteS_s_axi_U");
    Aff_channel_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    Aff_channel_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    Aff_channel_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    Aff_channel_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    Aff_channel_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    Aff_channel_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    Aff_channel_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    Aff_channel_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    Aff_channel_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    Aff_channel_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    Aff_channel_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    Aff_channel_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    Aff_channel_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    Aff_channel_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    Aff_channel_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    Aff_channel_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    Aff_channel_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    Aff_channel_AXILiteS_s_axi_U->ACLK(ap_clk);
    Aff_channel_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    Aff_channel_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    Aff_channel_AXILiteS_s_axi_U->ap_start(ap_start);
    Aff_channel_AXILiteS_s_axi_U->interrupt(interrupt);
    Aff_channel_AXILiteS_s_axi_U->ap_ready(ap_ready);
    Aff_channel_AXILiteS_s_axi_U->ap_done(ap_done);
    Aff_channel_AXILiteS_s_axi_U->ap_idle(ap_idle);
    Aff_channel_AXILiteS_s_axi_U->dim_V(dim_V);
    Aff_channel_AXILiteS_s_axi_U->input_width_V(input_width_V);
    Aff_channel_AXILiteS_s_axi_U->input_height_V(input_height_V);
    Aff_channel_AXILiteS_s_axi_U->input_data_V(input_data_V);
    Aff_channel_AXILiteS_s_axi_U->alpha_V(alpha_V);
    Aff_channel_AXILiteS_s_axi_U->beta_V(beta_V);
    Aff_channel_AXILiteS_s_axi_U->color_V(color_V);
    Aff_channel_AXILiteS_s_axi_U->out_data_V(out_data_V);
    Aff_channel_gmem_m_axi_U = new Aff_channel_gmem_m_axi<0,16,32,5,16,16,16,16,C_M_AXI_GMEM_ID_WIDTH,C_M_AXI_GMEM_ADDR_WIDTH,C_M_AXI_GMEM_DATA_WIDTH,C_M_AXI_GMEM_AWUSER_WIDTH,C_M_AXI_GMEM_ARUSER_WIDTH,C_M_AXI_GMEM_WUSER_WIDTH,C_M_AXI_GMEM_RUSER_WIDTH,C_M_AXI_GMEM_BUSER_WIDTH,C_M_AXI_GMEM_USER_VALUE,C_M_AXI_GMEM_PROT_VALUE,C_M_AXI_GMEM_CACHE_VALUE>("Aff_channel_gmem_m_axi_U");
    Aff_channel_gmem_m_axi_U->AWVALID(m_axi_gmem_AWVALID);
    Aff_channel_gmem_m_axi_U->AWREADY(m_axi_gmem_AWREADY);
    Aff_channel_gmem_m_axi_U->AWADDR(m_axi_gmem_AWADDR);
    Aff_channel_gmem_m_axi_U->AWID(m_axi_gmem_AWID);
    Aff_channel_gmem_m_axi_U->AWLEN(m_axi_gmem_AWLEN);
    Aff_channel_gmem_m_axi_U->AWSIZE(m_axi_gmem_AWSIZE);
    Aff_channel_gmem_m_axi_U->AWBURST(m_axi_gmem_AWBURST);
    Aff_channel_gmem_m_axi_U->AWLOCK(m_axi_gmem_AWLOCK);
    Aff_channel_gmem_m_axi_U->AWCACHE(m_axi_gmem_AWCACHE);
    Aff_channel_gmem_m_axi_U->AWPROT(m_axi_gmem_AWPROT);
    Aff_channel_gmem_m_axi_U->AWQOS(m_axi_gmem_AWQOS);
    Aff_channel_gmem_m_axi_U->AWREGION(m_axi_gmem_AWREGION);
    Aff_channel_gmem_m_axi_U->AWUSER(m_axi_gmem_AWUSER);
    Aff_channel_gmem_m_axi_U->WVALID(m_axi_gmem_WVALID);
    Aff_channel_gmem_m_axi_U->WREADY(m_axi_gmem_WREADY);
    Aff_channel_gmem_m_axi_U->WDATA(m_axi_gmem_WDATA);
    Aff_channel_gmem_m_axi_U->WSTRB(m_axi_gmem_WSTRB);
    Aff_channel_gmem_m_axi_U->WLAST(m_axi_gmem_WLAST);
    Aff_channel_gmem_m_axi_U->WID(m_axi_gmem_WID);
    Aff_channel_gmem_m_axi_U->WUSER(m_axi_gmem_WUSER);
    Aff_channel_gmem_m_axi_U->ARVALID(m_axi_gmem_ARVALID);
    Aff_channel_gmem_m_axi_U->ARREADY(m_axi_gmem_ARREADY);
    Aff_channel_gmem_m_axi_U->ARADDR(m_axi_gmem_ARADDR);
    Aff_channel_gmem_m_axi_U->ARID(m_axi_gmem_ARID);
    Aff_channel_gmem_m_axi_U->ARLEN(m_axi_gmem_ARLEN);
    Aff_channel_gmem_m_axi_U->ARSIZE(m_axi_gmem_ARSIZE);
    Aff_channel_gmem_m_axi_U->ARBURST(m_axi_gmem_ARBURST);
    Aff_channel_gmem_m_axi_U->ARLOCK(m_axi_gmem_ARLOCK);
    Aff_channel_gmem_m_axi_U->ARCACHE(m_axi_gmem_ARCACHE);
    Aff_channel_gmem_m_axi_U->ARPROT(m_axi_gmem_ARPROT);
    Aff_channel_gmem_m_axi_U->ARQOS(m_axi_gmem_ARQOS);
    Aff_channel_gmem_m_axi_U->ARREGION(m_axi_gmem_ARREGION);
    Aff_channel_gmem_m_axi_U->ARUSER(m_axi_gmem_ARUSER);
    Aff_channel_gmem_m_axi_U->RVALID(m_axi_gmem_RVALID);
    Aff_channel_gmem_m_axi_U->RREADY(m_axi_gmem_RREADY);
    Aff_channel_gmem_m_axi_U->RDATA(m_axi_gmem_RDATA);
    Aff_channel_gmem_m_axi_U->RLAST(m_axi_gmem_RLAST);
    Aff_channel_gmem_m_axi_U->RID(m_axi_gmem_RID);
    Aff_channel_gmem_m_axi_U->RUSER(m_axi_gmem_RUSER);
    Aff_channel_gmem_m_axi_U->RRESP(m_axi_gmem_RRESP);
    Aff_channel_gmem_m_axi_U->BVALID(m_axi_gmem_BVALID);
    Aff_channel_gmem_m_axi_U->BREADY(m_axi_gmem_BREADY);
    Aff_channel_gmem_m_axi_U->BRESP(m_axi_gmem_BRESP);
    Aff_channel_gmem_m_axi_U->BID(m_axi_gmem_BID);
    Aff_channel_gmem_m_axi_U->BUSER(m_axi_gmem_BUSER);
    Aff_channel_gmem_m_axi_U->ACLK(ap_clk);
    Aff_channel_gmem_m_axi_U->ARESET(ap_rst_n_inv);
    Aff_channel_gmem_m_axi_U->ACLK_EN(ap_var_for_const0);
    Aff_channel_gmem_m_axi_U->I_ARVALID(gmem_ARVALID);
    Aff_channel_gmem_m_axi_U->I_ARREADY(gmem_ARREADY);
    Aff_channel_gmem_m_axi_U->I_ARADDR(gmem_ARADDR);
    Aff_channel_gmem_m_axi_U->I_ARID(ap_var_for_const1);
    Aff_channel_gmem_m_axi_U->I_ARLEN(gmem_ARLEN);
    Aff_channel_gmem_m_axi_U->I_ARSIZE(ap_var_for_const2);
    Aff_channel_gmem_m_axi_U->I_ARLOCK(ap_var_for_const3);
    Aff_channel_gmem_m_axi_U->I_ARCACHE(ap_var_for_const4);
    Aff_channel_gmem_m_axi_U->I_ARQOS(ap_var_for_const4);
    Aff_channel_gmem_m_axi_U->I_ARPROT(ap_var_for_const2);
    Aff_channel_gmem_m_axi_U->I_ARUSER(ap_var_for_const1);
    Aff_channel_gmem_m_axi_U->I_ARBURST(ap_var_for_const3);
    Aff_channel_gmem_m_axi_U->I_ARREGION(ap_var_for_const4);
    Aff_channel_gmem_m_axi_U->I_RVALID(gmem_RVALID);
    Aff_channel_gmem_m_axi_U->I_RREADY(gmem_RREADY);
    Aff_channel_gmem_m_axi_U->I_RDATA(gmem_RDATA);
    Aff_channel_gmem_m_axi_U->I_RID(gmem_RID);
    Aff_channel_gmem_m_axi_U->I_RUSER(gmem_RUSER);
    Aff_channel_gmem_m_axi_U->I_RRESP(gmem_RRESP);
    Aff_channel_gmem_m_axi_U->I_RLAST(gmem_RLAST);
    Aff_channel_gmem_m_axi_U->I_AWVALID(gmem_AWVALID);
    Aff_channel_gmem_m_axi_U->I_AWREADY(gmem_AWREADY);
    Aff_channel_gmem_m_axi_U->I_AWADDR(gmem_addr_4_reg_776);
    Aff_channel_gmem_m_axi_U->I_AWID(ap_var_for_const1);
    Aff_channel_gmem_m_axi_U->I_AWLEN(ap_var_for_const5);
    Aff_channel_gmem_m_axi_U->I_AWSIZE(ap_var_for_const2);
    Aff_channel_gmem_m_axi_U->I_AWLOCK(ap_var_for_const3);
    Aff_channel_gmem_m_axi_U->I_AWCACHE(ap_var_for_const4);
    Aff_channel_gmem_m_axi_U->I_AWQOS(ap_var_for_const4);
    Aff_channel_gmem_m_axi_U->I_AWPROT(ap_var_for_const2);
    Aff_channel_gmem_m_axi_U->I_AWUSER(ap_var_for_const1);
    Aff_channel_gmem_m_axi_U->I_AWBURST(ap_var_for_const3);
    Aff_channel_gmem_m_axi_U->I_AWREGION(ap_var_for_const4);
    Aff_channel_gmem_m_axi_U->I_WVALID(gmem_WVALID);
    Aff_channel_gmem_m_axi_U->I_WREADY(gmem_WREADY);
    Aff_channel_gmem_m_axi_U->I_WDATA(tmp_s_reg_797);
    Aff_channel_gmem_m_axi_U->I_WID(ap_var_for_const1);
    Aff_channel_gmem_m_axi_U->I_WUSER(ap_var_for_const1);
    Aff_channel_gmem_m_axi_U->I_WLAST(ap_var_for_const6);
    Aff_channel_gmem_m_axi_U->I_WSTRB(ap_var_for_const7);
    Aff_channel_gmem_m_axi_U->I_BVALID(gmem_BVALID);
    Aff_channel_gmem_m_axi_U->I_BREADY(gmem_BREADY);
    Aff_channel_gmem_m_axi_U->I_BRESP(gmem_BRESP);
    Aff_channel_gmem_m_axi_U->I_BID(gmem_BID);
    Aff_channel_gmem_m_axi_U->I_BUSER(gmem_BUSER);
    Aff_channel_mac_mbkb_U1 = new Aff_channel_mac_mbkb<1,1,24,16,32,40>("Aff_channel_mac_mbkb_U1");
    Aff_channel_mac_mbkb_U1->din0(grp_fu_611_p0);
    Aff_channel_mac_mbkb_U1->din1(grp_fu_611_p1);
    Aff_channel_mac_mbkb_U1->din2(grp_fu_611_p2);
    Aff_channel_mac_mbkb_U1->dout(grp_fu_611_p3);
    Aff_channel_mac_mcud_U2 = new Aff_channel_mac_mcud<1,1,16,16,24,24>("Aff_channel_mac_mcud_U2");
    Aff_channel_mac_mcud_U2->din0(gmem_addr_1_read_reg_759);
    Aff_channel_mac_mcud_U2->din1(grp_fu_618_p1);
    Aff_channel_mac_mcud_U2->din2(grp_fu_618_p2);
    Aff_channel_mac_mcud_U2->dout(grp_fu_618_p3);
    Aff_channel_mac_mcud_U3 = new Aff_channel_mac_mcud<1,1,16,16,24,24>("Aff_channel_mac_mcud_U3");
    Aff_channel_mac_mcud_U3->din0(p_Val2_2_reg_293);
    Aff_channel_mac_mcud_U3->din1(gmem_addr_2_read_reg_787);
    Aff_channel_mac_mcud_U3->din2(grp_fu_626_p2);
    Aff_channel_mac_mcud_U3->dout(grp_fu_626_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_alpha_V4_sum_cast_fu_529_p1);
    sensitive << ( alpha_V4_sum_fu_524_p2 );

    SC_METHOD(thread_alpha_V4_sum_fu_524_p2);
    sensitive << ( tmp_3_cast_reg_665 );
    sensitive << ( tmp_9_cast_fu_520_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state13);
    sensitive << ( exitcond_fu_508_p2 );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond3_fu_403_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond3_fu_403_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_gmem_ARREADY);
    sensitive << ( gmem_ARREADY );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_gmem_AWREADY);
    sensitive << ( gmem_AWREADY );
    sensitive << ( ap_reg_ioackin_gmem_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_gmem_WREADY);
    sensitive << ( gmem_WREADY );
    sensitive << ( ap_reg_ioackin_gmem_WREADY );

    SC_METHOD(thread_beta_V6_sum_cast_fu_544_p1);
    sensitive << ( beta_V6_sum_fu_539_p2 );

    SC_METHOD(thread_beta_V6_sum_fu_539_p2);
    sensitive << ( tmp_2_cast_reg_660 );
    sensitive << ( tmp_9_cast_fu_520_p1 );

    SC_METHOD(thread_c_color_1_fu_514_p2);
    sensitive << ( c_color_reg_305 );

    SC_METHOD(thread_c_fu_449_p2);
    sensitive << ( i_op_assign_2_reg_270 );

    SC_METHOD(thread_color_V8_sum_cast_fu_494_p1);
    sensitive << ( color_V8_sum_fu_489_p2 );

    SC_METHOD(thread_color_V8_sum_fu_489_p2);
    sensitive << ( tmp_1_cast_reg_655 );
    sensitive << ( tmp_5_cast_fu_485_p1 );

    SC_METHOD(thread_exitcond1_fu_444_p2);
    sensitive << ( dim_V_read_reg_645 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( i_op_assign_2_reg_270 );

    SC_METHOD(thread_exitcond2_fu_418_p2);
    sensitive << ( input_width_V_read_reg_640 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_op_assign_1_reg_259 );

    SC_METHOD(thread_exitcond3_fu_403_p2);
    sensitive << ( input_height_V_read_reg_635 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_op_assign_reg_236 );

    SC_METHOD(thread_exitcond_fu_508_p2);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( exitcond_fu_508_p2 );
    sensitive << ( gmem_RVALID );
    sensitive << ( c_color_reg_305 );

    SC_METHOD(thread_gmem_ARADDR);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( gmem_addr_reg_734 );
    sensitive << ( gmem_addr_1_reg_740 );
    sensitive << ( gmem_addr_2_reg_764 );
    sensitive << ( gmem_addr_3_reg_770 );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );

    SC_METHOD(thread_gmem_ARLEN);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );

    SC_METHOD(thread_gmem_ARVALID);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );

    SC_METHOD(thread_gmem_AWVALID);
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( gmem_RVALID );
    sensitive << ( ap_reg_ioackin_gmem_AWREADY );

    SC_METHOD(thread_gmem_BREADY);
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( gmem_BVALID );

    SC_METHOD(thread_gmem_RREADY);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( exitcond_fu_508_p2 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( gmem_RVALID );
    sensitive << ( ap_sig_ioackin_gmem_AWREADY );

    SC_METHOD(thread_gmem_WVALID);
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_reg_ioackin_gmem_WREADY );

    SC_METHOD(thread_gmem_blk_n_AR);
    sensitive << ( m_axi_gmem_ARREADY );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_gmem_blk_n_AW);
    sensitive << ( m_axi_gmem_AWREADY );
    sensitive << ( ap_CS_fsm_state22 );

    SC_METHOD(thread_gmem_blk_n_B);
    sensitive << ( m_axi_gmem_BVALID );
    sensitive << ( ap_CS_fsm_state30 );

    SC_METHOD(thread_gmem_blk_n_R);
    sensitive << ( m_axi_gmem_RVALID );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( exitcond_fu_508_p2 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_gmem_blk_n_W);
    sensitive << ( m_axi_gmem_WREADY );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_grp_fu_611_p0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond1_fu_444_p2 );
    sensitive << ( grp_fu_611_p00 );

    SC_METHOD(thread_grp_fu_611_p00);
    sensitive << ( ret_V_reg_282 );

    SC_METHOD(thread_grp_fu_611_p1);
    sensitive << ( rhs_V_1_cast_reg_680 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond1_fu_444_p2 );

    SC_METHOD(thread_grp_fu_611_p2);
    sensitive << ( tmp1_cast_reg_711 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond1_fu_444_p2 );

    SC_METHOD(thread_grp_fu_618_p1);
    sensitive << ( r_V_2_reg_746 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_grp_fu_618_p2);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( p_Val2_2_reg_293 );

    SC_METHOD(thread_grp_fu_626_p2);
    sensitive << ( p_Val2_s_reg_792 );
    sensitive << ( ap_CS_fsm_state24 );

    SC_METHOD(thread_h_fu_408_p2);
    sensitive << ( i_op_assign_reg_236 );

    SC_METHOD(thread_i_op_assign_1_cast5_fu_414_p1);
    sensitive << ( i_op_assign_1_reg_259 );

    SC_METHOD(thread_input_data_V2_sum_ca_fu_475_p1);
    sensitive << ( input_data_V2_sum_fu_470_p2 );

    SC_METHOD(thread_input_data_V2_sum_fu_470_p2);
    sensitive << ( tmp_14_cast_reg_670 );
    sensitive << ( tmp_7_cast_cast_fu_459_p1 );

    SC_METHOD(thread_next_mul1_fu_398_p2);
    sensitive << ( rhs_V_2_cast_reg_685 );
    sensitive << ( ret_V_2_reg_247 );

    SC_METHOD(thread_next_mul_fu_439_p2);
    sensitive << ( rhs_V_cast_reg_675 );
    sensitive << ( ret_V_reg_282 );

    SC_METHOD(thread_out_data_V10_sum_cas_fu_558_p1);
    sensitive << ( out_data_V10_sum_fu_554_p2 );

    SC_METHOD(thread_out_data_V10_sum_fu_554_p2);
    sensitive << ( tmp_cast_reg_650 );
    sensitive << ( tmp_7_cast_cast_reg_729 );

    SC_METHOD(thread_r_V_2_fu_504_p0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( gmem_RDATA );

    SC_METHOD(thread_r_V_2_fu_504_p1);
    sensitive << ( r_V_2_fu_504_p0 );

    SC_METHOD(thread_rhs_V_1_cast_fu_390_p1);
    sensitive << ( input_width_V );

    SC_METHOD(thread_rhs_V_2_cast_fu_394_p1);
    sensitive << ( input_width_V );

    SC_METHOD(thread_rhs_V_cast_fu_386_p1);
    sensitive << ( input_height_V );

    SC_METHOD(thread_tmp1_cast_fu_435_p1);
    sensitive << ( tmp1_fu_429_p2 );

    SC_METHOD(thread_tmp1_fu_429_p2);
    sensitive << ( ret_V_2_reg_247 );
    sensitive << ( i_op_assign_1_cast5_fu_414_p1 );

    SC_METHOD(thread_tmp_14_cast_fu_382_p1);
    sensitive << ( tmp_5_fu_372_p4 );

    SC_METHOD(thread_tmp_1_cast_fu_340_p1);
    sensitive << ( tmp_1_fu_330_p4 );

    SC_METHOD(thread_tmp_1_fu_330_p4);
    sensitive << ( color_V );

    SC_METHOD(thread_tmp_2_cast_fu_354_p1);
    sensitive << ( tmp_2_fu_344_p4 );

    SC_METHOD(thread_tmp_2_fu_344_p4);
    sensitive << ( beta_V );

    SC_METHOD(thread_tmp_3_cast_fu_368_p1);
    sensitive << ( tmp_3_fu_358_p4 );

    SC_METHOD(thread_tmp_3_fu_358_p4);
    sensitive << ( alpha_V );

    SC_METHOD(thread_tmp_5_cast_fu_485_p1);
    sensitive << ( tmp_8_fu_462_p3 );

    SC_METHOD(thread_tmp_5_fu_372_p4);
    sensitive << ( input_data_V );

    SC_METHOD(thread_tmp_7_cast_cast_fu_459_p1);
    sensitive << ( grp_fu_611_p3 );

    SC_METHOD(thread_tmp_8_fu_462_p3);
    sensitive << ( i_op_assign_2_reg_270 );

    SC_METHOD(thread_tmp_9_cast_fu_520_p1);
    sensitive << ( i_op_assign_2_reg_270 );

    SC_METHOD(thread_tmp_cast_fu_326_p1);
    sensitive << ( tmp_fu_316_p4 );

    SC_METHOD(thread_tmp_fu_316_p4);
    sensitive << ( out_data_V );

    SC_METHOD(thread_w_fu_423_p2);
    sensitive << ( i_op_assign_1_reg_259 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( exitcond_fu_508_p2 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( gmem_RVALID );
    sensitive << ( gmem_BVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond2_fu_418_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond1_fu_444_p2 );
    sensitive << ( ap_sig_ioackin_gmem_AWREADY );
    sensitive << ( exitcond3_fu_403_p2 );
    sensitive << ( ap_sig_ioackin_gmem_ARREADY );
    sensitive << ( ap_sig_ioackin_gmem_WREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const7);

    ap_CS_fsm = "000000000000000000000000000001";
    ap_reg_ioackin_gmem_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_gmem_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_gmem_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Aff_channel_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_gmem_AWVALID, "(port)m_axi_gmem_AWVALID");
    sc_trace(mVcdFile, m_axi_gmem_AWREADY, "(port)m_axi_gmem_AWREADY");
    sc_trace(mVcdFile, m_axi_gmem_AWADDR, "(port)m_axi_gmem_AWADDR");
    sc_trace(mVcdFile, m_axi_gmem_AWID, "(port)m_axi_gmem_AWID");
    sc_trace(mVcdFile, m_axi_gmem_AWLEN, "(port)m_axi_gmem_AWLEN");
    sc_trace(mVcdFile, m_axi_gmem_AWSIZE, "(port)m_axi_gmem_AWSIZE");
    sc_trace(mVcdFile, m_axi_gmem_AWBURST, "(port)m_axi_gmem_AWBURST");
    sc_trace(mVcdFile, m_axi_gmem_AWLOCK, "(port)m_axi_gmem_AWLOCK");
    sc_trace(mVcdFile, m_axi_gmem_AWCACHE, "(port)m_axi_gmem_AWCACHE");
    sc_trace(mVcdFile, m_axi_gmem_AWPROT, "(port)m_axi_gmem_AWPROT");
    sc_trace(mVcdFile, m_axi_gmem_AWQOS, "(port)m_axi_gmem_AWQOS");
    sc_trace(mVcdFile, m_axi_gmem_AWREGION, "(port)m_axi_gmem_AWREGION");
    sc_trace(mVcdFile, m_axi_gmem_AWUSER, "(port)m_axi_gmem_AWUSER");
    sc_trace(mVcdFile, m_axi_gmem_WVALID, "(port)m_axi_gmem_WVALID");
    sc_trace(mVcdFile, m_axi_gmem_WREADY, "(port)m_axi_gmem_WREADY");
    sc_trace(mVcdFile, m_axi_gmem_WDATA, "(port)m_axi_gmem_WDATA");
    sc_trace(mVcdFile, m_axi_gmem_WSTRB, "(port)m_axi_gmem_WSTRB");
    sc_trace(mVcdFile, m_axi_gmem_WLAST, "(port)m_axi_gmem_WLAST");
    sc_trace(mVcdFile, m_axi_gmem_WID, "(port)m_axi_gmem_WID");
    sc_trace(mVcdFile, m_axi_gmem_WUSER, "(port)m_axi_gmem_WUSER");
    sc_trace(mVcdFile, m_axi_gmem_ARVALID, "(port)m_axi_gmem_ARVALID");
    sc_trace(mVcdFile, m_axi_gmem_ARREADY, "(port)m_axi_gmem_ARREADY");
    sc_trace(mVcdFile, m_axi_gmem_ARADDR, "(port)m_axi_gmem_ARADDR");
    sc_trace(mVcdFile, m_axi_gmem_ARID, "(port)m_axi_gmem_ARID");
    sc_trace(mVcdFile, m_axi_gmem_ARLEN, "(port)m_axi_gmem_ARLEN");
    sc_trace(mVcdFile, m_axi_gmem_ARSIZE, "(port)m_axi_gmem_ARSIZE");
    sc_trace(mVcdFile, m_axi_gmem_ARBURST, "(port)m_axi_gmem_ARBURST");
    sc_trace(mVcdFile, m_axi_gmem_ARLOCK, "(port)m_axi_gmem_ARLOCK");
    sc_trace(mVcdFile, m_axi_gmem_ARCACHE, "(port)m_axi_gmem_ARCACHE");
    sc_trace(mVcdFile, m_axi_gmem_ARPROT, "(port)m_axi_gmem_ARPROT");
    sc_trace(mVcdFile, m_axi_gmem_ARQOS, "(port)m_axi_gmem_ARQOS");
    sc_trace(mVcdFile, m_axi_gmem_ARREGION, "(port)m_axi_gmem_ARREGION");
    sc_trace(mVcdFile, m_axi_gmem_ARUSER, "(port)m_axi_gmem_ARUSER");
    sc_trace(mVcdFile, m_axi_gmem_RVALID, "(port)m_axi_gmem_RVALID");
    sc_trace(mVcdFile, m_axi_gmem_RREADY, "(port)m_axi_gmem_RREADY");
    sc_trace(mVcdFile, m_axi_gmem_RDATA, "(port)m_axi_gmem_RDATA");
    sc_trace(mVcdFile, m_axi_gmem_RLAST, "(port)m_axi_gmem_RLAST");
    sc_trace(mVcdFile, m_axi_gmem_RID, "(port)m_axi_gmem_RID");
    sc_trace(mVcdFile, m_axi_gmem_RUSER, "(port)m_axi_gmem_RUSER");
    sc_trace(mVcdFile, m_axi_gmem_RRESP, "(port)m_axi_gmem_RRESP");
    sc_trace(mVcdFile, m_axi_gmem_BVALID, "(port)m_axi_gmem_BVALID");
    sc_trace(mVcdFile, m_axi_gmem_BREADY, "(port)m_axi_gmem_BREADY");
    sc_trace(mVcdFile, m_axi_gmem_BRESP, "(port)m_axi_gmem_BRESP");
    sc_trace(mVcdFile, m_axi_gmem_BID, "(port)m_axi_gmem_BID");
    sc_trace(mVcdFile, m_axi_gmem_BUSER, "(port)m_axi_gmem_BUSER");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, dim_V, "dim_V");
    sc_trace(mVcdFile, input_width_V, "input_width_V");
    sc_trace(mVcdFile, input_height_V, "input_height_V");
    sc_trace(mVcdFile, input_data_V, "input_data_V");
    sc_trace(mVcdFile, alpha_V, "alpha_V");
    sc_trace(mVcdFile, beta_V, "beta_V");
    sc_trace(mVcdFile, color_V, "color_V");
    sc_trace(mVcdFile, out_data_V, "out_data_V");
    sc_trace(mVcdFile, gmem_blk_n_AR, "gmem_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, gmem_blk_n_R, "gmem_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, exitcond_fu_508_p2, "exitcond_fu_508_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, gmem_blk_n_AW, "gmem_blk_n_AW");
    sc_trace(mVcdFile, gmem_blk_n_W, "gmem_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, gmem_blk_n_B, "gmem_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, gmem_AWVALID, "gmem_AWVALID");
    sc_trace(mVcdFile, gmem_AWREADY, "gmem_AWREADY");
    sc_trace(mVcdFile, gmem_WVALID, "gmem_WVALID");
    sc_trace(mVcdFile, gmem_WREADY, "gmem_WREADY");
    sc_trace(mVcdFile, gmem_ARVALID, "gmem_ARVALID");
    sc_trace(mVcdFile, gmem_ARREADY, "gmem_ARREADY");
    sc_trace(mVcdFile, gmem_ARADDR, "gmem_ARADDR");
    sc_trace(mVcdFile, gmem_ARLEN, "gmem_ARLEN");
    sc_trace(mVcdFile, gmem_RVALID, "gmem_RVALID");
    sc_trace(mVcdFile, gmem_RREADY, "gmem_RREADY");
    sc_trace(mVcdFile, gmem_RDATA, "gmem_RDATA");
    sc_trace(mVcdFile, gmem_RLAST, "gmem_RLAST");
    sc_trace(mVcdFile, gmem_RID, "gmem_RID");
    sc_trace(mVcdFile, gmem_RUSER, "gmem_RUSER");
    sc_trace(mVcdFile, gmem_RRESP, "gmem_RRESP");
    sc_trace(mVcdFile, gmem_BVALID, "gmem_BVALID");
    sc_trace(mVcdFile, gmem_BREADY, "gmem_BREADY");
    sc_trace(mVcdFile, gmem_BRESP, "gmem_BRESP");
    sc_trace(mVcdFile, gmem_BID, "gmem_BID");
    sc_trace(mVcdFile, gmem_BUSER, "gmem_BUSER");
    sc_trace(mVcdFile, input_height_V_read_reg_635, "input_height_V_read_reg_635");
    sc_trace(mVcdFile, input_width_V_read_reg_640, "input_width_V_read_reg_640");
    sc_trace(mVcdFile, dim_V_read_reg_645, "dim_V_read_reg_645");
    sc_trace(mVcdFile, tmp_cast_fu_326_p1, "tmp_cast_fu_326_p1");
    sc_trace(mVcdFile, tmp_cast_reg_650, "tmp_cast_reg_650");
    sc_trace(mVcdFile, tmp_1_cast_fu_340_p1, "tmp_1_cast_fu_340_p1");
    sc_trace(mVcdFile, tmp_1_cast_reg_655, "tmp_1_cast_reg_655");
    sc_trace(mVcdFile, tmp_2_cast_fu_354_p1, "tmp_2_cast_fu_354_p1");
    sc_trace(mVcdFile, tmp_2_cast_reg_660, "tmp_2_cast_reg_660");
    sc_trace(mVcdFile, tmp_3_cast_fu_368_p1, "tmp_3_cast_fu_368_p1");
    sc_trace(mVcdFile, tmp_3_cast_reg_665, "tmp_3_cast_reg_665");
    sc_trace(mVcdFile, tmp_14_cast_fu_382_p1, "tmp_14_cast_fu_382_p1");
    sc_trace(mVcdFile, tmp_14_cast_reg_670, "tmp_14_cast_reg_670");
    sc_trace(mVcdFile, rhs_V_cast_fu_386_p1, "rhs_V_cast_fu_386_p1");
    sc_trace(mVcdFile, rhs_V_cast_reg_675, "rhs_V_cast_reg_675");
    sc_trace(mVcdFile, rhs_V_1_cast_fu_390_p1, "rhs_V_1_cast_fu_390_p1");
    sc_trace(mVcdFile, rhs_V_1_cast_reg_680, "rhs_V_1_cast_reg_680");
    sc_trace(mVcdFile, rhs_V_2_cast_fu_394_p1, "rhs_V_2_cast_fu_394_p1");
    sc_trace(mVcdFile, rhs_V_2_cast_reg_685, "rhs_V_2_cast_reg_685");
    sc_trace(mVcdFile, next_mul1_fu_398_p2, "next_mul1_fu_398_p2");
    sc_trace(mVcdFile, next_mul1_reg_690, "next_mul1_reg_690");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, h_fu_408_p2, "h_fu_408_p2");
    sc_trace(mVcdFile, h_reg_698, "h_reg_698");
    sc_trace(mVcdFile, w_fu_423_p2, "w_fu_423_p2");
    sc_trace(mVcdFile, w_reg_706, "w_reg_706");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp1_cast_fu_435_p1, "tmp1_cast_fu_435_p1");
    sc_trace(mVcdFile, tmp1_cast_reg_711, "tmp1_cast_reg_711");
    sc_trace(mVcdFile, exitcond2_fu_418_p2, "exitcond2_fu_418_p2");
    sc_trace(mVcdFile, next_mul_fu_439_p2, "next_mul_fu_439_p2");
    sc_trace(mVcdFile, next_mul_reg_716, "next_mul_reg_716");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, c_fu_449_p2, "c_fu_449_p2");
    sc_trace(mVcdFile, c_reg_724, "c_reg_724");
    sc_trace(mVcdFile, tmp_7_cast_cast_fu_459_p1, "tmp_7_cast_cast_fu_459_p1");
    sc_trace(mVcdFile, tmp_7_cast_cast_reg_729, "tmp_7_cast_cast_reg_729");
    sc_trace(mVcdFile, exitcond1_fu_444_p2, "exitcond1_fu_444_p2");
    sc_trace(mVcdFile, gmem_addr_reg_734, "gmem_addr_reg_734");
    sc_trace(mVcdFile, gmem_addr_1_reg_740, "gmem_addr_1_reg_740");
    sc_trace(mVcdFile, r_V_2_fu_504_p1, "r_V_2_fu_504_p1");
    sc_trace(mVcdFile, r_V_2_reg_746, "r_V_2_reg_746");
    sc_trace(mVcdFile, c_color_1_fu_514_p2, "c_color_1_fu_514_p2");
    sc_trace(mVcdFile, c_color_1_reg_754, "c_color_1_reg_754");
    sc_trace(mVcdFile, ap_block_state13, "ap_block_state13");
    sc_trace(mVcdFile, gmem_addr_1_read_reg_759, "gmem_addr_1_read_reg_759");
    sc_trace(mVcdFile, gmem_addr_2_reg_764, "gmem_addr_2_reg_764");
    sc_trace(mVcdFile, gmem_addr_3_reg_770, "gmem_addr_3_reg_770");
    sc_trace(mVcdFile, gmem_addr_4_reg_776, "gmem_addr_4_reg_776");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, gmem_addr_2_read_reg_787, "gmem_addr_2_read_reg_787");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_AWREADY, "ap_sig_ioackin_gmem_AWREADY");
    sc_trace(mVcdFile, p_Val2_s_reg_792, "p_Val2_s_reg_792");
    sc_trace(mVcdFile, tmp_s_reg_797, "tmp_s_reg_797");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, i_op_assign_reg_236, "i_op_assign_reg_236");
    sc_trace(mVcdFile, ret_V_2_reg_247, "ret_V_2_reg_247");
    sc_trace(mVcdFile, i_op_assign_1_reg_259, "i_op_assign_1_reg_259");
    sc_trace(mVcdFile, exitcond3_fu_403_p2, "exitcond3_fu_403_p2");
    sc_trace(mVcdFile, i_op_assign_2_reg_270, "i_op_assign_2_reg_270");
    sc_trace(mVcdFile, ret_V_reg_282, "ret_V_reg_282");
    sc_trace(mVcdFile, p_Val2_2_reg_293, "p_Val2_2_reg_293");
    sc_trace(mVcdFile, c_color_reg_305, "c_color_reg_305");
    sc_trace(mVcdFile, input_data_V2_sum_ca_fu_475_p1, "input_data_V2_sum_ca_fu_475_p1");
    sc_trace(mVcdFile, color_V8_sum_cast_fu_494_p1, "color_V8_sum_cast_fu_494_p1");
    sc_trace(mVcdFile, alpha_V4_sum_cast_fu_529_p1, "alpha_V4_sum_cast_fu_529_p1");
    sc_trace(mVcdFile, beta_V6_sum_cast_fu_544_p1, "beta_V6_sum_cast_fu_544_p1");
    sc_trace(mVcdFile, out_data_V10_sum_cas_fu_558_p1, "out_data_V10_sum_cas_fu_558_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_ARREADY, "ap_reg_ioackin_gmem_ARREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_ARREADY, "ap_sig_ioackin_gmem_ARREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_AWREADY, "ap_reg_ioackin_gmem_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_WREADY, "ap_reg_ioackin_gmem_WREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_WREADY, "ap_sig_ioackin_gmem_WREADY");
    sc_trace(mVcdFile, tmp_fu_316_p4, "tmp_fu_316_p4");
    sc_trace(mVcdFile, tmp_1_fu_330_p4, "tmp_1_fu_330_p4");
    sc_trace(mVcdFile, tmp_2_fu_344_p4, "tmp_2_fu_344_p4");
    sc_trace(mVcdFile, tmp_3_fu_358_p4, "tmp_3_fu_358_p4");
    sc_trace(mVcdFile, tmp_5_fu_372_p4, "tmp_5_fu_372_p4");
    sc_trace(mVcdFile, i_op_assign_1_cast5_fu_414_p1, "i_op_assign_1_cast5_fu_414_p1");
    sc_trace(mVcdFile, tmp1_fu_429_p2, "tmp1_fu_429_p2");
    sc_trace(mVcdFile, grp_fu_611_p3, "grp_fu_611_p3");
    sc_trace(mVcdFile, input_data_V2_sum_fu_470_p2, "input_data_V2_sum_fu_470_p2");
    sc_trace(mVcdFile, tmp_8_fu_462_p3, "tmp_8_fu_462_p3");
    sc_trace(mVcdFile, tmp_5_cast_fu_485_p1, "tmp_5_cast_fu_485_p1");
    sc_trace(mVcdFile, color_V8_sum_fu_489_p2, "color_V8_sum_fu_489_p2");
    sc_trace(mVcdFile, r_V_2_fu_504_p0, "r_V_2_fu_504_p0");
    sc_trace(mVcdFile, tmp_9_cast_fu_520_p1, "tmp_9_cast_fu_520_p1");
    sc_trace(mVcdFile, alpha_V4_sum_fu_524_p2, "alpha_V4_sum_fu_524_p2");
    sc_trace(mVcdFile, beta_V6_sum_fu_539_p2, "beta_V6_sum_fu_539_p2");
    sc_trace(mVcdFile, out_data_V10_sum_fu_554_p2, "out_data_V10_sum_fu_554_p2");
    sc_trace(mVcdFile, grp_fu_618_p3, "grp_fu_618_p3");
    sc_trace(mVcdFile, grp_fu_626_p3, "grp_fu_626_p3");
    sc_trace(mVcdFile, grp_fu_611_p0, "grp_fu_611_p0");
    sc_trace(mVcdFile, grp_fu_611_p1, "grp_fu_611_p1");
    sc_trace(mVcdFile, grp_fu_611_p2, "grp_fu_611_p2");
    sc_trace(mVcdFile, grp_fu_618_p1, "grp_fu_618_p1");
    sc_trace(mVcdFile, grp_fu_618_p2, "grp_fu_618_p2");
    sc_trace(mVcdFile, grp_fu_626_p2, "grp_fu_626_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, grp_fu_611_p00, "grp_fu_611_p00");
#endif

    }
    mHdltvinHandle.open("Aff_channel.hdltvin.dat");
    mHdltvoutHandle.open("Aff_channel.hdltvout.dat");
}

Aff_channel::~Aff_channel() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete Aff_channel_AXILiteS_s_axi_U;
    delete Aff_channel_gmem_m_axi_U;
    delete Aff_channel_mac_mbkb_U1;
    delete Aff_channel_mac_mcud_U2;
    delete Aff_channel_mac_mcud_U3;
}

void Aff_channel::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void Aff_channel::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_logic_0;
}

void Aff_channel::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void Aff_channel::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv32_1;
}

void Aff_channel::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv3_0;
}

void Aff_channel::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv2_0;
}

void Aff_channel::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv4_0;
}

void Aff_channel::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv2_3;
}

void Aff_channel::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1)))) {
            ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, gmem_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, gmem_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, gmem_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, gmem_ARREADY.read())))) {
            ap_reg_ioackin_gmem_ARREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
            if (!(esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_AWREADY.read()))) {
                ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1) && 
                        esl_seteq<1,1,1>(ap_const_logic_1, gmem_AWREADY.read()))) {
                ap_reg_ioackin_gmem_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_WREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_gmem_WREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_gmem_WREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, gmem_WREADY.read())) {
                ap_reg_ioackin_gmem_WREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1))) {
        c_color_reg_305 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        c_color_reg_305 = c_color_1_reg_754.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_403_p2.read()))) {
        i_op_assign_1_reg_259 = ap_const_lv16_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(exitcond1_fu_444_p2.read(), ap_const_lv1_1))) {
        i_op_assign_1_reg_259 = w_reg_706.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_418_p2.read()))) {
        i_op_assign_2_reg_270 = ap_const_lv8_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
                esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
        i_op_assign_2_reg_270 = c_reg_724.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_418_p2.read(), ap_const_lv1_1))) {
        i_op_assign_reg_236 = h_reg_698.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_op_assign_reg_236 = ap_const_lv16_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1))) {
        p_Val2_2_reg_293 = ap_const_lv16_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        p_Val2_2_reg_293 = grp_fu_618_p3.read().range(23, 8);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_418_p2.read(), ap_const_lv1_1))) {
        ret_V_2_reg_247 = next_mul1_reg_690.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ret_V_2_reg_247 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_418_p2.read()))) {
        ret_V_reg_282 = ap_const_lv24_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
                esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
        ret_V_reg_282 = next_mul_reg_716.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && !(esl_seteq<1,1,1>(exitcond_fu_508_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read())))) {
        c_color_1_reg_754 = c_color_1_fu_514_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        c_reg_724 = c_fu_449_p2.read();
        next_mul_reg_716 = next_mul_fu_439_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        dim_V_read_reg_645 = dim_V.read();
        input_height_V_read_reg_635 = input_height_V.read();
        input_width_V_read_reg_640 = input_width_V.read();
        rhs_V_1_cast_reg_680 = rhs_V_1_cast_fu_390_p1.read();
        rhs_V_2_cast_reg_685 = rhs_V_2_cast_fu_394_p1.read();
        rhs_V_cast_reg_675 = rhs_V_cast_fu_386_p1.read();
        tmp_14_cast_reg_670 = tmp_14_cast_fu_382_p1.read();
        tmp_1_cast_reg_655 = tmp_1_cast_fu_340_p1.read();
        tmp_2_cast_reg_660 = tmp_2_cast_fu_354_p1.read();
        tmp_3_cast_reg_665 = tmp_3_cast_fu_368_p1.read();
        tmp_cast_reg_650 = tmp_cast_fu_326_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(exitcond_fu_508_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(exitcond_fu_508_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read())))) {
        gmem_addr_1_read_reg_759 = gmem_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_444_p2.read()))) {
        gmem_addr_1_reg_740 =  (sc_lv<32>) (color_V8_sum_cast_fu_494_p1.read());
        gmem_addr_reg_734 =  (sc_lv<32>) (input_data_V2_sum_ca_fu_475_p1.read());
        tmp_7_cast_cast_reg_729 = tmp_7_cast_cast_fu_459_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_AWREADY.read())))) {
        gmem_addr_2_read_reg_787 = gmem_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && !(esl_seteq<1,1,1>(exitcond_fu_508_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read())) && esl_seteq<1,1,1>(exitcond_fu_508_p2.read(), ap_const_lv1_1))) {
        gmem_addr_2_reg_764 =  (sc_lv<32>) (alpha_V4_sum_cast_fu_529_p1.read());
        gmem_addr_3_reg_770 =  (sc_lv<32>) (beta_V6_sum_cast_fu_544_p1.read());
        gmem_addr_4_reg_776 =  (sc_lv<32>) (out_data_V10_sum_cas_fu_558_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        h_reg_698 = h_fu_408_p2.read();
        next_mul1_reg_690 = next_mul1_fu_398_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1))) {
        p_Val2_s_reg_792 = gmem_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1))) {
        r_V_2_reg_746 = r_V_2_fu_504_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_418_p2.read()))) {
        tmp1_cast_reg_711 = tmp1_cast_fu_435_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        tmp_s_reg_797 = grp_fu_626_p3.read().range(23, 8);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        w_reg_706 = w_fu_423_p2.read();
    }
}

void Aff_channel::thread_alpha_V4_sum_cast_fu_529_p1() {
    alpha_V4_sum_cast_fu_529_p1 = esl_zext<64,32>(alpha_V4_sum_fu_524_p2.read());
}

void Aff_channel::thread_alpha_V4_sum_fu_524_p2() {
    alpha_V4_sum_fu_524_p2 = (!tmp_9_cast_fu_520_p1.read().is_01() || !tmp_3_cast_reg_665.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_9_cast_fu_520_p1.read()) + sc_biguint<32>(tmp_3_cast_reg_665.read()));
}

void Aff_channel::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Aff_channel::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void Aff_channel::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void Aff_channel::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void Aff_channel::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void Aff_channel::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void Aff_channel::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Aff_channel::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void Aff_channel::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void Aff_channel::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void Aff_channel::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void Aff_channel::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Aff_channel::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void Aff_channel::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Aff_channel::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Aff_channel::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void Aff_channel::thread_ap_block_state13() {
    ap_block_state13 = (esl_seteq<1,1,1>(exitcond_fu_508_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void Aff_channel::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond3_fu_403_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Aff_channel::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Aff_channel::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond3_fu_403_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Aff_channel::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void Aff_channel::thread_ap_sig_ioackin_gmem_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) {
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY.read();
    } else {
        ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1;
    }
}

void Aff_channel::thread_ap_sig_ioackin_gmem_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_AWREADY.read())) {
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY.read();
    } else {
        ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1;
    }
}

void Aff_channel::thread_ap_sig_ioackin_gmem_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_WREADY.read())) {
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY.read();
    } else {
        ap_sig_ioackin_gmem_WREADY = ap_const_logic_1;
    }
}

void Aff_channel::thread_beta_V6_sum_cast_fu_544_p1() {
    beta_V6_sum_cast_fu_544_p1 = esl_zext<64,32>(beta_V6_sum_fu_539_p2.read());
}

void Aff_channel::thread_beta_V6_sum_fu_539_p2() {
    beta_V6_sum_fu_539_p2 = (!tmp_9_cast_fu_520_p1.read().is_01() || !tmp_2_cast_reg_660.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_9_cast_fu_520_p1.read()) + sc_biguint<32>(tmp_2_cast_reg_660.read()));
}

void Aff_channel::thread_c_color_1_fu_514_p2() {
    c_color_1_fu_514_p2 = (!c_color_reg_305.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(c_color_reg_305.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void Aff_channel::thread_c_fu_449_p2() {
    c_fu_449_p2 = (!i_op_assign_2_reg_270.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(i_op_assign_2_reg_270.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void Aff_channel::thread_color_V8_sum_cast_fu_494_p1() {
    color_V8_sum_cast_fu_494_p1 = esl_zext<64,32>(color_V8_sum_fu_489_p2.read());
}

void Aff_channel::thread_color_V8_sum_fu_489_p2() {
    color_V8_sum_fu_489_p2 = (!tmp_5_cast_fu_485_p1.read().is_01() || !tmp_1_cast_reg_655.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_5_cast_fu_485_p1.read()) + sc_biguint<32>(tmp_1_cast_reg_655.read()));
}

void Aff_channel::thread_exitcond1_fu_444_p2() {
    exitcond1_fu_444_p2 = (!i_op_assign_2_reg_270.read().is_01() || !dim_V_read_reg_645.read().is_01())? sc_lv<1>(): sc_lv<1>(i_op_assign_2_reg_270.read() == dim_V_read_reg_645.read());
}

void Aff_channel::thread_exitcond2_fu_418_p2() {
    exitcond2_fu_418_p2 = (!i_op_assign_1_reg_259.read().is_01() || !input_width_V_read_reg_640.read().is_01())? sc_lv<1>(): sc_lv<1>(i_op_assign_1_reg_259.read() == input_width_V_read_reg_640.read());
}

void Aff_channel::thread_exitcond3_fu_403_p2() {
    exitcond3_fu_403_p2 = (!i_op_assign_reg_236.read().is_01() || !input_height_V_read_reg_635.read().is_01())? sc_lv<1>(): sc_lv<1>(i_op_assign_reg_236.read() == input_height_V_read_reg_635.read());
}

void Aff_channel::thread_exitcond_fu_508_p2() {
    exitcond_fu_508_p2 = (!c_color_reg_305.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(c_color_reg_305.read() == ap_const_lv5_10);
}

void Aff_channel::thread_gmem_ARADDR() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
            gmem_ARADDR = gmem_addr_3_reg_770.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
            gmem_ARADDR = gmem_addr_2_reg_764.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
            gmem_ARADDR = gmem_addr_1_reg_740.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            gmem_ARADDR = gmem_addr_reg_734.read();
        } else {
            gmem_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        gmem_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void Aff_channel::thread_gmem_ARLEN() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read()))) {
        gmem_ARLEN = ap_const_lv32_10;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())))) {
        gmem_ARLEN = ap_const_lv32_1;
    } else {
        gmem_ARLEN = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void Aff_channel::thread_gmem_ARVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())))) {
        gmem_ARVALID = ap_const_logic_1;
    } else {
        gmem_ARVALID = ap_const_logic_0;
    }
}

void Aff_channel::thread_gmem_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && 
         esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_AWREADY.read()))) {
        gmem_AWVALID = ap_const_logic_1;
    } else {
        gmem_AWVALID = ap_const_logic_0;
    }
}

void Aff_channel::thread_gmem_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
         esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
        gmem_BREADY = ap_const_logic_1;
    } else {
        gmem_BREADY = ap_const_logic_0;
    }
}

void Aff_channel::thread_gmem_RREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
          esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
          esl_seteq<1,1,1>(exitcond_fu_508_p2.read(), ap_const_lv1_0) && 
          !(esl_seteq<1,1,1>(exitcond_fu_508_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_AWREADY.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
          esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1)))) {
        gmem_RREADY = ap_const_logic_1;
    } else {
        gmem_RREADY = ap_const_logic_0;
    }
}

void Aff_channel::thread_gmem_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_WREADY.read()))) {
        gmem_WVALID = ap_const_logic_1;
    } else {
        gmem_WVALID = ap_const_logic_0;
    }
}

void Aff_channel::thread_gmem_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        gmem_blk_n_AR = m_axi_gmem_ARREADY.read();
    } else {
        gmem_blk_n_AR = ap_const_logic_1;
    }
}

void Aff_channel::thread_gmem_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        gmem_blk_n_AW = m_axi_gmem_AWREADY.read();
    } else {
        gmem_blk_n_AW = ap_const_logic_1;
    }
}

void Aff_channel::thread_gmem_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        gmem_blk_n_B = m_axi_gmem_BVALID.read();
    } else {
        gmem_blk_n_B = ap_const_logic_1;
    }
}

void Aff_channel::thread_gmem_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
          esl_seteq<1,1,1>(exitcond_fu_508_p2.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        gmem_blk_n_R = m_axi_gmem_RVALID.read();
    } else {
        gmem_blk_n_R = ap_const_logic_1;
    }
}

void Aff_channel::thread_gmem_blk_n_W() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        gmem_blk_n_W = m_axi_gmem_WREADY.read();
    } else {
        gmem_blk_n_W = ap_const_logic_1;
    }
}

void Aff_channel::thread_grp_fu_611_p0() {
    grp_fu_611_p0 =  (sc_lv<24>) (grp_fu_611_p00.read());
}

void Aff_channel::thread_grp_fu_611_p00() {
    grp_fu_611_p00 = esl_zext<40,24>(ret_V_reg_282.read());
}

void Aff_channel::thread_grp_fu_611_p1() {
    grp_fu_611_p1 =  (sc_lv<16>) (rhs_V_1_cast_reg_680.read());
}

void Aff_channel::thread_grp_fu_611_p2() {
    grp_fu_611_p2 =  (sc_lv<32>) (tmp1_cast_reg_711.read());
}

void Aff_channel::thread_grp_fu_618_p1() {
    grp_fu_618_p1 =  (sc_lv<16>) (r_V_2_reg_746.read());
}

void Aff_channel::thread_grp_fu_618_p2() {
    grp_fu_618_p2 = esl_concat<16,8>(p_Val2_2_reg_293.read(), ap_const_lv8_0);
}

void Aff_channel::thread_grp_fu_626_p2() {
    grp_fu_626_p2 = esl_concat<16,8>(p_Val2_s_reg_792.read(), ap_const_lv8_0);
}

void Aff_channel::thread_h_fu_408_p2() {
    h_fu_408_p2 = (!i_op_assign_reg_236.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(i_op_assign_reg_236.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void Aff_channel::thread_i_op_assign_1_cast5_fu_414_p1() {
    i_op_assign_1_cast5_fu_414_p1 = esl_zext<32,16>(i_op_assign_1_reg_259.read());
}

void Aff_channel::thread_input_data_V2_sum_ca_fu_475_p1() {
    input_data_V2_sum_ca_fu_475_p1 = esl_zext<64,41>(input_data_V2_sum_fu_470_p2.read());
}

void Aff_channel::thread_input_data_V2_sum_fu_470_p2() {
    input_data_V2_sum_fu_470_p2 = (!tmp_7_cast_cast_fu_459_p1.read().is_01() || !tmp_14_cast_reg_670.read().is_01())? sc_lv<41>(): (sc_biguint<41>(tmp_7_cast_cast_fu_459_p1.read()) + sc_biguint<41>(tmp_14_cast_reg_670.read()));
}

void Aff_channel::thread_next_mul1_fu_398_p2() {
    next_mul1_fu_398_p2 = (!ret_V_2_reg_247.read().is_01() || !rhs_V_2_cast_reg_685.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ret_V_2_reg_247.read()) + sc_biguint<32>(rhs_V_2_cast_reg_685.read()));
}

void Aff_channel::thread_next_mul_fu_439_p2() {
    next_mul_fu_439_p2 = (!ret_V_reg_282.read().is_01() || !rhs_V_cast_reg_675.read().is_01())? sc_lv<24>(): (sc_biguint<24>(ret_V_reg_282.read()) + sc_biguint<24>(rhs_V_cast_reg_675.read()));
}

void Aff_channel::thread_out_data_V10_sum_cas_fu_558_p1() {
    out_data_V10_sum_cas_fu_558_p1 = esl_zext<64,41>(out_data_V10_sum_fu_554_p2.read());
}

void Aff_channel::thread_out_data_V10_sum_fu_554_p2() {
    out_data_V10_sum_fu_554_p2 = (!tmp_7_cast_cast_reg_729.read().is_01() || !tmp_cast_reg_650.read().is_01())? sc_lv<41>(): (sc_biguint<41>(tmp_7_cast_cast_reg_729.read()) + sc_biguint<41>(tmp_cast_reg_650.read()));
}

void Aff_channel::thread_r_V_2_fu_504_p0() {
    r_V_2_fu_504_p0 = gmem_RDATA.read();
}

void Aff_channel::thread_r_V_2_fu_504_p1() {
    r_V_2_fu_504_p1 = esl_sext<24,16>(r_V_2_fu_504_p0.read());
}

void Aff_channel::thread_rhs_V_1_cast_fu_390_p1() {
    rhs_V_1_cast_fu_390_p1 = esl_zext<40,16>(input_width_V.read());
}

void Aff_channel::thread_rhs_V_2_cast_fu_394_p1() {
    rhs_V_2_cast_fu_394_p1 = esl_zext<32,16>(input_width_V.read());
}

void Aff_channel::thread_rhs_V_cast_fu_386_p1() {
    rhs_V_cast_fu_386_p1 = esl_zext<24,16>(input_height_V.read());
}

void Aff_channel::thread_tmp1_cast_fu_435_p1() {
    tmp1_cast_fu_435_p1 = esl_zext<40,32>(tmp1_fu_429_p2.read());
}

void Aff_channel::thread_tmp1_fu_429_p2() {
    tmp1_fu_429_p2 = (!ret_V_2_reg_247.read().is_01() || !i_op_assign_1_cast5_fu_414_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ret_V_2_reg_247.read()) + sc_biguint<32>(i_op_assign_1_cast5_fu_414_p1.read()));
}

void Aff_channel::thread_tmp_14_cast_fu_382_p1() {
    tmp_14_cast_fu_382_p1 = esl_zext<41,31>(tmp_5_fu_372_p4.read());
}

void Aff_channel::thread_tmp_1_cast_fu_340_p1() {
    tmp_1_cast_fu_340_p1 = esl_zext<32,31>(tmp_1_fu_330_p4.read());
}

void Aff_channel::thread_tmp_1_fu_330_p4() {
    tmp_1_fu_330_p4 = color_V.read().range(31, 1);
}

void Aff_channel::thread_tmp_2_cast_fu_354_p1() {
    tmp_2_cast_fu_354_p1 = esl_zext<32,31>(tmp_2_fu_344_p4.read());
}

void Aff_channel::thread_tmp_2_fu_344_p4() {
    tmp_2_fu_344_p4 = beta_V.read().range(31, 1);
}

void Aff_channel::thread_tmp_3_cast_fu_368_p1() {
    tmp_3_cast_fu_368_p1 = esl_zext<32,31>(tmp_3_fu_358_p4.read());
}

void Aff_channel::thread_tmp_3_fu_358_p4() {
    tmp_3_fu_358_p4 = alpha_V.read().range(31, 1);
}

void Aff_channel::thread_tmp_5_cast_fu_485_p1() {
    tmp_5_cast_fu_485_p1 = esl_zext<32,12>(tmp_8_fu_462_p3.read());
}

void Aff_channel::thread_tmp_5_fu_372_p4() {
    tmp_5_fu_372_p4 = input_data_V.read().range(31, 1);
}

void Aff_channel::thread_tmp_7_cast_cast_fu_459_p1() {
    tmp_7_cast_cast_fu_459_p1 = esl_zext<41,40>(grp_fu_611_p3.read());
}

void Aff_channel::thread_tmp_8_fu_462_p3() {
    tmp_8_fu_462_p3 = esl_concat<8,4>(i_op_assign_2_reg_270.read(), ap_const_lv4_0);
}

void Aff_channel::thread_tmp_9_cast_fu_520_p1() {
    tmp_9_cast_fu_520_p1 = esl_zext<32,8>(i_op_assign_2_reg_270.read());
}

void Aff_channel::thread_tmp_cast_fu_326_p1() {
    tmp_cast_fu_326_p1 = esl_zext<41,31>(tmp_fu_316_p4.read());
}

void Aff_channel::thread_tmp_fu_316_p4() {
    tmp_fu_316_p4 = out_data_V.read().range(31, 1);
}

void Aff_channel::thread_w_fu_423_p2() {
    w_fu_423_p2 = (!i_op_assign_1_reg_259.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(i_op_assign_1_reg_259.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void Aff_channel::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond3_fu_403_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond2_fu_418_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(exitcond1_fu_444_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && !(esl_seteq<1,1,1>(exitcond_fu_508_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read())) && esl_seteq<1,1,1>(exitcond_fu_508_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(exitcond_fu_508_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(exitcond_fu_508_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read())))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 32768 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state17;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_AWREADY.read())))) {
                ap_NS_fsm = ap_ST_fsm_state23;
            } else {
                ap_NS_fsm = ap_ST_fsm_state22;
            }
            break;
        case 4194304 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state24;
            } else {
                ap_NS_fsm = ap_ST_fsm_state23;
            }
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_WREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state26;
            } else {
                ap_NS_fsm = ap_ST_fsm_state25;
            }
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state30;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<30>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void Aff_channel::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_gmem_AWVALID\" :  \"" << m_axi_gmem_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_AWREADY\" :  \"" << m_axi_gmem_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWADDR\" :  \"" << m_axi_gmem_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWID\" :  \"" << m_axi_gmem_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLEN\" :  \"" << m_axi_gmem_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWSIZE\" :  \"" << m_axi_gmem_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWBURST\" :  \"" << m_axi_gmem_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLOCK\" :  \"" << m_axi_gmem_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWCACHE\" :  \"" << m_axi_gmem_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWPROT\" :  \"" << m_axi_gmem_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWQOS\" :  \"" << m_axi_gmem_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWREGION\" :  \"" << m_axi_gmem_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWUSER\" :  \"" << m_axi_gmem_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WVALID\" :  \"" << m_axi_gmem_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_WREADY\" :  \"" << m_axi_gmem_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WDATA\" :  \"" << m_axi_gmem_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WSTRB\" :  \"" << m_axi_gmem_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WLAST\" :  \"" << m_axi_gmem_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WID\" :  \"" << m_axi_gmem_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WUSER\" :  \"" << m_axi_gmem_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARVALID\" :  \"" << m_axi_gmem_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_ARREADY\" :  \"" << m_axi_gmem_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARADDR\" :  \"" << m_axi_gmem_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARID\" :  \"" << m_axi_gmem_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLEN\" :  \"" << m_axi_gmem_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARSIZE\" :  \"" << m_axi_gmem_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARBURST\" :  \"" << m_axi_gmem_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLOCK\" :  \"" << m_axi_gmem_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARCACHE\" :  \"" << m_axi_gmem_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARPROT\" :  \"" << m_axi_gmem_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARQOS\" :  \"" << m_axi_gmem_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARREGION\" :  \"" << m_axi_gmem_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARUSER\" :  \"" << m_axi_gmem_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RVALID\" :  \"" << m_axi_gmem_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_RREADY\" :  \"" << m_axi_gmem_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RDATA\" :  \"" << m_axi_gmem_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RLAST\" :  \"" << m_axi_gmem_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RID\" :  \"" << m_axi_gmem_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RUSER\" :  \"" << m_axi_gmem_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RRESP\" :  \"" << m_axi_gmem_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BVALID\" :  \"" << m_axi_gmem_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_BREADY\" :  \"" << m_axi_gmem_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BRESP\" :  \"" << m_axi_gmem_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BID\" :  \"" << m_axi_gmem_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BUSER\" :  \"" << m_axi_gmem_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

