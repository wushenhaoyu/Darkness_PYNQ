// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Aff_channel_HH_
#define _Aff_channel_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Aff_channel_mac_mbkb.h"
#include "Aff_channel_mac_mcud.h"
#include "Aff_channel_AXILiteS_s_axi.h"
#include "Aff_channel_gmem_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_GMEM_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_GMEM_ID_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_DATA_WIDTH = 32,
         unsigned int C_M_AXI_GMEM_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 7,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct Aff_channel : public sc_module {
    // Port declarations 65
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > m_axi_gmem_AWVALID;
    sc_in< sc_logic > m_axi_gmem_AWREADY;
    sc_out< sc_uint<C_M_AXI_GMEM_ADDR_WIDTH> > m_axi_gmem_AWADDR;
    sc_out< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_AWID;
    sc_out< sc_lv<8> > m_axi_gmem_AWLEN;
    sc_out< sc_lv<3> > m_axi_gmem_AWSIZE;
    sc_out< sc_lv<2> > m_axi_gmem_AWBURST;
    sc_out< sc_lv<2> > m_axi_gmem_AWLOCK;
    sc_out< sc_lv<4> > m_axi_gmem_AWCACHE;
    sc_out< sc_lv<3> > m_axi_gmem_AWPROT;
    sc_out< sc_lv<4> > m_axi_gmem_AWQOS;
    sc_out< sc_lv<4> > m_axi_gmem_AWREGION;
    sc_out< sc_uint<C_M_AXI_GMEM_AWUSER_WIDTH> > m_axi_gmem_AWUSER;
    sc_out< sc_logic > m_axi_gmem_WVALID;
    sc_in< sc_logic > m_axi_gmem_WREADY;
    sc_out< sc_uint<C_M_AXI_GMEM_DATA_WIDTH> > m_axi_gmem_WDATA;
    sc_out< sc_uint<C_M_AXI_GMEM_DATA_WIDTH/8> > m_axi_gmem_WSTRB;
    sc_out< sc_logic > m_axi_gmem_WLAST;
    sc_out< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_WID;
    sc_out< sc_uint<C_M_AXI_GMEM_WUSER_WIDTH> > m_axi_gmem_WUSER;
    sc_out< sc_logic > m_axi_gmem_ARVALID;
    sc_in< sc_logic > m_axi_gmem_ARREADY;
    sc_out< sc_uint<C_M_AXI_GMEM_ADDR_WIDTH> > m_axi_gmem_ARADDR;
    sc_out< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_ARID;
    sc_out< sc_lv<8> > m_axi_gmem_ARLEN;
    sc_out< sc_lv<3> > m_axi_gmem_ARSIZE;
    sc_out< sc_lv<2> > m_axi_gmem_ARBURST;
    sc_out< sc_lv<2> > m_axi_gmem_ARLOCK;
    sc_out< sc_lv<4> > m_axi_gmem_ARCACHE;
    sc_out< sc_lv<3> > m_axi_gmem_ARPROT;
    sc_out< sc_lv<4> > m_axi_gmem_ARQOS;
    sc_out< sc_lv<4> > m_axi_gmem_ARREGION;
    sc_out< sc_uint<C_M_AXI_GMEM_ARUSER_WIDTH> > m_axi_gmem_ARUSER;
    sc_in< sc_logic > m_axi_gmem_RVALID;
    sc_out< sc_logic > m_axi_gmem_RREADY;
    sc_in< sc_uint<C_M_AXI_GMEM_DATA_WIDTH> > m_axi_gmem_RDATA;
    sc_in< sc_logic > m_axi_gmem_RLAST;
    sc_in< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_RID;
    sc_in< sc_uint<C_M_AXI_GMEM_RUSER_WIDTH> > m_axi_gmem_RUSER;
    sc_in< sc_lv<2> > m_axi_gmem_RRESP;
    sc_in< sc_logic > m_axi_gmem_BVALID;
    sc_out< sc_logic > m_axi_gmem_BREADY;
    sc_in< sc_lv<2> > m_axi_gmem_BRESP;
    sc_in< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_BID;
    sc_in< sc_uint<C_M_AXI_GMEM_BUSER_WIDTH> > m_axi_gmem_BUSER;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const6;
    sc_signal< sc_lv<1> > ap_var_for_const1;
    sc_signal< sc_lv<32> > ap_var_for_const5;
    sc_signal< sc_lv<3> > ap_var_for_const2;
    sc_signal< sc_lv<2> > ap_var_for_const3;
    sc_signal< sc_lv<4> > ap_var_for_const4;
    sc_signal< sc_lv<2> > ap_var_for_const7;


    // Module declarations
    Aff_channel(sc_module_name name);
    SC_HAS_PROCESS(Aff_channel);

    ~Aff_channel();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    Aff_channel_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* Aff_channel_AXILiteS_s_axi_U;
    Aff_channel_gmem_m_axi<0,16,32,5,16,16,16,16,C_M_AXI_GMEM_ID_WIDTH,C_M_AXI_GMEM_ADDR_WIDTH,C_M_AXI_GMEM_DATA_WIDTH,C_M_AXI_GMEM_AWUSER_WIDTH,C_M_AXI_GMEM_ARUSER_WIDTH,C_M_AXI_GMEM_WUSER_WIDTH,C_M_AXI_GMEM_RUSER_WIDTH,C_M_AXI_GMEM_BUSER_WIDTH,C_M_AXI_GMEM_USER_VALUE,C_M_AXI_GMEM_PROT_VALUE,C_M_AXI_GMEM_CACHE_VALUE>* Aff_channel_gmem_m_axi_U;
    Aff_channel_mac_mbkb<1,1,24,16,32,40>* Aff_channel_mac_mbkb_U1;
    Aff_channel_mac_mcud<1,1,16,16,24,24>* Aff_channel_mac_mcud_U2;
    Aff_channel_mac_mcud<1,1,16,16,24,24>* Aff_channel_mac_mcud_U3;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<30> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<8> > dim_V;
    sc_signal< sc_lv<16> > input_width_V;
    sc_signal< sc_lv<16> > input_height_V;
    sc_signal< sc_lv<32> > input_data_V;
    sc_signal< sc_lv<32> > alpha_V;
    sc_signal< sc_lv<32> > beta_V;
    sc_signal< sc_lv<32> > color_V;
    sc_signal< sc_lv<32> > out_data_V;
    sc_signal< sc_logic > gmem_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > gmem_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_lv<1> > exitcond_fu_508_p2;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_logic > ap_CS_fsm_state22;
    sc_signal< sc_logic > ap_CS_fsm_state16;
    sc_signal< sc_logic > ap_CS_fsm_state23;
    sc_signal< sc_logic > gmem_blk_n_AW;
    sc_signal< sc_logic > gmem_blk_n_W;
    sc_signal< sc_logic > ap_CS_fsm_state25;
    sc_signal< sc_logic > gmem_blk_n_B;
    sc_signal< sc_logic > ap_CS_fsm_state30;
    sc_signal< sc_logic > gmem_AWVALID;
    sc_signal< sc_logic > gmem_AWREADY;
    sc_signal< sc_logic > gmem_WVALID;
    sc_signal< sc_logic > gmem_WREADY;
    sc_signal< sc_logic > gmem_ARVALID;
    sc_signal< sc_logic > gmem_ARREADY;
    sc_signal< sc_lv<32> > gmem_ARADDR;
    sc_signal< sc_lv<32> > gmem_ARLEN;
    sc_signal< sc_logic > gmem_RVALID;
    sc_signal< sc_logic > gmem_RREADY;
    sc_signal< sc_lv<16> > gmem_RDATA;
    sc_signal< sc_logic > gmem_RLAST;
    sc_signal< sc_lv<1> > gmem_RID;
    sc_signal< sc_lv<1> > gmem_RUSER;
    sc_signal< sc_lv<2> > gmem_RRESP;
    sc_signal< sc_logic > gmem_BVALID;
    sc_signal< sc_logic > gmem_BREADY;
    sc_signal< sc_lv<2> > gmem_BRESP;
    sc_signal< sc_lv<1> > gmem_BID;
    sc_signal< sc_lv<1> > gmem_BUSER;
    sc_signal< sc_lv<16> > input_height_V_read_reg_635;
    sc_signal< sc_lv<16> > input_width_V_read_reg_640;
    sc_signal< sc_lv<8> > dim_V_read_reg_645;
    sc_signal< sc_lv<41> > tmp_cast_fu_326_p1;
    sc_signal< sc_lv<41> > tmp_cast_reg_650;
    sc_signal< sc_lv<32> > tmp_1_cast_fu_340_p1;
    sc_signal< sc_lv<32> > tmp_1_cast_reg_655;
    sc_signal< sc_lv<32> > tmp_2_cast_fu_354_p1;
    sc_signal< sc_lv<32> > tmp_2_cast_reg_660;
    sc_signal< sc_lv<32> > tmp_3_cast_fu_368_p1;
    sc_signal< sc_lv<32> > tmp_3_cast_reg_665;
    sc_signal< sc_lv<41> > tmp_14_cast_fu_382_p1;
    sc_signal< sc_lv<41> > tmp_14_cast_reg_670;
    sc_signal< sc_lv<24> > rhs_V_cast_fu_386_p1;
    sc_signal< sc_lv<24> > rhs_V_cast_reg_675;
    sc_signal< sc_lv<40> > rhs_V_1_cast_fu_390_p1;
    sc_signal< sc_lv<40> > rhs_V_1_cast_reg_680;
    sc_signal< sc_lv<32> > rhs_V_2_cast_fu_394_p1;
    sc_signal< sc_lv<32> > rhs_V_2_cast_reg_685;
    sc_signal< sc_lv<32> > next_mul1_fu_398_p2;
    sc_signal< sc_lv<32> > next_mul1_reg_690;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<16> > h_fu_408_p2;
    sc_signal< sc_lv<16> > h_reg_698;
    sc_signal< sc_lv<16> > w_fu_423_p2;
    sc_signal< sc_lv<16> > w_reg_706;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<40> > tmp1_cast_fu_435_p1;
    sc_signal< sc_lv<40> > tmp1_cast_reg_711;
    sc_signal< sc_lv<1> > exitcond2_fu_418_p2;
    sc_signal< sc_lv<24> > next_mul_fu_439_p2;
    sc_signal< sc_lv<24> > next_mul_reg_716;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<8> > c_fu_449_p2;
    sc_signal< sc_lv<8> > c_reg_724;
    sc_signal< sc_lv<41> > tmp_7_cast_cast_fu_459_p1;
    sc_signal< sc_lv<41> > tmp_7_cast_cast_reg_729;
    sc_signal< sc_lv<1> > exitcond1_fu_444_p2;
    sc_signal< sc_lv<32> > gmem_addr_reg_734;
    sc_signal< sc_lv<32> > gmem_addr_1_reg_740;
    sc_signal< sc_lv<24> > r_V_2_fu_504_p1;
    sc_signal< sc_lv<24> > r_V_2_reg_746;
    sc_signal< sc_lv<5> > c_color_1_fu_514_p2;
    sc_signal< sc_lv<5> > c_color_1_reg_754;
    sc_signal< bool > ap_block_state13;
    sc_signal< sc_lv<16> > gmem_addr_1_read_reg_759;
    sc_signal< sc_lv<32> > gmem_addr_2_reg_764;
    sc_signal< sc_lv<32> > gmem_addr_3_reg_770;
    sc_signal< sc_lv<32> > gmem_addr_4_reg_776;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_lv<16> > gmem_addr_2_read_reg_787;
    sc_signal< sc_logic > ap_sig_ioackin_gmem_AWREADY;
    sc_signal< sc_lv<16> > p_Val2_s_reg_792;
    sc_signal< sc_lv<16> > tmp_s_reg_797;
    sc_signal< sc_logic > ap_CS_fsm_state24;
    sc_signal< sc_lv<16> > i_op_assign_reg_236;
    sc_signal< sc_lv<32> > ret_V_2_reg_247;
    sc_signal< sc_lv<16> > i_op_assign_1_reg_259;
    sc_signal< sc_lv<1> > exitcond3_fu_403_p2;
    sc_signal< sc_lv<8> > i_op_assign_2_reg_270;
    sc_signal< sc_lv<24> > ret_V_reg_282;
    sc_signal< sc_lv<16> > p_Val2_2_reg_293;
    sc_signal< sc_lv<5> > c_color_reg_305;
    sc_signal< sc_lv<64> > input_data_V2_sum_ca_fu_475_p1;
    sc_signal< sc_lv<64> > color_V8_sum_cast_fu_494_p1;
    sc_signal< sc_lv<64> > alpha_V4_sum_cast_fu_529_p1;
    sc_signal< sc_lv<64> > beta_V6_sum_cast_fu_544_p1;
    sc_signal< sc_lv<64> > out_data_V10_sum_cas_fu_558_p1;
    sc_signal< sc_logic > ap_reg_ioackin_gmem_ARREADY;
    sc_signal< sc_logic > ap_sig_ioackin_gmem_ARREADY;
    sc_signal< sc_logic > ap_reg_ioackin_gmem_AWREADY;
    sc_signal< sc_logic > ap_reg_ioackin_gmem_WREADY;
    sc_signal< sc_logic > ap_sig_ioackin_gmem_WREADY;
    sc_signal< sc_lv<31> > tmp_fu_316_p4;
    sc_signal< sc_lv<31> > tmp_1_fu_330_p4;
    sc_signal< sc_lv<31> > tmp_2_fu_344_p4;
    sc_signal< sc_lv<31> > tmp_3_fu_358_p4;
    sc_signal< sc_lv<31> > tmp_5_fu_372_p4;
    sc_signal< sc_lv<32> > i_op_assign_1_cast5_fu_414_p1;
    sc_signal< sc_lv<32> > tmp1_fu_429_p2;
    sc_signal< sc_lv<40> > grp_fu_611_p3;
    sc_signal< sc_lv<41> > input_data_V2_sum_fu_470_p2;
    sc_signal< sc_lv<12> > tmp_8_fu_462_p3;
    sc_signal< sc_lv<32> > tmp_5_cast_fu_485_p1;
    sc_signal< sc_lv<32> > color_V8_sum_fu_489_p2;
    sc_signal< sc_lv<16> > r_V_2_fu_504_p0;
    sc_signal< sc_lv<32> > tmp_9_cast_fu_520_p1;
    sc_signal< sc_lv<32> > alpha_V4_sum_fu_524_p2;
    sc_signal< sc_lv<32> > beta_V6_sum_fu_539_p2;
    sc_signal< sc_lv<41> > out_data_V10_sum_fu_554_p2;
    sc_signal< sc_lv<24> > grp_fu_618_p3;
    sc_signal< sc_lv<24> > grp_fu_626_p3;
    sc_signal< sc_lv<24> > grp_fu_611_p0;
    sc_signal< sc_lv<16> > grp_fu_611_p1;
    sc_signal< sc_lv<32> > grp_fu_611_p2;
    sc_signal< sc_lv<16> > grp_fu_618_p1;
    sc_signal< sc_lv<24> > grp_fu_618_p2;
    sc_signal< sc_lv<24> > grp_fu_626_p2;
    sc_signal< sc_lv<30> > ap_NS_fsm;
    sc_signal< sc_lv<40> > grp_fu_611_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<30> ap_ST_fsm_state1;
    static const sc_lv<30> ap_ST_fsm_state2;
    static const sc_lv<30> ap_ST_fsm_state3;
    static const sc_lv<30> ap_ST_fsm_state4;
    static const sc_lv<30> ap_ST_fsm_state5;
    static const sc_lv<30> ap_ST_fsm_state6;
    static const sc_lv<30> ap_ST_fsm_state7;
    static const sc_lv<30> ap_ST_fsm_state8;
    static const sc_lv<30> ap_ST_fsm_state9;
    static const sc_lv<30> ap_ST_fsm_state10;
    static const sc_lv<30> ap_ST_fsm_state11;
    static const sc_lv<30> ap_ST_fsm_state12;
    static const sc_lv<30> ap_ST_fsm_state13;
    static const sc_lv<30> ap_ST_fsm_state14;
    static const sc_lv<30> ap_ST_fsm_state15;
    static const sc_lv<30> ap_ST_fsm_state16;
    static const sc_lv<30> ap_ST_fsm_state17;
    static const sc_lv<30> ap_ST_fsm_state18;
    static const sc_lv<30> ap_ST_fsm_state19;
    static const sc_lv<30> ap_ST_fsm_state20;
    static const sc_lv<30> ap_ST_fsm_state21;
    static const sc_lv<30> ap_ST_fsm_state22;
    static const sc_lv<30> ap_ST_fsm_state23;
    static const sc_lv<30> ap_ST_fsm_state24;
    static const sc_lv<30> ap_ST_fsm_state25;
    static const sc_lv<30> ap_ST_fsm_state26;
    static const sc_lv<30> ap_ST_fsm_state27;
    static const sc_lv<30> ap_ST_fsm_state28;
    static const sc_lv<30> ap_ST_fsm_state29;
    static const sc_lv<30> ap_ST_fsm_state30;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_15;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_16;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_1D;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_GMEM_USER_VALUE;
    static const int C_M_AXI_GMEM_PROT_VALUE;
    static const int C_M_AXI_GMEM_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<24> ap_const_lv24_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<16> ap_const_lv16_1;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const7();
    void thread_ap_clk_no_reset_();
    void thread_alpha_V4_sum_cast_fu_529_p1();
    void thread_alpha_V4_sum_fu_524_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state16();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state22();
    void thread_ap_CS_fsm_state23();
    void thread_ap_CS_fsm_state24();
    void thread_ap_CS_fsm_state25();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state30();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_state13();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_ioackin_gmem_ARREADY();
    void thread_ap_sig_ioackin_gmem_AWREADY();
    void thread_ap_sig_ioackin_gmem_WREADY();
    void thread_beta_V6_sum_cast_fu_544_p1();
    void thread_beta_V6_sum_fu_539_p2();
    void thread_c_color_1_fu_514_p2();
    void thread_c_fu_449_p2();
    void thread_color_V8_sum_cast_fu_494_p1();
    void thread_color_V8_sum_fu_489_p2();
    void thread_exitcond1_fu_444_p2();
    void thread_exitcond2_fu_418_p2();
    void thread_exitcond3_fu_403_p2();
    void thread_exitcond_fu_508_p2();
    void thread_gmem_ARADDR();
    void thread_gmem_ARLEN();
    void thread_gmem_ARVALID();
    void thread_gmem_AWVALID();
    void thread_gmem_BREADY();
    void thread_gmem_RREADY();
    void thread_gmem_WVALID();
    void thread_gmem_blk_n_AR();
    void thread_gmem_blk_n_AW();
    void thread_gmem_blk_n_B();
    void thread_gmem_blk_n_R();
    void thread_gmem_blk_n_W();
    void thread_grp_fu_611_p0();
    void thread_grp_fu_611_p00();
    void thread_grp_fu_611_p1();
    void thread_grp_fu_611_p2();
    void thread_grp_fu_618_p1();
    void thread_grp_fu_618_p2();
    void thread_grp_fu_626_p2();
    void thread_h_fu_408_p2();
    void thread_i_op_assign_1_cast5_fu_414_p1();
    void thread_input_data_V2_sum_ca_fu_475_p1();
    void thread_input_data_V2_sum_fu_470_p2();
    void thread_next_mul1_fu_398_p2();
    void thread_next_mul_fu_439_p2();
    void thread_out_data_V10_sum_cas_fu_558_p1();
    void thread_out_data_V10_sum_fu_554_p2();
    void thread_r_V_2_fu_504_p0();
    void thread_r_V_2_fu_504_p1();
    void thread_rhs_V_1_cast_fu_390_p1();
    void thread_rhs_V_2_cast_fu_394_p1();
    void thread_rhs_V_cast_fu_386_p1();
    void thread_tmp1_cast_fu_435_p1();
    void thread_tmp1_fu_429_p2();
    void thread_tmp_14_cast_fu_382_p1();
    void thread_tmp_1_cast_fu_340_p1();
    void thread_tmp_1_fu_330_p4();
    void thread_tmp_2_cast_fu_354_p1();
    void thread_tmp_2_fu_344_p4();
    void thread_tmp_3_cast_fu_368_p1();
    void thread_tmp_3_fu_358_p4();
    void thread_tmp_5_cast_fu_485_p1();
    void thread_tmp_5_fu_372_p4();
    void thread_tmp_7_cast_cast_fu_459_p1();
    void thread_tmp_8_fu_462_p3();
    void thread_tmp_9_cast_fu_520_p1();
    void thread_tmp_cast_fu_326_p1();
    void thread_tmp_fu_316_p4();
    void thread_w_fu_423_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
