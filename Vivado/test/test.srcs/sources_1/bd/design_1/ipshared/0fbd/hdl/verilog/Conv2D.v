// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Conv2D,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=11,HLS_SYN_FF=2720,HLS_SYN_LUT=2162,HLS_VERSION=2018_3}" *)

module Conv2D (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 48'd1;
parameter    ap_ST_fsm_state2 = 48'd2;
parameter    ap_ST_fsm_state3 = 48'd4;
parameter    ap_ST_fsm_state4 = 48'd8;
parameter    ap_ST_fsm_state5 = 48'd16;
parameter    ap_ST_fsm_state6 = 48'd32;
parameter    ap_ST_fsm_state7 = 48'd64;
parameter    ap_ST_fsm_state8 = 48'd128;
parameter    ap_ST_fsm_state9 = 48'd256;
parameter    ap_ST_fsm_state10 = 48'd512;
parameter    ap_ST_fsm_state11 = 48'd1024;
parameter    ap_ST_fsm_state12 = 48'd2048;
parameter    ap_ST_fsm_state13 = 48'd4096;
parameter    ap_ST_fsm_state14 = 48'd8192;
parameter    ap_ST_fsm_state15 = 48'd16384;
parameter    ap_ST_fsm_state16 = 48'd32768;
parameter    ap_ST_fsm_state17 = 48'd65536;
parameter    ap_ST_fsm_state18 = 48'd131072;
parameter    ap_ST_fsm_state19 = 48'd262144;
parameter    ap_ST_fsm_state20 = 48'd524288;
parameter    ap_ST_fsm_state21 = 48'd1048576;
parameter    ap_ST_fsm_state22 = 48'd2097152;
parameter    ap_ST_fsm_state23 = 48'd4194304;
parameter    ap_ST_fsm_state24 = 48'd8388608;
parameter    ap_ST_fsm_state25 = 48'd16777216;
parameter    ap_ST_fsm_state26 = 48'd33554432;
parameter    ap_ST_fsm_state27 = 48'd67108864;
parameter    ap_ST_fsm_state28 = 48'd134217728;
parameter    ap_ST_fsm_state29 = 48'd268435456;
parameter    ap_ST_fsm_state30 = 48'd536870912;
parameter    ap_ST_fsm_state31 = 48'd1073741824;
parameter    ap_ST_fsm_state32 = 48'd2147483648;
parameter    ap_ST_fsm_state33 = 48'd4294967296;
parameter    ap_ST_fsm_state34 = 48'd8589934592;
parameter    ap_ST_fsm_state35 = 48'd17179869184;
parameter    ap_ST_fsm_state36 = 48'd34359738368;
parameter    ap_ST_fsm_state37 = 48'd68719476736;
parameter    ap_ST_fsm_state38 = 48'd137438953472;
parameter    ap_ST_fsm_state39 = 48'd274877906944;
parameter    ap_ST_fsm_state40 = 48'd549755813888;
parameter    ap_ST_fsm_state41 = 48'd1099511627776;
parameter    ap_ST_fsm_state42 = 48'd2199023255552;
parameter    ap_ST_fsm_state43 = 48'd4398046511104;
parameter    ap_ST_fsm_state44 = 48'd8796093022208;
parameter    ap_ST_fsm_state45 = 48'd17592186044416;
parameter    ap_ST_fsm_state46 = 48'd35184372088832;
parameter    ap_ST_fsm_state47 = 48'd70368744177664;
parameter    ap_ST_fsm_state48 = 48'd140737488355328;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [47:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [15:0] in_channel_V;
wire   [15:0] out_channel_V;
wire   [7:0] kernel_size_V;
wire   [7:0] stride_V;
wire   [7:0] padding_V;
wire   [7:0] input_width_V;
wire   [7:0] input_height_V;
wire   [31:0] in_data_V;
wire   [31:0] weights_V;
wire   [31:0] biases_V;
wire   [31:0] out_data_V;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state23;
wire   [0:0] exitcond1_fu_797_p2;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state42;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state21;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state44;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state34;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [15:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [7:0] input_height_V_read_reg_1038;
reg   [7:0] input_width_V_read_reg_1044;
reg   [7:0] padding_V_read_reg_1051;
reg   [7:0] stride_V_read_reg_1056;
reg   [7:0] kernel_size_V_read_reg_1061;
reg   [15:0] out_channel_V_read_reg_1072;
reg   [15:0] in_channel_V_read_reg_1077;
reg   [30:0] tmp_reg_1083;
reg   [30:0] tmp_1_reg_1088;
reg   [30:0] tmp_3_reg_1093;
reg   [30:0] tmp_9_reg_1098;
wire   [11:0] tmp_tr4_fu_515_p1;
wire   [32:0] tmp_cast1_fu_555_p1;
reg   [32:0] tmp_cast1_reg_1119;
wire    ap_CS_fsm_state16;
wire   [31:0] tmp_9_cast1_fu_558_p1;
reg   [31:0] tmp_9_cast1_reg_1124;
wire   [48:0] tmp_24_cast_fu_561_p1;
reg   [48:0] tmp_24_cast_reg_1129;
wire   [32:0] tmp_25_cast_fu_564_p1;
reg   [32:0] tmp_25_cast_reg_1134;
wire  signed [12:0] output_width_fu_571_p2;
reg  signed [12:0] output_width_reg_1139;
wire  signed [31:0] output_width_cast_fu_577_p1;
reg  signed [31:0] output_width_cast_reg_1144;
wire  signed [12:0] output_height_fu_585_p2;
reg  signed [12:0] output_height_reg_1149;
wire  signed [27:0] output_height_cast_c_fu_591_p1;
reg  signed [27:0] output_height_cast_c_reg_1154;
wire   [18:0] tmp_cast_cast_fu_595_p1;
reg   [18:0] tmp_cast_cast_reg_1159;
wire   [19:0] tmp_1_cast_fu_598_p1;
reg   [19:0] tmp_1_cast_reg_1165;
wire   [19:0] tmp_3_cast_fu_601_p1;
reg   [19:0] tmp_3_cast_reg_1171;
wire   [19:0] tmp_4_cast_fu_604_p1;
reg   [19:0] tmp_4_cast_reg_1176;
wire   [23:0] rhs_V_3_cast_fu_607_p1;
reg   [23:0] rhs_V_3_cast_reg_1181;
wire   [31:0] rhs_V_4_cast_fu_610_p1;
reg   [31:0] rhs_V_4_cast_reg_1186;
wire   [27:0] rhs_V_5_cast_cast_fu_613_p1;
reg   [27:0] rhs_V_5_cast_cast_reg_1191;
wire   [39:0] rhs_V_9_cast_fu_616_p1;
reg   [39:0] rhs_V_9_cast_reg_1196;
wire   [47:0] rhs_V_11_cast_fu_619_p1;
reg   [47:0] rhs_V_11_cast_reg_1201;
wire   [15:0] rhs_V_2_cast1_fu_622_p1;
reg   [15:0] rhs_V_2_cast1_reg_1206;
wire   [23:0] rhs_V_2_cast_fu_625_p1;
reg   [23:0] rhs_V_2_cast_reg_1211;
wire   [31:0] rhs_V_10_cast_fu_628_p1;
reg   [31:0] rhs_V_10_cast_reg_1216;
wire   [31:0] rhs_V_8_cast_fu_631_p1;
reg   [31:0] rhs_V_8_cast_reg_1221;
wire   [31:0] tmp_10_fu_634_p1;
reg   [31:0] tmp_10_reg_1226;
wire   [31:0] next_mul1_fu_638_p2;
reg   [31:0] next_mul1_reg_1231;
wire    ap_CS_fsm_state17;
wire   [15:0] oc_fu_652_p2;
reg   [15:0] oc_reg_1239;
wire  signed [27:0] tmp_8_fu_1006_p2;
reg  signed [27:0] tmp_8_reg_1244;
wire   [0:0] exitcond3_fu_647_p2;
reg   [31:0] gmem_addr_reg_1249;
wire   [39:0] ret_V_3_fu_681_p2;
reg   [39:0] ret_V_3_reg_1255;
wire   [47:0] ret_V_4_fu_689_p2;
reg   [47:0] ret_V_4_reg_1260;
wire    ap_CS_fsm_state18;
wire   [19:0] phi_mul20_cast_fu_694_p1;
reg   [19:0] phi_mul20_cast_reg_1265;
wire    ap_CS_fsm_state19;
wire   [18:0] next_mul2_fu_698_p2;
reg   [18:0] next_mul2_reg_1270;
wire   [11:0] oh_fu_716_p2;
reg   [11:0] oh_reg_1278;
wire   [31:0] tmp_7_fu_731_p2;
reg   [31:0] tmp_7_reg_1283;
wire   [0:0] tmp_2_fu_711_p2;
reg   [31:0] gmem_addr_1_reg_1288;
wire    ap_CS_fsm_state20;
wire   [19:0] tmp_4_fu_754_p2;
reg   [19:0] tmp_4_reg_1294;
reg    ap_sig_ioackin_gmem_AWREADY;
wire   [18:0] next_mul3_fu_762_p2;
reg   [18:0] next_mul3_reg_1299;
wire    ap_CS_fsm_state22;
wire   [11:0] ow_fu_776_p2;
reg   [11:0] ow_reg_1307;
wire   [19:0] tmp_12_fu_782_p2;
reg   [19:0] tmp_12_reg_1312;
wire   [0:0] tmp_11_fu_771_p2;
wire   [23:0] next_mul4_fu_787_p2;
reg   [23:0] next_mul4_reg_1317;
reg    ap_sig_ioackin_gmem_ARREADY;
reg    ap_block_state23_io;
wire   [23:0] next_mul5_fu_792_p2;
reg   [23:0] next_mul5_reg_1322;
wire   [15:0] ic_fu_802_p2;
reg   [15:0] ic_reg_1330;
wire   [32:0] lhs_V_7_cast_fu_812_p1;
reg   [32:0] lhs_V_7_cast_reg_1335;
wire   [47:0] grp_fu_1017_p3;
reg   [47:0] tmp2_reg_1340;
wire   [15:0] next_mul_fu_819_p2;
reg   [15:0] next_mul_reg_1345;
wire    ap_CS_fsm_state24;
wire   [7:0] kh_fu_833_p2;
reg   [7:0] kh_reg_1353;
reg   [0:0] tmp_13_reg_1358;
wire   [0:0] exitcond2_fu_828_p2;
wire   [0:0] tmp_14_fu_852_p2;
reg   [0:0] tmp_14_reg_1362;
wire  signed [32:0] grp_fu_1023_p3;
reg  signed [32:0] ret_V_s_reg_1367;
wire   [7:0] kw_fu_870_p2;
reg   [7:0] kw_reg_1375;
wire    ap_CS_fsm_state25;
wire   [0:0] or_cond5_fu_910_p2;
reg   [0:0] or_cond5_reg_1380;
wire   [0:0] exitcond_fu_865_p2;
reg   [31:0] gmem_addr_2_reg_1384;
reg   [31:0] gmem_addr_3_reg_1390;
reg  signed [15:0] gmem_addr_2_read_reg_1396;
reg  signed [15:0] gmem_addr_3_read_reg_1401;
reg   [15:0] p_Val2_1_reg_1406;
wire   [15:0] addconv_fu_1001_p2;
reg   [15:0] addconv_reg_1411;
wire    ap_CS_fsm_state43;
reg   [15:0] i_op_assign_reg_251;
reg   [31:0] ret_V_10_reg_262;
reg   [11:0] i_op_assign_4_reg_273;
reg   [18:0] phi_mul2_reg_284;
reg   [11:0] i_op_assign_5_reg_295;
reg    ap_sig_ioackin_gmem_WREADY;
reg   [18:0] phi_mul3_reg_306;
reg   [15:0] p_Val2_s_reg_317;
reg   [15:0] i_op_assign_1_reg_329;
reg   [23:0] ret_V_5_reg_340;
reg   [23:0] ret_V_11_reg_351;
reg   [15:0] p_0367_2_reg_362;
reg   [7:0] i_op_assign_2_reg_374;
reg   [15:0] ret_V_12_reg_385;
reg   [15:0] p_Val2_2_reg_397;
reg   [15:0] ap_phi_mux_p_Val2_2_be_phi_fu_424_p6;
wire    ap_CS_fsm_state35;
reg   [7:0] i_op_assign_3_reg_409;
reg   [15:0] p_Val2_2_be_reg_420;
wire   [63:0] biases_V6_sum_cast_fu_667_p1;
wire  signed [63:0] out_data_V8_sum_cast_fu_744_p1;
wire   [63:0] in_data_V2_sum_cast_fu_952_p1;
wire   [63:0] weights_V4_sum_cast_fu_967_p1;
reg    ap_reg_ioackin_gmem_AWREADY;
reg    ap_reg_ioackin_gmem_ARREADY;
reg    ap_reg_ioackin_gmem_WREADY;
wire   [8:0] lhs_V_fu_475_p1;
wire   [8:0] rhs_V_fu_479_p1;
wire   [8:0] ret_V_1_fu_489_p3;
wire   [8:0] ret_V_fu_483_p2;
wire   [10:0] ret_V_1_cast_fu_497_p1;
wire  signed [10:0] tmp_cast_fu_501_p1;
wire   [10:0] ret_V_2_tr_fu_505_p2;
wire  signed [11:0] grp_fu_519_p0;
wire   [8:0] grp_fu_519_p1;
wire   [8:0] lhs_V_1_fu_525_p1;
wire   [8:0] ret_V_2_fu_529_p2;
wire  signed [10:0] tmp_7_cast_fu_535_p1;
wire   [10:0] ret_V_5_tr_fu_539_p2;
wire  signed [11:0] grp_fu_549_p0;
wire   [8:0] grp_fu_549_p1;
wire   [11:0] grp_fu_519_p2;
wire  signed [12:0] tmp_2_cast_fu_567_p1;
wire   [11:0] grp_fu_549_p2;
wire  signed [12:0] tmp_9_cast_fu_581_p1;
wire   [31:0] tmp_1_cast1_fu_658_p1;
wire   [31:0] biases_V6_sum_fu_662_p2;
wire   [7:0] ret_V_3_fu_681_p0;
wire   [31:0] ret_V_3_fu_681_p1;
wire   [7:0] ret_V_4_fu_689_p0;
wire   [39:0] ret_V_4_fu_689_p1;
wire   [12:0] i_op_assign_4_cast_fu_707_p1;
wire   [27:0] i_op_assign_4_cast1_fu_703_p1;
(* use_dsp48 = "no" *) wire   [27:0] tmp_5_fu_722_p2;
wire  signed [12:0] tmp_7_fu_731_p0;
wire  signed [27:0] tmp_7_fu_731_p1;
wire  signed [32:0] tmp_10_cast_fu_736_p1;
wire   [32:0] out_data_V8_sum_fu_739_p2;
wire   [12:0] i_op_assign_5_cast_fu_767_p1;
wire   [19:0] phi_mul17_cast_fu_758_p1;
wire   [31:0] ret_V_7_fu_1011_p2;
wire   [19:0] i_op_assign_2_cast7_fu_824_p1;
wire  signed [19:0] ih_fu_839_p2;
wire   [19:0] i_op_assign_3_cast5_fu_861_p1;
wire  signed [19:0] iw_fu_876_p2;
wire   [0:0] tmp_15_fu_885_p3;
wire   [0:0] tmp_16_fu_899_p2;
wire   [0:0] rev_fu_893_p2;
wire   [0:0] tmp1_fu_904_p2;
wire  signed [31:0] iw_cast_fu_881_p1;
wire   [32:0] rhs_V_7_cast_fu_915_p1;
wire   [15:0] tmp_29_cast_fu_924_p1;
wire   [15:0] tmp3_fu_928_p2;
wire   [47:0] tmp3_cast_fu_934_p1;
(* use_dsp48 = "no" *) wire   [47:0] tmp_17_fu_938_p2;
(* use_dsp48 = "no" *) wire   [32:0] ret_V_9_fu_919_p2;
wire   [32:0] in_data_V2_sum_fu_947_p2;
wire   [48:0] tmp_32_cast_cast_fu_943_p1;
wire   [48:0] weights_V4_sum_fu_962_p2;
wire  signed [23:0] grp_fu_1029_p3;
wire   [15:0] tmp_8_fu_1006_p0;
wire  signed [12:0] tmp_8_fu_1006_p1;
wire   [23:0] ret_V_7_fu_1011_p0;
wire   [7:0] ret_V_7_fu_1011_p1;
wire   [23:0] grp_fu_1017_p0;
wire   [7:0] grp_fu_1017_p1;
wire   [7:0] grp_fu_1023_p0;
wire   [31:0] grp_fu_1023_p2;
wire   [23:0] grp_fu_1029_p2;
reg    grp_fu_519_ap_start;
wire    grp_fu_519_ap_done;
reg    grp_fu_549_ap_start;
wire    grp_fu_549_ap_done;
reg   [47:0] ap_NS_fsm;
wire   [31:0] grp_fu_1017_p00;
wire   [39:0] ret_V_3_fu_681_p10;
wire   [47:0] ret_V_4_fu_689_p10;
wire   [31:0] ret_V_7_fu_1011_p00;
wire   [27:0] tmp_8_fu_1006_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 48'd1;
#0 ap_reg_ioackin_gmem_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem_WREADY = 1'b0;
end

Conv2D_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
Conv2D_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .in_channel_V(in_channel_V),
    .out_channel_V(out_channel_V),
    .kernel_size_V(kernel_size_V),
    .stride_V(stride_V),
    .padding_V(padding_V),
    .input_width_V(input_width_V),
    .input_height_V(input_height_V),
    .in_data_V(in_data_V),
    .weights_V(weights_V),
    .biases_V(biases_V),
    .out_data_V(out_data_V)
);

Conv2D_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
Conv2D_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_1_reg_1288),
    .I_AWID(1'd0),
    .I_AWLEN(tmp_10_reg_1226),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(addconv_reg_1411),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

Conv2D_sdiv_12s_9bkb #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 12 ))
Conv2D_sdiv_12s_9bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_519_ap_start),
    .done(grp_fu_519_ap_done),
    .din0(grp_fu_519_p0),
    .din1(grp_fu_519_p1),
    .ce(1'b1),
    .dout(grp_fu_519_p2)
);

Conv2D_sdiv_12s_9bkb #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 12 ))
Conv2D_sdiv_12s_9bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_549_ap_start),
    .done(grp_fu_549_ap_done),
    .din0(grp_fu_549_p0),
    .din1(grp_fu_549_p1),
    .ce(1'b1),
    .dout(grp_fu_549_p2)
);

Conv2D_mul_mul_16cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 28 ))
Conv2D_mul_mul_16cud_U3(
    .din0(tmp_8_fu_1006_p0),
    .din1(tmp_8_fu_1006_p1),
    .dout(tmp_8_fu_1006_p2)
);

Conv2D_mul_mul_24dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 32 ))
Conv2D_mul_mul_24dEe_U4(
    .din0(ret_V_7_fu_1011_p0),
    .din1(ret_V_7_fu_1011_p1),
    .dout(ret_V_7_fu_1011_p2)
);

Conv2D_mac_muladdeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 48 ),
    .dout_WIDTH( 48 ))
Conv2D_mac_muladdeOg_U5(
    .din0(grp_fu_1017_p0),
    .din1(grp_fu_1017_p1),
    .din2(ret_V_4_reg_1260),
    .dout(grp_fu_1017_p3)
);

Conv2D_mac_muladdfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 20 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 33 ))
Conv2D_mac_muladdfYi_U6(
    .din0(grp_fu_1023_p0),
    .din1(ih_fu_839_p2),
    .din2(grp_fu_1023_p2),
    .dout(grp_fu_1023_p3)
);

Conv2D_mac_muladdg8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
Conv2D_mac_muladdg8j_U7(
    .din0(gmem_addr_2_read_reg_1396),
    .din1(gmem_addr_3_read_reg_1401),
    .din2(grp_fu_1029_p2),
    .dout(grp_fu_1029_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_ARREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((1'b0 == ap_block_state23_io) & (1'b1 == ap_CS_fsm_state23) & (exitcond1_fu_797_p2 == 1'd1)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b0;
        end else if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23) & (exitcond1_fu_797_p2 == 1'd1)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state21)) begin
            if ((ap_sig_ioackin_gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b0;
            end else if ((gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state44)) begin
            if ((ap_sig_ioackin_gmem_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b0;
            end else if ((gmem_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (exitcond2_fu_828_p2 == 1'd1))) begin
        i_op_assign_1_reg_329 <= ic_reg_1330;
    end else if (((1'b1 == ap_CS_fsm_state22) & (tmp_11_fu_771_p2 == 1'd1))) begin
        i_op_assign_1_reg_329 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & (exitcond_fu_865_p2 == 1'd1))) begin
        i_op_assign_2_reg_374 <= kh_reg_1353;
    end else if (((1'b0 == ap_block_state23_io) & (1'b1 == ap_CS_fsm_state23) & (exitcond1_fu_797_p2 == 1'd0))) begin
        i_op_assign_2_reg_374 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        i_op_assign_3_reg_409 <= kw_reg_1375;
    end else if (((exitcond2_fu_828_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        i_op_assign_3_reg_409 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        i_op_assign_4_reg_273 <= 12'd0;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state48))) begin
        i_op_assign_4_reg_273 <= oh_reg_1278;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        i_op_assign_5_reg_295 <= 12'd0;
    end else if (((ap_sig_ioackin_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
        i_op_assign_5_reg_295 <= ow_reg_1307;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_711_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        i_op_assign_reg_251 <= oc_reg_1239;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        i_op_assign_reg_251 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & (exitcond_fu_865_p2 == 1'd1))) begin
        p_0367_2_reg_362 <= p_Val2_2_reg_397;
    end else if (((1'b0 == ap_block_state23_io) & (1'b1 == ap_CS_fsm_state23) & (exitcond1_fu_797_p2 == 1'd0))) begin
        p_0367_2_reg_362 <= p_Val2_s_reg_317;
    end
end

always @ (posedge ap_clk) begin
    if ((((exitcond_fu_865_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25) & (tmp_13_reg_1358 == 1'd1)) | ((exitcond_fu_865_p2 == 1'd0) & (or_cond5_fu_910_p2 == 1'd0) & (tmp_13_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state25)))) begin
        p_Val2_2_be_reg_420 <= p_Val2_2_reg_397;
    end else if (((tmp_13_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state35) & (or_cond5_reg_1380 == 1'd1))) begin
        p_Val2_2_be_reg_420 <= {{grp_fu_1029_p3[23:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        p_Val2_2_reg_397 <= ap_phi_mux_p_Val2_2_be_phi_fu_424_p6;
    end else if (((exitcond2_fu_828_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        p_Val2_2_reg_397 <= p_0367_2_reg_362;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (exitcond2_fu_828_p2 == 1'd1))) begin
        p_Val2_s_reg_317 <= p_0367_2_reg_362;
    end else if (((1'b1 == ap_CS_fsm_state22) & (tmp_11_fu_771_p2 == 1'd1))) begin
        p_Val2_s_reg_317 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        phi_mul2_reg_284 <= 19'd0;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state48))) begin
        phi_mul2_reg_284 <= next_mul2_reg_1270;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        phi_mul3_reg_306 <= 19'd0;
    end else if (((ap_sig_ioackin_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
        phi_mul3_reg_306 <= next_mul3_reg_1299;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_711_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        ret_V_10_reg_262 <= next_mul1_reg_1231;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        ret_V_10_reg_262 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (exitcond2_fu_828_p2 == 1'd1))) begin
        ret_V_11_reg_351 <= next_mul4_reg_1317;
    end else if (((1'b1 == ap_CS_fsm_state22) & (tmp_11_fu_771_p2 == 1'd1))) begin
        ret_V_11_reg_351 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & (exitcond_fu_865_p2 == 1'd1))) begin
        ret_V_12_reg_385 <= next_mul_reg_1345;
    end else if (((1'b0 == ap_block_state23_io) & (1'b1 == ap_CS_fsm_state23) & (exitcond1_fu_797_p2 == 1'd0))) begin
        ret_V_12_reg_385 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (exitcond2_fu_828_p2 == 1'd1))) begin
        ret_V_5_reg_340 <= next_mul5_reg_1322;
    end else if (((1'b1 == ap_CS_fsm_state22) & (tmp_11_fu_771_p2 == 1'd1))) begin
        ret_V_5_reg_340 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        addconv_reg_1411 <= addconv_fu_1001_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        gmem_addr_1_reg_1288 <= out_data_V8_sum_cast_fu_744_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
        gmem_addr_2_read_reg_1396 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_865_p2 == 1'd0) & (tmp_13_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state25) & (or_cond5_fu_910_p2 == 1'd1))) begin
        gmem_addr_2_reg_1384 <= in_data_V2_sum_cast_fu_952_p1;
        gmem_addr_3_reg_1390 <= weights_V4_sum_cast_fu_967_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
        gmem_addr_3_read_reg_1401 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_647_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        gmem_addr_reg_1249 <= biases_V6_sum_cast_fu_667_p1;
        ret_V_3_reg_1255 <= ret_V_3_fu_681_p2;
        tmp_8_reg_1244 <= tmp_8_fu_1006_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state23_io) & (1'b1 == ap_CS_fsm_state23))) begin
        ic_reg_1330 <= ic_fu_802_p2;
        next_mul4_reg_1317 <= next_mul4_fu_787_p2;
        next_mul5_reg_1322 <= next_mul5_fu_792_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_channel_V_read_reg_1077 <= in_channel_V;
        input_height_V_read_reg_1038 <= input_height_V;
        input_width_V_read_reg_1044 <= input_width_V;
        kernel_size_V_read_reg_1061 <= kernel_size_V;
        out_channel_V_read_reg_1072 <= out_channel_V;
        padding_V_read_reg_1051 <= padding_V;
        stride_V_read_reg_1056 <= stride_V;
        tmp_1_reg_1088 <= {{biases_V[31:1]}};
        tmp_3_reg_1093 <= {{weights_V[31:1]}};
        tmp_9_reg_1098 <= {{in_data_V[31:1]}};
        tmp_reg_1083 <= {{out_data_V[31:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        kh_reg_1353 <= kh_fu_833_p2;
        next_mul_reg_1345 <= next_mul_fu_819_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        kw_reg_1375 <= kw_fu_870_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state23_io) & (1'b1 == ap_CS_fsm_state23) & (exitcond1_fu_797_p2 == 1'd0))) begin
        lhs_V_7_cast_reg_1335[31 : 0] <= lhs_V_7_cast_fu_812_p1[31 : 0];
        tmp2_reg_1340 <= grp_fu_1017_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        next_mul1_reg_1231 <= next_mul1_fu_638_p2;
        oc_reg_1239 <= oc_fu_652_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        next_mul2_reg_1270 <= next_mul2_fu_698_p2;
        oh_reg_1278 <= oh_fu_716_p2;
        phi_mul20_cast_reg_1265[18 : 0] <= phi_mul20_cast_fu_694_p1[18 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        next_mul3_reg_1299 <= next_mul3_fu_762_p2;
        ow_reg_1307 <= ow_fu_776_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_865_p2 == 1'd0) & (tmp_13_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
        or_cond5_reg_1380 <= or_cond5_fu_910_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        output_height_cast_c_reg_1154 <= output_height_cast_c_fu_591_p1;
        output_height_reg_1149 <= output_height_fu_585_p2;
        output_width_cast_reg_1144 <= output_width_cast_fu_577_p1;
        output_width_reg_1139 <= output_width_fu_571_p2;
        rhs_V_10_cast_reg_1216[7 : 0] <= rhs_V_10_cast_fu_628_p1[7 : 0];
        rhs_V_11_cast_reg_1201[7 : 0] <= rhs_V_11_cast_fu_619_p1[7 : 0];
        rhs_V_2_cast1_reg_1206[7 : 0] <= rhs_V_2_cast1_fu_622_p1[7 : 0];
        rhs_V_2_cast_reg_1211[7 : 0] <= rhs_V_2_cast_fu_625_p1[7 : 0];
        rhs_V_3_cast_reg_1181[7 : 0] <= rhs_V_3_cast_fu_607_p1[7 : 0];
        rhs_V_4_cast_reg_1186[7 : 0] <= rhs_V_4_cast_fu_610_p1[7 : 0];
        rhs_V_5_cast_cast_reg_1191[7 : 0] <= rhs_V_5_cast_cast_fu_613_p1[7 : 0];
        rhs_V_8_cast_reg_1221[15 : 0] <= rhs_V_8_cast_fu_631_p1[15 : 0];
        rhs_V_9_cast_reg_1196[7 : 0] <= rhs_V_9_cast_fu_616_p1[7 : 0];
        tmp_10_reg_1226[12 : 0] <= tmp_10_fu_634_p1[12 : 0];
        tmp_1_cast_reg_1165[7 : 0] <= tmp_1_cast_fu_598_p1[7 : 0];
        tmp_24_cast_reg_1129[30 : 0] <= tmp_24_cast_fu_561_p1[30 : 0];
        tmp_25_cast_reg_1134[30 : 0] <= tmp_25_cast_fu_564_p1[30 : 0];
        tmp_3_cast_reg_1171[7 : 0] <= tmp_3_cast_fu_601_p1[7 : 0];
        tmp_4_cast_reg_1176[7 : 0] <= tmp_4_cast_fu_604_p1[7 : 0];
        tmp_9_cast1_reg_1124[30 : 0] <= tmp_9_cast1_fu_558_p1[30 : 0];
        tmp_cast1_reg_1119[30 : 0] <= tmp_cast1_fu_555_p1[30 : 0];
        tmp_cast_cast_reg_1159[7 : 0] <= tmp_cast_cast_fu_595_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
        p_Val2_1_reg_1406 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        ret_V_4_reg_1260 <= ret_V_4_fu_689_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_828_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        ret_V_s_reg_1367 <= grp_fu_1023_p3;
        tmp_13_reg_1358 <= ih_fu_839_p2[32'd19];
        tmp_14_reg_1362 <= tmp_14_fu_852_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & (tmp_11_fu_771_p2 == 1'd1))) begin
        tmp_12_reg_1312 <= tmp_12_fu_782_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        tmp_4_reg_1294 <= tmp_4_fu_754_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (tmp_2_fu_711_p2 == 1'd1))) begin
        tmp_7_reg_1283 <= tmp_7_fu_731_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (exitcond3_fu_647_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_13_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state35) & (or_cond5_reg_1380 == 1'd1))) begin
        ap_phi_mux_p_Val2_2_be_phi_fu_424_p6 = {{grp_fu_1029_p3[23:8]}};
    end else begin
        ap_phi_mux_p_Val2_2_be_phi_fu_424_p6 = p_Val2_2_be_reg_420;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (exitcond3_fu_647_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_AWREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_WREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY;
    end else begin
        ap_sig_ioackin_gmem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state27)) begin
            gmem_ARADDR = gmem_addr_3_reg_1390;
        end else if ((1'b1 == ap_CS_fsm_state26)) begin
            gmem_ARADDR = gmem_addr_2_reg_1384;
        end else if (((1'b1 == ap_CS_fsm_state23) & (exitcond1_fu_797_p2 == 1'd1))) begin
            gmem_ARADDR = gmem_addr_reg_1249;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state27)) | ((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state26)) | ((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state23) & (exitcond1_fu_797_p2 == 1'd1)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state21))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state48))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state42)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state44))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state23) & (exitcond1_fu_797_p2 == 1'd1)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state42))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_519_ap_start = 1'b1;
    end else begin
        grp_fu_519_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_549_ap_start = 1'b1;
    end else begin
        grp_fu_549_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (exitcond3_fu_647_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((tmp_2_fu_711_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((ap_sig_ioackin_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (tmp_11_fu_771_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((1'b0 == ap_block_state23_io) & (1'b1 == ap_CS_fsm_state23) & (exitcond1_fu_797_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else if (((1'b0 == ap_block_state23_io) & (1'b1 == ap_CS_fsm_state23) & (exitcond1_fu_797_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (exitcond2_fu_828_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (exitcond_fu_865_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else if (((exitcond_fu_865_p2 == 1'd0) & (tmp_13_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state25) & (or_cond5_fu_910_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            if (((ap_sig_ioackin_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign addconv_fu_1001_p2 = (p_Val2_1_reg_1406 + p_Val2_s_reg_317);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

always @ (*) begin
    ap_block_state23_io = ((ap_sig_ioackin_gmem_ARREADY == 1'b0) & (exitcond1_fu_797_p2 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign biases_V6_sum_cast_fu_667_p1 = biases_V6_sum_fu_662_p2;

assign biases_V6_sum_fu_662_p2 = (tmp_1_cast1_fu_658_p1 + tmp_9_cast1_reg_1124);

assign exitcond1_fu_797_p2 = ((i_op_assign_1_reg_329 == in_channel_V_read_reg_1077) ? 1'b1 : 1'b0);

assign exitcond2_fu_828_p2 = ((i_op_assign_2_reg_374 == kernel_size_V_read_reg_1061) ? 1'b1 : 1'b0);

assign exitcond3_fu_647_p2 = ((i_op_assign_reg_251 == out_channel_V_read_reg_1072) ? 1'b1 : 1'b0);

assign exitcond_fu_865_p2 = ((i_op_assign_3_reg_409 == kernel_size_V_read_reg_1061) ? 1'b1 : 1'b0);

assign grp_fu_1017_p0 = grp_fu_1017_p00;

assign grp_fu_1017_p00 = ret_V_11_reg_351;

assign grp_fu_1017_p1 = rhs_V_10_cast_reg_1216;

assign grp_fu_1023_p0 = rhs_V_5_cast_cast_reg_1191;

assign grp_fu_1023_p2 = lhs_V_7_cast_reg_1335;

assign grp_fu_1029_p2 = {{p_Val2_2_reg_397}, {8'd0}};

assign grp_fu_519_p0 = $signed(ret_V_2_tr_fu_505_p2);

assign grp_fu_519_p1 = tmp_tr4_fu_515_p1;

assign grp_fu_549_p0 = $signed(ret_V_5_tr_fu_539_p2);

assign grp_fu_549_p1 = tmp_tr4_fu_515_p1;

assign i_op_assign_2_cast7_fu_824_p1 = i_op_assign_2_reg_374;

assign i_op_assign_3_cast5_fu_861_p1 = i_op_assign_3_reg_409;

assign i_op_assign_4_cast1_fu_703_p1 = i_op_assign_4_reg_273;

assign i_op_assign_4_cast_fu_707_p1 = i_op_assign_4_reg_273;

assign i_op_assign_5_cast_fu_767_p1 = i_op_assign_5_reg_295;

assign ic_fu_802_p2 = (i_op_assign_1_reg_329 + 16'd1);

assign ih_fu_839_p2 = (i_op_assign_2_cast7_fu_824_p1 + tmp_4_reg_1294);

assign in_data_V2_sum_cast_fu_952_p1 = in_data_V2_sum_fu_947_p2;

assign in_data_V2_sum_fu_947_p2 = (ret_V_9_fu_919_p2 + tmp_25_cast_reg_1134);

assign iw_cast_fu_881_p1 = iw_fu_876_p2;

assign iw_fu_876_p2 = (i_op_assign_3_cast5_fu_861_p1 + tmp_12_reg_1312);

assign kh_fu_833_p2 = (i_op_assign_2_reg_374 + 8'd1);

assign kw_fu_870_p2 = (i_op_assign_3_reg_409 + 8'd1);

assign lhs_V_1_fu_525_p1 = input_height_V;

assign lhs_V_7_cast_fu_812_p1 = ret_V_7_fu_1011_p2;

assign lhs_V_fu_475_p1 = input_width_V;

assign next_mul1_fu_638_p2 = (ret_V_10_reg_262 + rhs_V_8_cast_reg_1221);

assign next_mul2_fu_698_p2 = (phi_mul2_reg_284 + tmp_cast_cast_reg_1159);

assign next_mul3_fu_762_p2 = (phi_mul3_reg_306 + tmp_cast_cast_reg_1159);

assign next_mul4_fu_787_p2 = (ret_V_11_reg_351 + rhs_V_2_cast_reg_1211);

assign next_mul5_fu_792_p2 = (ret_V_5_reg_340 + rhs_V_3_cast_reg_1181);

assign next_mul_fu_819_p2 = (ret_V_12_reg_385 + rhs_V_2_cast1_reg_1206);

assign oc_fu_652_p2 = (i_op_assign_reg_251 + 16'd1);

assign oh_fu_716_p2 = (i_op_assign_4_reg_273 + 12'd1);

assign or_cond5_fu_910_p2 = (tmp_14_reg_1362 & tmp1_fu_904_p2);

assign out_data_V8_sum_cast_fu_744_p1 = $signed(out_data_V8_sum_fu_739_p2);

assign out_data_V8_sum_fu_739_p2 = ($signed(tmp_10_cast_fu_736_p1) + $signed(tmp_cast1_reg_1119));

assign output_height_cast_c_fu_591_p1 = output_height_fu_585_p2;

assign output_height_fu_585_p2 = ($signed(tmp_9_cast_fu_581_p1) + $signed(13'd1));

assign output_width_cast_fu_577_p1 = output_width_fu_571_p2;

assign output_width_fu_571_p2 = ($signed(tmp_2_cast_fu_567_p1) + $signed(13'd1));

assign ow_fu_776_p2 = (i_op_assign_5_reg_295 + 12'd1);

assign phi_mul17_cast_fu_758_p1 = phi_mul3_reg_306;

assign phi_mul20_cast_fu_694_p1 = phi_mul2_reg_284;

assign ret_V_1_cast_fu_497_p1 = ret_V_1_fu_489_p3;

assign ret_V_1_fu_489_p3 = {{padding_V}, {1'd0}};

assign ret_V_2_fu_529_p2 = (lhs_V_1_fu_525_p1 - rhs_V_fu_479_p1);

assign ret_V_2_tr_fu_505_p2 = ($signed(ret_V_1_cast_fu_497_p1) + $signed(tmp_cast_fu_501_p1));

assign ret_V_3_fu_681_p0 = rhs_V_9_cast_reg_1196;

assign ret_V_3_fu_681_p1 = ret_V_3_fu_681_p10;

assign ret_V_3_fu_681_p10 = ret_V_10_reg_262;

assign ret_V_3_fu_681_p2 = (ret_V_3_fu_681_p0 * ret_V_3_fu_681_p1);

assign ret_V_4_fu_689_p0 = rhs_V_11_cast_reg_1201;

assign ret_V_4_fu_689_p1 = ret_V_4_fu_689_p10;

assign ret_V_4_fu_689_p10 = ret_V_3_reg_1255;

assign ret_V_4_fu_689_p2 = (ret_V_4_fu_689_p0 * ret_V_4_fu_689_p1);

assign ret_V_5_tr_fu_539_p2 = ($signed(ret_V_1_cast_fu_497_p1) + $signed(tmp_7_cast_fu_535_p1));

assign ret_V_7_fu_1011_p0 = ret_V_7_fu_1011_p00;

assign ret_V_7_fu_1011_p00 = ret_V_5_reg_340;

assign ret_V_7_fu_1011_p1 = rhs_V_4_cast_reg_1186;

assign ret_V_9_fu_919_p2 = ($signed(ret_V_s_reg_1367) + $signed(rhs_V_7_cast_fu_915_p1));

assign ret_V_fu_483_p2 = (lhs_V_fu_475_p1 - rhs_V_fu_479_p1);

assign rev_fu_893_p2 = (tmp_15_fu_885_p3 ^ 1'd1);

assign rhs_V_10_cast_fu_628_p1 = kernel_size_V_read_reg_1061;

assign rhs_V_11_cast_fu_619_p1 = kernel_size_V_read_reg_1061;

assign rhs_V_2_cast1_fu_622_p1 = kernel_size_V_read_reg_1061;

assign rhs_V_2_cast_fu_625_p1 = kernel_size_V_read_reg_1061;

assign rhs_V_3_cast_fu_607_p1 = input_height_V_read_reg_1038;

assign rhs_V_4_cast_fu_610_p1 = input_width_V_read_reg_1044;

assign rhs_V_5_cast_cast_fu_613_p1 = input_width_V_read_reg_1044;

assign rhs_V_7_cast_fu_915_p1 = $unsigned(iw_cast_fu_881_p1);

assign rhs_V_8_cast_fu_631_p1 = in_channel_V_read_reg_1077;

assign rhs_V_9_cast_fu_616_p1 = kernel_size_V_read_reg_1061;

assign rhs_V_fu_479_p1 = kernel_size_V;

assign tmp1_fu_904_p2 = (tmp_16_fu_899_p2 & rev_fu_893_p2);

assign tmp3_cast_fu_934_p1 = tmp3_fu_928_p2;

assign tmp3_fu_928_p2 = (ret_V_12_reg_385 + tmp_29_cast_fu_924_p1);

assign tmp_10_cast_fu_736_p1 = $signed(tmp_7_reg_1283);

assign tmp_10_fu_634_p1 = $unsigned(output_width_fu_571_p2);

assign tmp_11_fu_771_p2 = (($signed(i_op_assign_5_cast_fu_767_p1) < $signed(output_width_reg_1139)) ? 1'b1 : 1'b0);

assign tmp_12_fu_782_p2 = (phi_mul17_cast_fu_758_p1 - tmp_1_cast_reg_1165);

assign tmp_14_fu_852_p2 = (($signed(ih_fu_839_p2) < $signed(tmp_3_cast_reg_1171)) ? 1'b1 : 1'b0);

assign tmp_15_fu_885_p3 = iw_fu_876_p2[32'd19];

assign tmp_16_fu_899_p2 = (($signed(iw_fu_876_p2) < $signed(tmp_4_cast_reg_1176)) ? 1'b1 : 1'b0);

assign tmp_17_fu_938_p2 = (tmp3_cast_fu_934_p1 + tmp2_reg_1340);

assign tmp_1_cast1_fu_658_p1 = i_op_assign_reg_251;

assign tmp_1_cast_fu_598_p1 = padding_V_read_reg_1051;

assign tmp_24_cast_fu_561_p1 = tmp_3_reg_1093;

assign tmp_25_cast_fu_564_p1 = tmp_9_reg_1098;

assign tmp_29_cast_fu_924_p1 = i_op_assign_3_reg_409;

assign tmp_2_cast_fu_567_p1 = $signed(grp_fu_519_p2);

assign tmp_2_fu_711_p2 = (($signed(i_op_assign_4_cast_fu_707_p1) < $signed(output_height_reg_1149)) ? 1'b1 : 1'b0);

assign tmp_32_cast_cast_fu_943_p1 = tmp_17_fu_938_p2;

assign tmp_3_cast_fu_601_p1 = input_height_V_read_reg_1038;

assign tmp_4_cast_fu_604_p1 = input_width_V_read_reg_1044;

assign tmp_4_fu_754_p2 = (phi_mul20_cast_reg_1265 - tmp_1_cast_reg_1165);

assign tmp_5_fu_722_p2 = ($signed(tmp_8_reg_1244) + $signed(i_op_assign_4_cast1_fu_703_p1));

assign tmp_7_cast_fu_535_p1 = $signed(ret_V_2_fu_529_p2);

assign tmp_7_fu_731_p0 = output_width_cast_reg_1144;

assign tmp_7_fu_731_p1 = tmp_5_fu_722_p2;

assign tmp_7_fu_731_p2 = ($signed(tmp_7_fu_731_p0) * $signed(tmp_7_fu_731_p1));

assign tmp_8_fu_1006_p0 = tmp_8_fu_1006_p00;

assign tmp_8_fu_1006_p00 = i_op_assign_reg_251;

assign tmp_8_fu_1006_p1 = output_height_cast_c_reg_1154;

assign tmp_9_cast1_fu_558_p1 = tmp_1_reg_1088;

assign tmp_9_cast_fu_581_p1 = $signed(grp_fu_549_p2);

assign tmp_cast1_fu_555_p1 = tmp_reg_1083;

assign tmp_cast_cast_fu_595_p1 = stride_V_read_reg_1056;

assign tmp_cast_fu_501_p1 = $signed(ret_V_fu_483_p2);

assign tmp_tr4_fu_515_p1 = stride_V;

assign weights_V4_sum_cast_fu_967_p1 = weights_V4_sum_fu_962_p2;

assign weights_V4_sum_fu_962_p2 = (tmp_32_cast_cast_fu_943_p1 + tmp_24_cast_reg_1129);

always @ (posedge ap_clk) begin
    tmp_cast1_reg_1119[32:31] <= 2'b00;
    tmp_9_cast1_reg_1124[31] <= 1'b0;
    tmp_24_cast_reg_1129[48:31] <= 18'b000000000000000000;
    tmp_25_cast_reg_1134[32:31] <= 2'b00;
    tmp_cast_cast_reg_1159[18:8] <= 11'b00000000000;
    tmp_1_cast_reg_1165[19:8] <= 12'b000000000000;
    tmp_3_cast_reg_1171[19:8] <= 12'b000000000000;
    tmp_4_cast_reg_1176[19:8] <= 12'b000000000000;
    rhs_V_3_cast_reg_1181[23:8] <= 16'b0000000000000000;
    rhs_V_4_cast_reg_1186[31:8] <= 24'b000000000000000000000000;
    rhs_V_5_cast_cast_reg_1191[27:8] <= 20'b00000000000000000000;
    rhs_V_9_cast_reg_1196[39:8] <= 32'b00000000000000000000000000000000;
    rhs_V_11_cast_reg_1201[47:8] <= 40'b0000000000000000000000000000000000000000;
    rhs_V_2_cast1_reg_1206[15:8] <= 8'b00000000;
    rhs_V_2_cast_reg_1211[23:8] <= 16'b0000000000000000;
    rhs_V_10_cast_reg_1216[31:8] <= 24'b000000000000000000000000;
    rhs_V_8_cast_reg_1221[31:16] <= 16'b0000000000000000;
    tmp_10_reg_1226[31:13] <= 19'b0000000000000000000;
    phi_mul20_cast_reg_1265[19] <= 1'b0;
    lhs_V_7_cast_reg_1335[32] <= 1'b0;
end

endmodule //Conv2D
