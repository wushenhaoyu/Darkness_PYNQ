// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Aff_channel,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=3,HLS_SYN_FF=1635,HLS_SYN_LUT=1515,HLS_VERSION=2018_3}" *)

module Aff_channel (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 30'd1;
parameter    ap_ST_fsm_state2 = 30'd2;
parameter    ap_ST_fsm_state3 = 30'd4;
parameter    ap_ST_fsm_state4 = 30'd8;
parameter    ap_ST_fsm_state5 = 30'd16;
parameter    ap_ST_fsm_state6 = 30'd32;
parameter    ap_ST_fsm_state7 = 30'd64;
parameter    ap_ST_fsm_state8 = 30'd128;
parameter    ap_ST_fsm_state9 = 30'd256;
parameter    ap_ST_fsm_state10 = 30'd512;
parameter    ap_ST_fsm_state11 = 30'd1024;
parameter    ap_ST_fsm_state12 = 30'd2048;
parameter    ap_ST_fsm_state13 = 30'd4096;
parameter    ap_ST_fsm_state14 = 30'd8192;
parameter    ap_ST_fsm_state15 = 30'd16384;
parameter    ap_ST_fsm_state16 = 30'd32768;
parameter    ap_ST_fsm_state17 = 30'd65536;
parameter    ap_ST_fsm_state18 = 30'd131072;
parameter    ap_ST_fsm_state19 = 30'd262144;
parameter    ap_ST_fsm_state20 = 30'd524288;
parameter    ap_ST_fsm_state21 = 30'd1048576;
parameter    ap_ST_fsm_state22 = 30'd2097152;
parameter    ap_ST_fsm_state23 = 30'd4194304;
parameter    ap_ST_fsm_state24 = 30'd8388608;
parameter    ap_ST_fsm_state25 = 30'd16777216;
parameter    ap_ST_fsm_state26 = 30'd33554432;
parameter    ap_ST_fsm_state27 = 30'd67108864;
parameter    ap_ST_fsm_state28 = 30'd134217728;
parameter    ap_ST_fsm_state29 = 30'd268435456;
parameter    ap_ST_fsm_state30 = 30'd536870912;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [29:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [7:0] dim_V;
wire   [15:0] input_width_V;
wire   [15:0] input_height_V;
wire   [31:0] input_data_V;
wire   [31:0] alpha_V;
wire   [31:0] beta_V;
wire   [31:0] color_V;
wire   [31:0] out_data_V;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state5;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state13;
wire   [0:0] exitcond_fu_508_p2;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state23;
reg    gmem_blk_n_AW;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state25;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state30;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [15:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [15:0] input_height_V_read_reg_635;
reg   [15:0] input_width_V_read_reg_640;
reg   [7:0] dim_V_read_reg_645;
wire   [40:0] tmp_cast_fu_326_p1;
reg   [40:0] tmp_cast_reg_650;
wire   [31:0] tmp_1_cast_fu_340_p1;
reg   [31:0] tmp_1_cast_reg_655;
wire   [31:0] tmp_2_cast_fu_354_p1;
reg   [31:0] tmp_2_cast_reg_660;
wire   [31:0] tmp_3_cast_fu_368_p1;
reg   [31:0] tmp_3_cast_reg_665;
wire   [40:0] tmp_14_cast_fu_382_p1;
reg   [40:0] tmp_14_cast_reg_670;
wire   [23:0] rhs_V_cast_fu_386_p1;
reg   [23:0] rhs_V_cast_reg_675;
wire   [39:0] rhs_V_1_cast_fu_390_p1;
reg   [39:0] rhs_V_1_cast_reg_680;
wire   [31:0] rhs_V_2_cast_fu_394_p1;
reg   [31:0] rhs_V_2_cast_reg_685;
wire   [31:0] next_mul1_fu_398_p2;
reg   [31:0] next_mul1_reg_690;
wire    ap_CS_fsm_state2;
wire   [15:0] h_fu_408_p2;
reg   [15:0] h_reg_698;
wire   [15:0] w_fu_423_p2;
reg   [15:0] w_reg_706;
wire    ap_CS_fsm_state3;
wire   [39:0] tmp1_cast_fu_435_p1;
reg   [39:0] tmp1_cast_reg_711;
wire   [0:0] exitcond2_fu_418_p2;
wire   [23:0] next_mul_fu_439_p2;
reg   [23:0] next_mul_reg_716;
wire    ap_CS_fsm_state4;
wire   [7:0] c_fu_449_p2;
reg   [7:0] c_reg_724;
wire   [40:0] tmp_7_cast_cast_fu_459_p1;
reg   [40:0] tmp_7_cast_cast_reg_729;
wire   [0:0] exitcond1_fu_444_p2;
reg   [31:0] gmem_addr_reg_734;
reg   [31:0] gmem_addr_1_reg_740;
wire  signed [23:0] r_V_2_fu_504_p1;
reg  signed [23:0] r_V_2_reg_746;
wire   [4:0] c_color_1_fu_514_p2;
reg   [4:0] c_color_1_reg_754;
reg    ap_block_state13;
reg  signed [15:0] gmem_addr_1_read_reg_759;
reg   [31:0] gmem_addr_2_reg_764;
reg   [31:0] gmem_addr_3_reg_770;
reg   [31:0] gmem_addr_4_reg_776;
wire    ap_CS_fsm_state14;
reg  signed [15:0] gmem_addr_2_read_reg_787;
reg    ap_sig_ioackin_gmem_AWREADY;
reg   [15:0] p_Val2_s_reg_792;
reg   [15:0] tmp_s_reg_797;
wire    ap_CS_fsm_state24;
reg   [15:0] i_op_assign_reg_236;
reg   [31:0] ret_V_2_reg_247;
reg   [15:0] i_op_assign_1_reg_259;
wire   [0:0] exitcond3_fu_403_p2;
reg   [7:0] i_op_assign_2_reg_270;
reg   [23:0] ret_V_reg_282;
reg  signed [15:0] p_Val2_2_reg_293;
reg   [4:0] c_color_reg_305;
wire   [63:0] input_data_V2_sum_ca_fu_475_p1;
wire   [63:0] color_V8_sum_cast_fu_494_p1;
wire   [63:0] alpha_V4_sum_cast_fu_529_p1;
wire   [63:0] beta_V6_sum_cast_fu_544_p1;
wire   [63:0] out_data_V10_sum_cas_fu_558_p1;
reg    ap_reg_ioackin_gmem_ARREADY;
reg    ap_sig_ioackin_gmem_ARREADY;
reg    ap_reg_ioackin_gmem_AWREADY;
reg    ap_reg_ioackin_gmem_WREADY;
reg    ap_sig_ioackin_gmem_WREADY;
wire   [30:0] tmp_fu_316_p4;
wire   [30:0] tmp_1_fu_330_p4;
wire   [30:0] tmp_2_fu_344_p4;
wire   [30:0] tmp_3_fu_358_p4;
wire   [30:0] tmp_5_fu_372_p4;
wire   [31:0] i_op_assign_1_cast5_fu_414_p1;
wire   [31:0] tmp1_fu_429_p2;
wire   [39:0] grp_fu_611_p3;
wire   [40:0] input_data_V2_sum_fu_470_p2;
wire   [11:0] tmp_8_fu_462_p3;
wire   [31:0] tmp_5_cast_fu_485_p1;
wire   [31:0] color_V8_sum_fu_489_p2;
wire  signed [15:0] r_V_2_fu_504_p0;
wire   [31:0] tmp_9_cast_fu_520_p1;
wire   [31:0] alpha_V4_sum_fu_524_p2;
wire   [31:0] beta_V6_sum_fu_539_p2;
wire   [40:0] out_data_V10_sum_fu_554_p2;
wire  signed [23:0] grp_fu_618_p3;
wire  signed [23:0] grp_fu_626_p3;
wire   [23:0] grp_fu_611_p0;
wire   [15:0] grp_fu_611_p1;
wire   [31:0] grp_fu_611_p2;
wire  signed [15:0] grp_fu_618_p1;
wire   [23:0] grp_fu_618_p2;
wire   [23:0] grp_fu_626_p2;
reg   [29:0] ap_NS_fsm;
wire   [39:0] grp_fu_611_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 30'd1;
#0 ap_reg_ioackin_gmem_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_WREADY = 1'b0;
end

Aff_channel_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
Aff_channel_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .dim_V(dim_V),
    .input_width_V(input_width_V),
    .input_height_V(input_height_V),
    .input_data_V(input_data_V),
    .alpha_V(alpha_V),
    .beta_V(beta_V),
    .color_V(color_V),
    .out_data_V(out_data_V)
);

Aff_channel_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
Aff_channel_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_4_reg_776),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(tmp_s_reg_797),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

Aff_channel_mac_mbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
Aff_channel_mac_mbkb_U1(
    .din0(grp_fu_611_p0),
    .din1(grp_fu_611_p1),
    .din2(grp_fu_611_p2),
    .dout(grp_fu_611_p3)
);

Aff_channel_mac_mcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
Aff_channel_mac_mcud_U2(
    .din0(gmem_addr_1_read_reg_759),
    .din1(grp_fu_618_p1),
    .din2(grp_fu_618_p2),
    .dout(grp_fu_618_p3)
);

Aff_channel_mac_mcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
Aff_channel_mac_mcud_U3(
    .din0(p_Val2_2_reg_293),
    .din1(gmem_addr_2_read_reg_787),
    .din2(grp_fu_626_p2),
    .dout(grp_fu_626_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_ARREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b0;
        end else if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state22)) begin
            if (~((ap_sig_ioackin_gmem_AWREADY == 1'b0) | (gmem_RVALID == 1'b0))) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b0;
            end else if (((gmem_RVALID == 1'b1) & (gmem_AWREADY == 1'b1))) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state25)) begin
            if ((ap_sig_ioackin_gmem_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b0;
            end else if ((gmem_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        c_color_reg_305 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        c_color_reg_305 <= c_color_1_reg_754;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_403_p2 == 1'd0))) begin
        i_op_assign_1_reg_259 <= 16'd0;
    end else if (((exitcond1_fu_444_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_op_assign_1_reg_259 <= w_reg_706;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_418_p2 == 1'd0))) begin
        i_op_assign_2_reg_270 <= 8'd0;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
        i_op_assign_2_reg_270 <= c_reg_724;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_418_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_op_assign_reg_236 <= h_reg_698;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_op_assign_reg_236 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        p_Val2_2_reg_293 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        p_Val2_2_reg_293 <= {{grp_fu_618_p3[23:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_418_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ret_V_2_reg_247 <= next_mul1_reg_690;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ret_V_2_reg_247 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_418_p2 == 1'd0))) begin
        ret_V_reg_282 <= 24'd0;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
        ret_V_reg_282 <= next_mul_reg_716;
    end
end

always @ (posedge ap_clk) begin
    if ((~((gmem_RVALID == 1'b0) & (exitcond_fu_508_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state13))) begin
        c_color_1_reg_754 <= c_color_1_fu_514_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_reg_724 <= c_fu_449_p2;
        next_mul_reg_716 <= next_mul_fu_439_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dim_V_read_reg_645 <= dim_V;
        input_height_V_read_reg_635 <= input_height_V;
        input_width_V_read_reg_640 <= input_width_V;
        rhs_V_1_cast_reg_680[15 : 0] <= rhs_V_1_cast_fu_390_p1[15 : 0];
        rhs_V_2_cast_reg_685[15 : 0] <= rhs_V_2_cast_fu_394_p1[15 : 0];
        rhs_V_cast_reg_675[15 : 0] <= rhs_V_cast_fu_386_p1[15 : 0];
        tmp_14_cast_reg_670[30 : 0] <= tmp_14_cast_fu_382_p1[30 : 0];
        tmp_1_cast_reg_655[30 : 0] <= tmp_1_cast_fu_340_p1[30 : 0];
        tmp_2_cast_reg_660[30 : 0] <= tmp_2_cast_fu_354_p1[30 : 0];
        tmp_3_cast_reg_665[30 : 0] <= tmp_3_cast_fu_368_p1[30 : 0];
        tmp_cast_reg_650[30 : 0] <= tmp_cast_fu_326_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((gmem_RVALID == 1'b0) & (exitcond_fu_508_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state13) & (exitcond_fu_508_p2 == 1'd0))) begin
        gmem_addr_1_read_reg_759 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_444_p2 == 1'd0))) begin
        gmem_addr_1_reg_740 <= color_V8_sum_cast_fu_494_p1;
        gmem_addr_reg_734 <= input_data_V2_sum_ca_fu_475_p1;
        tmp_7_cast_cast_reg_729[39 : 0] <= tmp_7_cast_cast_fu_459_p1[39 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_sig_ioackin_gmem_AWREADY == 1'b0) | (gmem_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state22))) begin
        gmem_addr_2_read_reg_787 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((gmem_RVALID == 1'b0) & (exitcond_fu_508_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state13) & (exitcond_fu_508_p2 == 1'd1))) begin
        gmem_addr_2_reg_764 <= alpha_V4_sum_cast_fu_529_p1;
        gmem_addr_3_reg_770 <= beta_V6_sum_cast_fu_544_p1;
        gmem_addr_4_reg_776 <= out_data_V10_sum_cas_fu_558_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        h_reg_698 <= h_fu_408_p2;
        next_mul1_reg_690 <= next_mul1_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        p_Val2_s_reg_792 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        r_V_2_reg_746 <= r_V_2_fu_504_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_418_p2 == 1'd0))) begin
        tmp1_cast_reg_711[31 : 0] <= tmp1_cast_fu_435_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        tmp_s_reg_797 <= {{grp_fu_626_p3[23:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        w_reg_706 <= w_fu_423_p2;
    end
end

always @ (*) begin
    if (((exitcond3_fu_403_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_fu_403_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_AWREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_WREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY;
    end else begin
        ap_sig_ioackin_gmem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state16)) begin
            gmem_ARADDR = gmem_addr_3_reg_770;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            gmem_ARADDR = gmem_addr_2_reg_764;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            gmem_ARADDR = gmem_addr_1_reg_740;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            gmem_ARADDR = gmem_addr_reg_734;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state6))) begin
        gmem_ARLEN = 32'd16;
    end else if ((((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state16)) | ((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state15)) | ((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5)))) begin
        gmem_ARLEN = 32'd1;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state16)) | ((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state15)) | ((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state6)) | ((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_AWREADY == 1'b0) & (gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | (~((ap_sig_ioackin_gmem_AWREADY == 1'b0) | (gmem_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state22)) | (~((gmem_RVALID == 1'b0) & (exitcond_fu_508_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state13) & (exitcond_fu_508_p2 == 1'd0)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state25))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state12) | ((1'b1 == ap_CS_fsm_state13) & (exitcond_fu_508_p2 == 1'd0)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond3_fu_403_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond2_fu_418_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond1_fu_444_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if ((~((gmem_RVALID == 1'b0) & (exitcond_fu_508_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state13) & (exitcond_fu_508_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else if ((~((gmem_RVALID == 1'b0) & (exitcond_fu_508_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state13) & (exitcond_fu_508_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state15 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if ((~((ap_sig_ioackin_gmem_AWREADY == 1'b0) | (gmem_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((ap_sig_ioackin_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign alpha_V4_sum_cast_fu_529_p1 = alpha_V4_sum_fu_524_p2;

assign alpha_V4_sum_fu_524_p2 = (tmp_9_cast_fu_520_p1 + tmp_3_cast_reg_665);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state13 = ((gmem_RVALID == 1'b0) & (exitcond_fu_508_p2 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign beta_V6_sum_cast_fu_544_p1 = beta_V6_sum_fu_539_p2;

assign beta_V6_sum_fu_539_p2 = (tmp_9_cast_fu_520_p1 + tmp_2_cast_reg_660);

assign c_color_1_fu_514_p2 = (c_color_reg_305 + 5'd1);

assign c_fu_449_p2 = (i_op_assign_2_reg_270 + 8'd1);

assign color_V8_sum_cast_fu_494_p1 = color_V8_sum_fu_489_p2;

assign color_V8_sum_fu_489_p2 = (tmp_5_cast_fu_485_p1 + tmp_1_cast_reg_655);

assign exitcond1_fu_444_p2 = ((i_op_assign_2_reg_270 == dim_V_read_reg_645) ? 1'b1 : 1'b0);

assign exitcond2_fu_418_p2 = ((i_op_assign_1_reg_259 == input_width_V_read_reg_640) ? 1'b1 : 1'b0);

assign exitcond3_fu_403_p2 = ((i_op_assign_reg_236 == input_height_V_read_reg_635) ? 1'b1 : 1'b0);

assign exitcond_fu_508_p2 = ((c_color_reg_305 == 5'd16) ? 1'b1 : 1'b0);

assign grp_fu_611_p0 = grp_fu_611_p00;

assign grp_fu_611_p00 = ret_V_reg_282;

assign grp_fu_611_p1 = rhs_V_1_cast_reg_680;

assign grp_fu_611_p2 = tmp1_cast_reg_711;

assign grp_fu_618_p1 = r_V_2_reg_746;

assign grp_fu_618_p2 = {{p_Val2_2_reg_293}, {8'd0}};

assign grp_fu_626_p2 = {{p_Val2_s_reg_792}, {8'd0}};

assign h_fu_408_p2 = (i_op_assign_reg_236 + 16'd1);

assign i_op_assign_1_cast5_fu_414_p1 = i_op_assign_1_reg_259;

assign input_data_V2_sum_ca_fu_475_p1 = input_data_V2_sum_fu_470_p2;

assign input_data_V2_sum_fu_470_p2 = (tmp_7_cast_cast_fu_459_p1 + tmp_14_cast_reg_670);

assign next_mul1_fu_398_p2 = (ret_V_2_reg_247 + rhs_V_2_cast_reg_685);

assign next_mul_fu_439_p2 = (ret_V_reg_282 + rhs_V_cast_reg_675);

assign out_data_V10_sum_cas_fu_558_p1 = out_data_V10_sum_fu_554_p2;

assign out_data_V10_sum_fu_554_p2 = (tmp_7_cast_cast_reg_729 + tmp_cast_reg_650);

assign r_V_2_fu_504_p0 = gmem_RDATA;

assign r_V_2_fu_504_p1 = r_V_2_fu_504_p0;

assign rhs_V_1_cast_fu_390_p1 = input_width_V;

assign rhs_V_2_cast_fu_394_p1 = input_width_V;

assign rhs_V_cast_fu_386_p1 = input_height_V;

assign tmp1_cast_fu_435_p1 = tmp1_fu_429_p2;

assign tmp1_fu_429_p2 = (ret_V_2_reg_247 + i_op_assign_1_cast5_fu_414_p1);

assign tmp_14_cast_fu_382_p1 = tmp_5_fu_372_p4;

assign tmp_1_cast_fu_340_p1 = tmp_1_fu_330_p4;

assign tmp_1_fu_330_p4 = {{color_V[31:1]}};

assign tmp_2_cast_fu_354_p1 = tmp_2_fu_344_p4;

assign tmp_2_fu_344_p4 = {{beta_V[31:1]}};

assign tmp_3_cast_fu_368_p1 = tmp_3_fu_358_p4;

assign tmp_3_fu_358_p4 = {{alpha_V[31:1]}};

assign tmp_5_cast_fu_485_p1 = tmp_8_fu_462_p3;

assign tmp_5_fu_372_p4 = {{input_data_V[31:1]}};

assign tmp_7_cast_cast_fu_459_p1 = grp_fu_611_p3;

assign tmp_8_fu_462_p3 = {{i_op_assign_2_reg_270}, {4'd0}};

assign tmp_9_cast_fu_520_p1 = i_op_assign_2_reg_270;

assign tmp_cast_fu_326_p1 = tmp_fu_316_p4;

assign tmp_fu_316_p4 = {{out_data_V[31:1]}};

assign w_fu_423_p2 = (i_op_assign_1_reg_259 + 16'd1);

always @ (posedge ap_clk) begin
    tmp_cast_reg_650[40:31] <= 10'b0000000000;
    tmp_1_cast_reg_655[31] <= 1'b0;
    tmp_2_cast_reg_660[31] <= 1'b0;
    tmp_3_cast_reg_665[31] <= 1'b0;
    tmp_14_cast_reg_670[40:31] <= 10'b0000000000;
    rhs_V_cast_reg_675[23:16] <= 8'b00000000;
    rhs_V_1_cast_reg_680[39:16] <= 24'b000000000000000000000000;
    rhs_V_2_cast_reg_685[31:16] <= 16'b0000000000000000;
    tmp1_cast_reg_711[39:32] <= 8'b00000000;
    tmp_7_cast_cast_reg_729[40] <= 1'b0;
end

endmodule //Aff_channel
